{"version":3,"sources":["images/x.svg","workers/orders.worker.js","registerServiceWorker.js","components/utils/humanname/humanname.js","components/utils/general.js","components/market/orderlistV2/orderlistV2.js","components/market/limitorder/limitorder.js","components/market/marketorder/marketorder.js","components/market/myorders/myorders.js","components/market/stats/chart/chart.js","components/market/stats/stats.js","components/utils/orders.js","components/market/accountstats/accountstats.js","components/market/markethistory/markethistory.js","components/market/leaderboard/leaderboard.js","components/market/myhistory/myhistory.js","components/market/sidebar/sidebar.js","components/utils/openorders.js","components/market/market.js","components/home/home.js","components/login/login.js","components/infobar/wrapstation/wrapstation.js","components/infobar/infobar.js","components/navbar/navbar.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Worker","__webpack_public_path__","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","first_names","last_names","colors","fontColors","HumanName","nextProps","nextState","this","props","address","length","num_names","ethers","utils","bigNumberify","first_name_idx","substr","toString","last_name_idx","mod","initials","num_colors","long_num","color_idx","_this$props","icon_only","inactive_link","react_default","a","createElement","className","_this$getName","getName","_this$getName2","Object","slicedToArray","name","_this$getColor","getColor","_this$getColor2","backgroundColor","fontColor","color","onClick","open","icon","style","final","title","Component","numberWithCommas","x","parts","split","replace","join","OrderListV2","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","max_order","orders","buy_orders","sell_orders","last_order","top10","concat","sort","b","curr_1_amt","slice","Math","floor","_this2","index","_ref","key","item","maker","price","round","id","Grid","padded","Column","computer","tablet","mobile","Popup","trigger","content","account","type","ratio","color_0","color_1","custom_style","backgroundImage","backgroundSize","backgroundRepeat","assign","setSidebar","verticalAlign","humanname_humanname","_this3","currencies","sell_orders_reverse","reverse","push","curr_0_amt","getMax","Icon","size","es","outline","_ref2","height","width","rowHeight","rowCount","rowRenderer","scrollToIndex","LimitOrder","loading","init","success","amount_0","ui_amount_0","amount_1","ui_amount_1","bignumbers","last_price","handleSubmit","bind","assertThisInitialized","flashSuccess","flashError","generateBigNumbers","i","setState","options","curr_gem_0","contracts","curr_gem_1","data","pay_amt","pay_gem","buy_amt","buy_gem","Market","offer","gasLimit","tx","wait","_context","t0","setTimeout","value","test","amount_1_bn","parseUnits","amount_0_bn","price_bn","one_bn","mul","div","formatUnits","err","_this4","_this$state","_this$props2","balances","can_buy","can_sell","curr_0_balance","curr_1_balance","gte","gt","side_text","Loader","active","inline","Form","Field","Input","label","basic","labelPosition","placeholder","onChange","e","handlePriceChange","target","disabled","readOnly","handleAmountChange","Button","Group","inverted","handleAmountPercentageChange","MarketOrder","amounts","ui_amounts","expected_price","expected_amount","handleMarketBuy","handleMarketSell","min_expected_amount","min_fill_amount","sellAllAmount","_this$state5","reset","_this$state6","_this3$state","_this$state7","will_receive","giving","getBuyAmount","one","_this$state9","new_amounts","new_ui_amounts","ui_amount","amount_bn","setExpectedAmount","_this5","_this$state10","_this6","_this$state11","_this$props4","side_texts","widths","MyOrders","myOrders","cancel","orders_table","background_item","getMyOrders","Table","Body","map","Row","Cell","textAlign","cancelOrder","selectable","striped","celled","unstackable","columns","Header","HeaderCell","candlesAppearance","wickStroke","fill","d","close","widthRatio","opacity","CandleChart","first_timestamp","curr_candle","date","Date","high","low","volume","parseFloat","end_timestamp","order","max","min","chart","initialData","buildChartPoints","ema10","ema","windowSize","sourcePath","skipUndefined","merge","c","accessor","stroke","ema50","calculatedData","margin","left","right","top","bottom","yGrid","innerTickSize","tickStrokeDasharray","tickStrokeOpacity","tickStrokeWidth","xGrid","_xScaleProvider","discontinuousTimeScaleProvider","inputDateAccessor","xScaleProvider","xScale","xAccessor","displayXAccessor","xExtents","last","react_stockcharts_es","seriesName","clamp","yExtents","axes","axisAt","orient","ticks","tickStroke","series","yAccessor","coordinates","tooltip","origin","xDisplayFormat","timeFormat","textFill","echo","w","h","tickFormat","format","fitWidth","Stats","buildStat","users","num_users","num_buys","num_sells","buy_volume","sell_volume","last_type","new_stats","curr_1","symbol","document","raw_stats","keys","statistics","updateStats","stats_chart_chart","List","Item","Content","Description","getPrice","lte","getType","curr_0_addr","curr_1_addr","buy_addr","toUpperCase","pay_addr","eventsToOrders","events","timestamp","toLocaleTimeString","undefined","hour","minute","toLocaleDateString","day","month","year","raw_timestamp","curr_0","taker","buildHashKey","first_addr","second_addr","solidityKeccak256","_callee","hashKey01","hashKey10","filter01_maker","filter01_taker","filter10_maker","filter10_taker","regenerator_default","wrap","prev","next","filters","LogTake","removeAllListeners","stop","_callee2","hashKey1","hashKey2","filter1","filter2","_context2","subscribeToMyNewOrders","_x6","_x7","_x8","_x9","_subscribeToMyNewOrders","apply","arguments","_callee3","addOrders","_context3","on","pair","take_amt","give_amt","event","subscribeToNewOrders","_x10","_x11","_x12","_subscribeToNewOrders","_callee4","_context4","AccountStats","amount_0_bought","avg_buy_price","amount_0_sold","avg_sell_price","profit","eventsToData","profiles","buyer","seller","newUserProfile","profile_data","add","avg_buy_order","avg_sell_order","getProfit","data_point","amount_0_given","amount_1_received","amount_1_given","amount_0_received","amount_sell","amount_buy","sell_price","buy_price","min_amount","lt","profit_suffix","bought_suffix","sold_suffix","profit_prefix","MarketHistory","o","participants","only","Leaderboard","direction","column","new_data","max_profit","abs","user","first","second","profit_color","clicked_column","_this$state2","headers","handleSort","MyHistory","my_orders","new_order","SideBar","visible","amount","currency_0_balance","currency_1_balance","info","owner","button_loading","button_success","button_error","updateInfo","stopLoading","balanceOf","getOffer","getOwner","sidebar_info","toggleSidebar","inputs","will_receive_wholenums","buy","internal_value","ui_value","balance","action","subtitle","updated_info","getUpdatedInfo","Sidebar","as","Segment","animation","currency","receive_currency","offered","max_take","getMaxTake","calcWillReceive","button_text","handleUserChange","executeTrade","processOpenOrders","rawOrders","n","pay_amount","buy_amount","getOpenOrders","_x","_x2","_x3","_getOpenOrders","token_addr_0","token_addr_1","pay_token","buy_token","SupportMethods","getOffers","sent","abrupt","past_orders","addMyOrders","my_past_orders","open_buy_orders","open_sell_orders","timers","num_order_calls","logged_latest_block","done_loading","updateBalances","updateOpenOrders","pastOrderWorker","myWorker","signer","getAddress","provider","getBlockNumber","addEventListener","payload","processNewBatchPastOrders","processNewBatchMyPastOrders","postMessage","toBlock","numBlocks","clearTimeout","_x4","_x5","_unSubscribeToNewOrders","unSubscribeToNewOrders","_unSubscribeToMyNewOrders","unSubscribeToMyNewOrders","timer","Promise","all","_this$props6","buildTitle","all_open_orders","parseInt","activity_panes","menuItem","render","Tab","Pane","markethistory_markethistory","leaderboard_leaderboard","myorders_myorders","myhistory_myhistory","buy_panes","limitorder_limitorder","marketorder_marketorder","sidebar_sidebar","stats_stats","divided","menu","fluid","tabular","attached","panes","orderlistV2_orderlistV2","Responsive","minWidth","onlyTablet","maxWidth","accountstats_accountstats","Home","Transition","transitionOnMount","duration","Login","selected","phrase","password","redirect","saved_wallets","handleRedirect","getSavedAccounts","defineProperty","localStorage","getItem","JSON","parse","handleLogin","handleReLogin","Redirect","to","wallet_list","classes","field_change","handleFieldChange","WrapStation","onWrap","asyncToGenerator","mark","deposit","WETH","amount_wrap","onUnwrap","withdraw","amount_unwrap","ui_amount_wrap","ui_amount_unwrap","_this$state3","weth_balance","eth_balance","_this$state4","onSubmit","handleUserUpdate","handlePercentUpdate","MAX_VAL","Infobar","context","approved","DAI","MKR","ETH","market_address","getBalances","dai_balance","mkr_balance","getApprovals","weth_approval","dai_approval","mkr_approval","getBalance","contract","approve","approveCurrencyForAmount","current_approval","approveCurrency","unapproveCurrency","weth_promise","dai_promise","mkr_promise","allowance","raw_balance","raw_allowance","getUIBalance","getUIAllowance","closeSidebar","currenciesInformation","buildRenderList","x_icon","username","primary","Link","Checkbox","toggle","checked","toggleApproval","wrapstation_wrapstation","other_buttons","href","Navbar","toggleVisible","children","onlyMobile","Menu","borderless","fixed","src","logo","alt","Dropdown","text","button","idx","position","infobar_infobar","secondary","vertical","handleToggle","config","require","erc20Abi","WEthAbi","MatchingMarketAbi","SupportMethodsAbi","App","getOptions","ethereum","getEthereum","errors","setLogLevel","providers","Web3Provider","getSigner","getContracts","getDefaultProvider","Wallet","createRandom","buildOptions","fromMnemonic","connect","encrypt","encrypted_wallet","saveEncryptedWallet","json_string","fromEncryptedJson","wallet","setItem","stringify","stored_wallets","web3","currentProvider","contract_initializer","Contract","interface","HashRouter","navbar_navbar","Switch","Route","exact","path","home_home","login_login","market_market","React","ReactDOM","components_App_App","getElementById","URL","process","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5025fe46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.23ec4264.svg\";","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d4e350f9ca2709355b9a.worker.js\");\n};","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\n\n// Import CSS Files\nimport './humanname.css';\n\n// Set up constants\nconst first_names = [\"JAMES\", \"JOHN\", \"ROBERT\", \"MICHAEL\", \"WILLIAM\", \"DAVID\", \"RICHARD\", \"CHARLES\", \"JOSEPH\", \"THOMAS\", \"CHRISTOPHER\", \"DANIEL\", \"PAUL\", \"MARK\", \"DONALD\", \"GEORGE\", \"KENNETH\", \"STEVEN\", \"EDWARD\", \"BRIAN\", \"RONALD\", \"ANTHONY\", \"KEVIN\", \"JASON\", \"MATTHEW\", \"GARY\", \"TIMOTHY\", \"JOSE\", \"LARRY\", \"JEFFREY\", \"FRANK\", \"SCOTT\", \"ERIC\", \"STEPHEN\", \"ANDREW\", \"RAYMOND\", \"GREGORY\", \"JOSHUA\", \"JERRY\", \"DENNIS\", \"WALTER\", \"PATRICK\", \"PETER\", \"HAROLD\", \"DOUGLAS\", \"HENRY\", \"CARL\", \"ARTHUR\", \"RYAN\", \"ROGER\", \"JOE\", \"JUAN\", \"JACK\", \"ALBERT\", \"JONATHAN\", \"JUSTIN\", \"TERRY\", \"GERALD\", \"KEITH\", \"SAMUEL\", \"WILLIE\", \"RALPH\", \"LAWRENCE\", \"NICHOLAS\", \"ROY\", \"BENJAMIN\", \"BRUCE\", \"BRANDON\", \"ADAM\", \"HARRY\", \"FRED\", \"WAYNE\", \"BILLY\", \"STEVE\", \"LOUIS\", \"JEREMY\", \"AARON\", \"RANDY\", \"HOWARD\", \"EUGENE\", \"CARLOS\", \"RUSSELL\", \"BOBBY\", \"VICTOR\", \"MARTIN\", \"ERNEST\", \"PHILLIP\", \"TODD\", \"JESSE\", \"CRAIG\", \"ALAN\", \"SHAWN\", \"CLARENCE\", \"SEAN\", \"PHILIP\", \"CHRIS\", \"JOHNNY\", \"EARL\", \"JIMMY\", \"ANTONIO\", \"DANNY\", \"BRYAN\", \"TONY\", \"LUIS\", \"MIKE\", \"STANLEY\", \"LEONARD\", \"NATHAN\", \"DALE\", \"MANUEL\", \"RODNEY\", \"CURTIS\", \"NORMAN\", \"ALLEN\", \"MARVIN\", \"VINCENT\", \"GLENN\", \"JEFFERY\", \"TRAVIS\", \"JEFF\", \"CHAD\", \"JACOB\", \"LEE\", \"MELVIN\", \"ALFRED\", \"KYLE\", \"FRANCIS\", \"BRADLEY\", \"JESUS\", \"HERBERT\", \"FREDERICK\", \"RAY\", \"JOEL\", \"EDWIN\", \"DON\", \"EDDIE\", \"RICKY\", \"TROY\", \"RANDALL\", \"BARRY\", \"ALEXANDER\", \"BERNARD\", \"MARIO\", \"LEROY\", \"FRANCISCO\", \"MARCUS\", \"MICHEAL\", \"THEODORE\", \"CLIFFORD\", \"MIGUEL\", \"OSCAR\", \"JAY\", \"JIM\", \"TOM\", \"CALVIN\", \"ALEX\", \"JON\", \"RONNIE\", \"BILL\", \"LLOYD\", \"TOMMY\", \"LEON\", \"DEREK\", \"WARREN\", \"DARRELL\", \"JEROME\", \"FLOYD\", \"LEO\", \"ALVIN\", \"TIM\", \"WESLEY\", \"GORDON\", \"DEAN\", \"GREG\", \"JORGE\", \"DUSTIN\", \"PEDRO\", \"DERRICK\", \"DAN\", \"LEWIS\", \"ZACHARY\", \"COREY\", \"HERMAN\", \"MAURICE\", \"VERNON\", \"ROBERTO\", \"CLYDE\", \"GLEN\", \"HECTOR\", \"SHANE\", \"RICARDO\", \"SAM\", \"RICK\", \"LESTER\", \"BRENT\", \"RAMON\", \"CHARLIE\", \"TYLER\", \"GILBERT\", \"GENE\"];\nconst last_names = [\"SMITH\", \"JOHNSON\", \"WILLIAMS\", \"JONES\", \"BROWN\", \"DAVIS\", \"MILLER\", \"WILSON\", \"MOORE\", \"TAYLOR\", \"ANDERSON\", \"THOMAS\", \"JACKSON\", \"WHITE\", \"HARRIS\", \"MARTIN\", \"THOMPSON\", \"GARCIA\", \"MARTINEZ\", \"ROBINSON\", \"CLARK\", \"RODRIGUEZ\", \"LEWIS\", \"LEE\", \"WALKER\", \"HALL\", \"ALLEN\", \"YOUNG\", \"HERNANDEZ\", \"KING\", \"WRIGHT\", \"LOPEZ\", \"HILL\", \"SCOTT\", \"GREEN\", \"ADAMS\", \"BAKER\", \"GONZALEZ\", \"NELSON\", \"CARTER\", \"MITCHELL\", \"PEREZ\", \"ROBERTS\", \"TURNER\", \"PHILLIPS\", \"CAMPBELL\", \"PARKER\", \"EVANS\", \"EDWARDS\", \"COLLINS\", \"STEWART\", \"SANCHEZ\", \"MORRIS\", \"ROGERS\", \"REED\", \"COOK\", \"MORGAN\", \"BELL\", \"MURPHY\", \"BAILEY\", \"RIVERA\", \"COOPER\", \"RICHARDSON\", \"COX\", \"HOWARD\", \"WARD\", \"TORRES\", \"PETERSON\", \"GRAY\", \"RAMIREZ\", \"JAMES\", \"WATSON\", \"BROOKS\", \"KELLY\", \"SANDERS\", \"PRICE\", \"BENNETT\", \"WOOD\", \"BARNES\", \"ROSS\", \"HENDERSON\", \"COLEMAN\", \"JENKINS\", \"PERRY\", \"POWELL\", \"LONG\", \"PATTERSON\", \"HUGHES\", \"FLORES\", \"WASHINGTON\", \"BUTLER\", \"SIMMONS\", \"FOSTER\", \"GONZALES\", \"BRYANT\", \"ALEXANDER\", \"RUSSELL\", \"GRIFFIN\", \"DIAZ\", \"HAYES\", \"MYERS\", \"FORD\", \"HAMILTON\", \"GRAHAM\", \"SULLIVAN\", \"WALLACE\", \"WOODS\", \"COLE\", \"WEST\", \"JORDAN\", \"OWENS\", \"REYNOLDS\", \"FISHER\", \"ELLIS\", \"HARRISON\", \"GIBSON\", \"MCDONALD\", \"CRUZ\", \"MARSHALL\", \"ORTIZ\", \"GOMEZ\", \"MURRAY\", \"FREEMAN\", \"WELLS\", \"WEBB\", \"SIMPSON\", \"STEVENS\", \"TUCKER\", \"PORTER\", \"HUNTER\", \"HICKS\", \"CRAWFORD\", \"HENRY\", \"BOYD\", \"MASON\", \"MORALES\", \"KENNEDY\", \"WARREN\", \"DIXON\", \"RAMOS\", \"REYES\", \"BURNS\", \"GORDON\", \"SHAW\", \"HOLMES\", \"RICE\", \"ROBERTSON\", \"HUNT\", \"BLACK\", \"DANIELS\", \"PALMER\", \"MILLS\", \"NICHOLS\", \"GRANT\", \"KNIGHT\", \"FERGUSON\", \"ROSE\", \"STONE\", \"HAWKINS\", \"DUNN\", \"PERKINS\", \"HUDSON\", \"SPENCER\", \"GARDNER\", \"STEPHENS\", \"PAYNE\", \"PIERCE\", \"BERRY\", \"MATTHEWS\", \"ARNOLD\", \"WAGNER\", \"WILLIS\", \"RAY\", \"WATKINS\", \"OLSON\", \"CARROLL\", \"DUNCAN\", \"SNYDER\", \"HART\", \"CUNNINGHAM\", \"BRADLEY\", \"LANE\", \"ANDREWS\", \"RUIZ\", \"HARPER\", \"FOX\", \"RILEY\", \"ARMSTRONG\", \"CARPENTER\", \"WEAVER\", \"GREENE\", \"LAWRENCE\", \"ELLIOTT\", \"CHAVEZ\", \"SIMS\", \"AUSTIN\", \"PETERS\", \"KELLEY\", \"FRANKLIN\", \"LAWSON\"];\nconst colors = [\"#001f3f\", \"#0074D9\", \"#7FDBFF\", \"#39CCCC\", \"#2ECC40\", \"#01FF70\", \"#FFDC00\", \"#FF851B\", \"#3D9970\", \"#F15152\", \"#111111\", \"#AAAAAA\", \"#DDDDDD\"];\nconst fontColors = [\"#FFFFFF\", \"#FFFFFF\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#FFFFFF\", \"#111111\", \"#111111\"];\n\nclass HumanName extends Component {\n  // Only update the component if the address has changed since no other change will effect output.\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.address !== nextProps.address) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert the address to a name using the mapping scheme\n  getName(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [address, \"0x\"];\n    }\n\n    const num_names = ethers.utils.bigNumberify(\"200\");\n    \n    // Split the address into 2 equal lengths to create the first and last names\n    let first_name_idx = ethers.utils.bigNumberify(address.substr(0, 22)).toString();\n    let last_name_idx = ethers.utils.bigNumberify(\"0x\" + address.substr(22, 40)).toString();\n    \n    // Mod the numbers by 200 to get a response that is within the max index of 200 to be used to retrieve a first and last name\n    first_name_idx = ethers.utils.bigNumberify(first_name_idx).mod(num_names).toString();\n    last_name_idx = ethers.utils.bigNumberify(last_name_idx).mod(num_names).toString();\n\n    const initials = first_names[first_name_idx][0] + last_names[last_name_idx][0];\n    return [first_names[first_name_idx] + \" \" + last_names[last_name_idx], initials];\n  }\n\n  // Convert the address to a color using the mapping scheme\n  getColor(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [colors[0], fontColors[0]];\n    }\n\n    const num_colors = ethers.utils.bigNumberify(\"13\");\n    const long_num = ethers.utils.bigNumberify(address).toString();\n\n    // Mode the number by 13 to get a response within the max index of 13 to be used to retrieve the colors\n    const color_idx = ethers.utils.bigNumberify(long_num).mod(num_colors).toString()\n    return [colors[color_idx], fontColors[color_idx]]\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { address, icon_only, inactive_link } = this.props;\n\n    // If the address is null then render an empty circle\n    if(!address) {\n      return (<div className=\"HumanName-circle\"></div>);\n    }\n\n    // Get the computed name and colors\n    let [ name, initials ] = this.getName(address);\n    const [ backgroundColor, fontColor ] = this.getColor(address);\n    \n    name = (<div className=\"HumanName-name\">{name}</div>);\n    const color = { \"backgroundColor\": backgroundColor, \"color\": fontColor };\n\n    // OnClick function will open up a tab with the account information in etherscan\n    let onClick = () => window.open('https://etherscan.io/address/' + address, '_blank');\n    if(inactive_link) {\n      onClick = null;\n    }\n\n    const icon = (<div className=\"HumanName-circle\" style={color}>{initials}</div>)\n    let final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon} {name}</span>)\n    if( icon_only ) {\n      final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon}</span>)\n    }\n    return final\n\n  }\n}\n\nexport default HumanName\n","export function numberWithCommas(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Grid, Icon, Popup } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS FIle\nimport './orderlistV2.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass OrderListV2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n    this.orders = [];\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if buy/sell orders has changed or the last order is different\n    if(nextProps.buy_orders !== this.props.buy_orders || nextProps.sell_orders !== this.props.sell_orders || nextProps.last_order !== this.props.last_order) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retreives the maximum value in the orderbook\n  getMax(orders) {\n    const top10 = orders.concat().sort((a,b) => b.curr_1_amt - a.curr_1_amt).slice(0,10);\n    if(top10.length === 10) {\n      return top10[top10.length-1].curr_1_amt;\n    } else if(top10.length > 0) {\n      return top10[Math.floor(top10.length/2)].curr_1_amt;\n    } else {\n      return null;\n    }\n  }\n\n  // Renders the HTML for each row in the virtualized table\n  // Includes the color bands based on ratio to max\n  rowRenderer({index, key, style}) {\n    const item = this.orders[index];\n    // If this condition is true then this means it is the middle dividing row and the last price should be shown\n    if(item.maker === \"0\") {\n      const { last_order } = this.props;\n      let price = \"...\";\n      if(last_order[\"price\"]) {\n        price = last_order[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100) + \"▲\"}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100)  + \"▼\" }</span>);\n      }\n      return (\n        <div id=\"OrderListV2-table-middle\" key={key} style={style} >\n          <Grid padded={'horizontally'}>\n            <Grid.Column computer={2} tablet={2} mobile={3}>\n            </Grid.Column>\n            <Grid.Column computer={4} tablet={4} mobile={4}>\n              <Popup trigger={<span>{price}</span>} content='Last Price' />\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={4}>\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={5}>\n            </Grid.Column>\n          </Grid>\n        </div>\n      )      \n    }\n\n    // Calculate ratio to the max\n    const { account } = this.props;\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1_amt\"]/this.max_order * 100;\n    const direction = \"right\";\n\n    // Calculate the colors for the color bands\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color to make the rows striped\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n    if(account === item[\"maker\"]) {\n      color = `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n\n    style = Object.assign(custom_style, style);\n    let price = item[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"OrderListV2-table-entry\" key={key} style={style} onClick={() => this.props.setSidebar(item) }>\n        <Grid padded={'horizontally'} verticalAlign={'middle'} className=\"OrderListV2-table-entry-grid\">\n          <Grid.Column computer={2} tablet={2} mobile={3} className=\"OrderListV2-table-entry-grid-img\">\n            <HumanName inactive_link icon_only address={item[\"maker\"]} />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_0_amt\"])}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_1_amt\"])}\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, buy_orders, sell_orders } = this.props;\n\n    // Copy and reverse the sell order list\n    const sell_orders_reverse = sell_orders.slice(0);\n    sell_orders_reverse.reverse();\n\n    // Push the \"MIDDLE\" row with the price summary onto the list\n    sell_orders_reverse.push({\n      \"maker\": \"0\",\n      \"price\": \"0\",\n      \"curr_0_amt\": \"0\",\n      \"curr_1_amt\": \"0\"\n    });\n\n    // Concatenate with the list of buy orders to get the mirroed orderbook\n    this.orders = sell_orders_reverse.concat(buy_orders);\n\n    // Recalculate the max order on the books\n    this.max_order = this.getMax(this.orders);\n\n    // If the buy or sell book is length 0 then just show loading screen since this mostly indicates an error and bad UX\n    if(sell_orders.length === 0 && buy_orders.length === 0) {\n      return (\n        <div className=\"OrderListV2\">\n          <div className=\"OrderListV2-loading\">Loading...</div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"OrderListV2\">\n        <Grid id=\"OrderListV2-table-header\">\n          <Grid.Column computer={2} tablet={2} mobile={3}>\n            <Icon name=\"user circle\" size=\"large\" />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5}>\n            {currencies[1]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={40}\n              rowCount={this.orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              scrollToIndex={sell_orders_reverse.length + 6}\n              className=\"OrderListV2-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n\nexport default OrderListV2","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './limitorder.css'\n\nclass LimitOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      init: false,\n      error: false,\n      success: false,\n      price: '',\n      amount_0: '',\n      ui_amount_0: '',\n      amount_1: '',\n      ui_amount_1: '',\n      bignumbers: [],\n      last_price: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores BigNumber integers for easy math later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Main function that interfaces and writes to the blockchain.\n  // This is the most important function here.\n  async handleSubmit(type) {\n    // Set loading to true to update UI\n    this.setState({loading: true, error: false, success: false});\n\n    const { currencies, options } = this.props;\n\n    // Get the important info for the transaction\n    const amount_0 = this.state.amount_0;\n    const amount_1 = this.state.amount_1;\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n    let data = {};\n\n    // Set data to the correct value depending on if the order is a BUY or SELL\n    // Basically you just flip the currency 0 and currency 1\n    if(type === \"BUY\") {\n      data = {\n        pay_amt: amount_1,\n        pay_gem: curr_gem_1,\n        buy_amt: amount_0,\n        buy_gem: curr_gem_0\n      };\n    } else if(type === \"SELL\") {\n      data = {\n        pay_amt: amount_0,\n        pay_gem: curr_gem_0,\n        buy_amt: amount_1,\n        buy_gem: curr_gem_1\n      };\n    } else {\n      return;\n    }\n\n    console.log(data);\n\n    try {\n      const tx = await options.contracts.Market.offer(data.pay_amt, data.pay_gem, data.buy_amt, data.buy_gem, 1, { gasLimit: 500000 });\n      await tx.wait();\n      this.flashSuccess();\n    } catch (error) {\n      console.log(error);\n      this.flashError();\n    }\n  }\n\n  // Function to flash Success on the button when a order has gone thru\n  flashSuccess() {\n    this.setState({ success : true, loading: false });\n    setTimeout(() => this.setState({ success: false, price: '', amount_0: '0', ui_amount_0: '', amount_1: '0', ui_amount_1: '' }), 1500);\n  }\n\n  // Function to flash Error on the button when a order has failed\n  flashError() {\n    this.setState({ error: true, loading: false });\n    setTimeout(() => this.setState({ error: false }), 1500);\n  }\n\n  // Handler for changes in price in the UI\n  handlePriceChange(value) {\n    if(/\\S/.test(value) && this.state.ui_amount_0 !== \"\") {\n      const price = value;\n      const ui_amount_1 = this.state.ui_amount_0 * price;\n      const amount_1_bn = ethers.utils.parseUnits(ui_amount_1.toString(), 'ether');\n      this.setState({ price: price, amount_1: amount_1_bn.toString(), ui_amount_1: ui_amount_1.toString() });\n    } else {\n      this.setState({ price: value, amount_1: '0', ui_amount_1: '' });\n    }\n  }\n\n  // Handler for changes in amount to be traded in the UI\n  handleAmountChange(index, value) {\n    if(/\\S/.test(value) && this.state.price !== \"\") {\n      const price = this.state.price;\n      let ui_amount_0 = null;\n      let ui_amount_1 = null;\n      let amount_0_bn = null;\n      let amount_1_bn = null;\n\n      // All math is done in BigNumber arithmetic using wei\n      if(index === 0) {\n        ui_amount_0 = value;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n        ui_amount_1 = ui_amount_0 * price;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n      } else if(index === 1) {\n        ui_amount_1 = value;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n        ui_amount_0 = ui_amount_1 / price;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n      } else {\n        return;\n      }\n\n      this.setState({ \n        amount_0: amount_0_bn.toString(), \n        ui_amount_0: ui_amount_0, \n        amount_1: amount_1_bn.toString(),\n        ui_amount_1: ui_amount_1,\n      });\n    } else {\n      this.setState({\n        amount_0: '0',\n        ui_amount_0: '',\n        amount_1: '0',\n        ui_amount_1: ''\n      });\n    }\n  }\n\n  // Handler for changes in amount using the percentage tools\n  handleAmountPercentageChange(index, value) {\n    const price = this.state.price;\n\n    // All arithmetic is done using BigNumber and wei\n    let ui_amount_0 = null;\n    let ui_amount_1 = null;\n    let amount_0_bn = null;\n    let amount_1_bn = null;\n    const price_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(price.toString(), 'ether'));\n    const one_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits('1'), 'ether');\n\n    if(index === 0) {\n      amount_0_bn = value;\n      amount_1_bn = amount_0_bn.mul(price_bn).div(one_bn);\n    } else if(index === 1) {\n      amount_1_bn = value;\n      amount_0_bn = amount_1_bn.mul(one_bn).div(price_bn);\n    } else {\n      return;\n    }\n\n    // Try catch to stop any type of input that is invalid with a valid response\n    try {\n      ui_amount_0 = ethers.utils.formatUnits(amount_0_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_0 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    try {\n      ui_amount_1 = ethers.utils.formatUnits(amount_1_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_1 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    this.setState({\n      amount_0: amount_0_bn.toString(),\n      ui_amount_0: ui_amount_0,\n      amount_1: amount_1_bn.toString(),\n      ui_amount_1: ui_amount_1\n    });\n  }\n\n  render() {\n    const { price, amount_0, amount_1, ui_amount_0, ui_amount_1, bignumbers, loading, success, error } = this.state;\n    const { currencies, last_price, balances, options } = this.props;\n    \n    // Set flags that set whether a buy/sell is logically possible\n    let can_buy = false;\n    let can_sell = false;\n    \n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    const amount_0_bn = ethers.utils.bigNumberify(amount_0);\n    const amount_1_bn = ethers.utils.bigNumberify(amount_1);\n\n    if(price !== \"\" && curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    \n    if(price !== \"\" && curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Set the sidetext (text next to the button) depending on the situation context\n    let side_text = \"\";\n    if(loading) {\n      side_text = (<span className=\"LimitOrder-color\"><Loader active inline size=\"small\"/> LOADING...</span>);\n    }\n    if(error) {\n      side_text = (<span className=\"red LimitOrder-color\">FAILED</span>);\n    }\n    if(success) {\n      side_text = (<span className=\"green LimitOrder-color\">SUCCESS</span>);\n    }\n\n    return (\n      <div className=\"LimitOrder\">\n        <Form size='tiny'>\n          <div className=\"LimitOrder-headers\">Price</div>\n          <Form.Field id=\"LimitOrder-price\">\n            <Input\n              label={{ basic: true, content: currencies[1] + \" / \" + currencies[0]  }}\n              labelPosition='right'\n              placeholder='Enter Price...'\n              value={price}\n              onChange={(e) => { this.handlePriceChange(e.target.value) }}\n              disabled={options.readOnly}\n            />\n            <span className=\"LimitOrder-currentPrice\" onClick={() => this.handlePriceChange(last_price) } >Current Market Price</span>\n          </Form.Field>\n          <hr />\n          <div className=\"LimitOrder-headers\" id=\"LimitOrder-amount-header\">Amounts</div>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[0] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_0}\n                onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[1] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_1}\n                onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n          <Button className=\"LimitOrder-button\" color='green' disabled={!can_buy || loading || options.readOnly} onClick={() => this.handleSubmit(\"BUY\")} >BUY {currencies[0]}</Button>\n          <Button className=\"LimitOrder-button\" color='red' disabled={!can_sell || loading || options.readOnly} onClick={() => this.handleSubmit(\"SELL\")} >SELL {currencies[0]}</Button>\n          {side_text}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default LimitOrder","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './marketorder.css'\n\nclass MarketOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false],\n      amounts: ['0', '0'],\n      ui_amounts: ['', ''],\n      expected_price: ['', ''],\n      expected_amount: ['0', '0'],\n      bignumbers: []\n    };\n\n    this.handleMarketBuy = this.handleMarketBuy.bind(this);\n    this.handleMarketSell = this.handleMarketSell.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores a list of BigNumber integers for arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n\n    this.setState({ bignumbers });\n  }\n\n  // Handler for Market Buy\n  async handleMarketBuy() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[1] = true;\n    error[1] = false;\n    success[1] = false;\n    this.setState({ loading , error, success });\n    \n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n    \n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[1]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_1,\n      pay_amt: amounts[1],\n      buy_gem: curr_gem_0,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the data object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      var tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"], { gasLimit: 500000 });\n      // Wait for transaction to finish\n      await tx.wait();\n      this.flashSuccess(1);\n    } catch (error) {\n      this.flashError(1);\n    }\n  }\n\n  // Handler for Market Sell\n  async handleMarketSell() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[0] = true;\n    error[0] = false;\n    success[0] = false;\n    this.setState({ loading , error, success });\n\n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[0]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_0,\n      pay_amt: amounts[0],\n      buy_gem: curr_gem_1,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the dta object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      const tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"], { gasLimit: 500000 });\n      // Wait for tx to finish\n      await tx.wait();\n      this.flashSuccess(0);\n    } catch (error) {\n      this.flashError(0);\n    }\n  }\n\n  // Handler for when a tx is successful\n  flashSuccess(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = true;\n    error[index] = false;\n    this.setState({ loading, success, error });\n    setTimeout(() => this.reset(index), 1500);\n  }\n\n  // Handler for whne a tx is failed\n  flashError(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = true;\n    this.setState({ loading, success, error });\n    setTimeout(() => {\n      let { loading, success, error } = this.state;\n      loading[index] = false;\n      success[index] = false;\n      error[index] = false;\n      this.setState({ error });\n    }, 1500);\n  }\n\n  // State reset function that completely nullifies the component state\n  reset(index) {\n    let { loading, success, error, amounts, ui_amounts } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = false;\n    amounts[index] = \"0\";\n    ui_amounts[index] = \"\";\n    this.setState({ loading, success, error, amounts, ui_amounts });\n  }\n\n  // Calculate the amount of currency that we expect to receive from the trade\n  // Index is wether currency 0 or 1 is being bought\n  async setExpectedAmount(index) {\n    // Assemble variables\n    const { amounts, expected_amount, expected_price } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    let will_receive = \"0\";\n    let giving = amounts[index];\n\n    // Depending on which currency is being received\n    if(index === 0) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_1, curr_gem_0, giving);\n    } else if(index === 1) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_0, curr_gem_1, giving);\n    }\n\n    // If the amount received/given is greater than 0 then calculate expected info using BigNumber\n    if(will_receive !== \"0\" && giving !== \"0\") {\n      will_receive = ethers.utils.bigNumberify(will_receive);\n      giving = ethers.utils.bigNumberify(giving);\n      var one = ethers.utils.bigNumberify(ethers.utils.parseUnits('1', 'ether'));\n\n      var price = one.mul(will_receive).div(giving);\n      if(index === 1) {\n        price = one.mul(giving).div(will_receive);\n      }\n      price = Math.round(ethers.utils.formatUnits(price.toString(), 'ether') * 1000) / 1000;\n\n      expected_amount[index] = will_receive;\n      expected_price[index] = price;\n    } else {\n      expected_amount[index] = \"0\";\n      expected_price[index] = \"\";\n    }\n    this.setState({ expected_amount, expected_price });\n  }\n\n  // Handler for a change in the amount of currency to be traded\n  handleAmountChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather currency balance\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    // If there is an error then replace values with empty values\n    try {\n      // Test the new amount value to see if it is whitespace and if so replace with empty values\n      if(/\\S/.test(value)) {\n        const ui_amount = value;\n\n        // Get BigNumber representation of the amount in wei\n        const amount_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount.toString(), 'ether'));\n\n        // Reassign the new amounts\n        new_amounts[index] = amount_bn.toString();\n        new_ui_amounts[index] = ui_amount.toString();\n\n        // Save the amounts\n        this.setState({ \n          amounts: new_amounts,\n          ui_amounts: new_ui_amounts\n        });\n      } else {\n        new_amounts[index] = '0';\n        new_ui_amounts[index] = '';\n      }\n    } catch(err) {\n      console.log(err);\n      new_amounts[index] = '0';\n      new_ui_amounts[index] = '';\n    }\n\n    this.setState({\n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  // Handler for changes in amount using percentage tool\n  handleAmountPercentageChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather the amount variables\n    // Initialize ui_amount to 0 to be replaced by real value in try/catch\n    const amount_bn = value;\n    let ui_amount = ethers.utils.formatUnits(\"0\", 'ether');\n    try {\n      ui_amount = ethers.utils.formatUnits(amount_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n    }\n\n    // clone amounts into new objects\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    new_amounts[index] = amount_bn.toString();\n    new_ui_amounts[index] = ui_amount.toString();\n\n    // Store new objects\n    this.setState({ \n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { amounts, ui_amounts, expected_price, bignumbers, loading, success, error } = this.state;\n    const { currencies, balances, options } = this.props;\n    \n    // Set flags if buying/selling is logically valid\n    let can_buy = false;\n    let can_sell = false;\n    \n    // Get the balances for each currency\n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    // Get the amounts for each currency input box\n    const amount_0_bn = ethers.utils.bigNumberify(amounts[0]);\n    const amount_1_bn = ethers.utils.bigNumberify(amounts[1]);\n\n    // If the balance is greater than the amount then set the proper flags\n    if(curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    if(curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Generate the side text next to the buttons\n    let side_texts = [\"\", \"\"];\n    for(let i = 0; i < 2; i++) {\n      if(loading[i]) {\n        side_texts[i] = (<span className=\"MarketOrder-color\"><Loader active inline size=\"small\"/> LOADING...</span>);\n      }\n      if(error[i]) {\n        side_texts[i] = (<span className=\"red MarketOrder-color\">FAILED</span>);\n      }\n      if(success[i]) {\n        side_texts[i] = (<span className=\"green MarketOrder-color\">SUCCESS</span>);\n      }\n    }\n\n    return (\n      <div className=\"MarketOrder\">\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"green\">BUY</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[1]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"green\">Buy</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[1] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[1]}\n                  onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='green' disabled={!can_buy || loading[1] || error[1] || options.readOnly} onClick={this.handleMarketBuy} >BUY {currencies[0]}</Button>\n            {side_texts[1]}\n          </Form>\n        </div>\n        <hr />\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"red\">SELL</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[0]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"red\">Sell</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[0] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[0]}\n                  onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(0, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='red' disabled={!can_sell || loading[0] || error[0] || options.readOnly} onClick={this.handleMarketSell} >SELL {currencies[0]}</Button>\n            {side_texts[0]}\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MarketOrder\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Table, Button } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './myorders.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyOrders extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  // Filter to the open orders that match the current account address\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n    for(let i = 0; i < orders.length; i++) {\n      if(orders[i][\"maker\"] === account) {\n        myOrders.push(orders[i]);\n      }\n    }\n    return myOrders;\n  }\n\n  // Handler to cancel an order\n  async cancelOrder(id) {\n    const { Market } = this.props.options.contracts;\n    console.log(\"CANCEL ORDER \" + id);\n    try {\n      const tx = await Market.cancel(id, { gasLimit: 500000 });\n      await tx.wait();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies } = this.props;\n\n    let orders_table = null;\n    let background_item = null;\n    const orders = this.getMyOrders();\n\n    // If there are no orders then render an emtpy list\n    if(orders.length === 0) {\n      background_item = (<div id=\"MyOrders-empty\">NO ORDERS</div>);\n    } else {\n      orders_table = (<Table.Body id=\"MyOrders-tableBody\">\n            {orders.map((item, index) => {\n              var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>) : (<span className=\"red MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>)\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'><Button className=\"MyOrders-button\" color='red' size='mini' inverted onClick={() => {this.cancelOrder(item[\"id\"])}}>CANCEL</Button></div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{price}</div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_0_amt\"])}</div>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_1_amt\"])}</div>\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>);\n    }\n\n    return (\n      <div className=\"MyOrders\">\n        <Table selectable striped basic celled unstackable columns={5} textAlign='left' id=\"MyOrders-table\">\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Action</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Price</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[0]}</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[1]}</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          { orders_table }\n        </Table>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyOrders\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { BarSeries, CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { CrossHairCursor, CurrentCoordinate } from \"react-stockcharts/lib/coordinates\";\nimport { OHLCTooltip, MovingAverageTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\" \nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\n\n// Import CSS Files\nimport './chart.css';\n\n// Set the appearance of the candle chart\nconst candlesAppearance = {\n  wickStroke: \"#7a8692\",\n  fill: function fill(d) {\n    return d.close > d.open ? \"rgba(0, 255, 0, 0.5)\" : \"rgba(255, 0, 0, 0.5)\";\n  },\n  widthRatio: 0.8,\n  opacity: 1,\n};\n\nclass CandleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n  \n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if there are a different number of orders being piped in\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert raw order data into the processed chart points\n  buildChartPoints(orders) {\n    let data = [];\n\n    let first_timestamp = orders[orders.length - 1]['raw_timestamp'];\n    first_timestamp = first_timestamp - (first_timestamp % (3600000/4));\n\n    let curr_candle = {\n      date: new Date(first_timestamp),\n      open: orders[orders.length-1]['price'],\n      high: orders[orders.length-1]['price'],\n      low: orders[orders.length-1]['price'],\n      close: orders[orders.length-1]['price'],\n      volume: parseFloat(ethers.utils.formatUnits(orders[orders.length-1]['curr_1'], 'ether'))\n    };\n    let end_timestamp = first_timestamp + (3600000/4);\n    for(let i = orders.length-2; i >= 0; i--) {\n      const order = orders[i];\n      if(order[\"raw_timestamp\"] < end_timestamp) {\n        curr_candle['volume'] += parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'));\n        curr_candle['close'] = order['price'];\n        if(order['price'] > curr_candle['high']) {\n          curr_candle['high'] = order['price'];\n        } else if(order['price'] < curr_candle['low']) {\n          curr_candle['low'] = order['price'];\n        }\n      } else {\n        data.push(curr_candle);\n        curr_candle = {\n          date: new Date(end_timestamp),\n          open: curr_candle['close'],\n          high: Math.max(order['price'], curr_candle['close']),\n          low: Math.min(order['price'], curr_candle['close']),\n          close: order['price'],\n          volume: parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'))\n        };\n        end_timestamp = end_timestamp + (3600000/4);\n      }\n    }\n    return data;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    var { width, ratio, orders } = this.props\n\n    var chart = <div id=\"CandleChart-loading\">Loading...</div>\n    if(orders.length > 0) {\n      var initialData = this.buildChartPoints(orders)\n      const ema10 = ema()\n        .options({\n          windowSize: 10, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema10 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema10) // Required, if not provided, log an error during calculation\n        .stroke(\"#ce4200\"); // Optional\n      const ema50 = ema()\n        .options({\n          windowSize: 50, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema50 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema50) // Required, if not provided, log an error during calculation\n        .stroke(\"blue\"); // Optional\n      const calculatedData = ema50(ema10(initialData))\n\n      const margin = { left: 50, right: 60, top: 30, bottom: 50 }\n      const height = 500\n      var gridHeight = height - margin.top - margin.bottom;\n      var gridWidth = width - margin.left - margin.right;\n      var showGrid = true;\n      var yGrid = showGrid ? { \n          innerTickSize: -1 * gridWidth,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      var xGrid = showGrid ? { \n          innerTickSize: -1 * gridHeight,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor( d => d.date )\n      const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider( calculatedData )\n      const start = xAccessor(last(data))\n      const end = xAccessor(data[Math.max(0, data.length - 100)])\n      const xExtents = [start, end]\n\n      chart = (\n        <ChartCanvas\n          height={height}\n          ratio={ratio}\n          width={width}\n          margin={margin}\n          type=\"hybrid\"\n          seriesName=\"Data\"\n          data={data}\n          xScale={xScale}\n          xAccessor={xAccessor}\n          displayXAccessor={displayXAccessor}\n          xExtents={xExtents}\n          clamp={true}\n        >\n          <Chart id={1} height={400} yExtents={[d => [d.high+3, d.low-3], ema10.accessor(), ema50.accessor()]}>\n            <YAxis axisAt=\"right\" orient=\"right\" ticks={10} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...yGrid} />\n            <CandlestickSeries {...candlesAppearance} />\n            <LineSeries yAccessor={ema10.accessor()} stroke={ema10.stroke()}/>\n            <LineSeries yAccessor={ema50.accessor()} stroke={ema50.stroke()}/>\n            <CurrentCoordinate yAccessor={ema10.accessor()} fill={ema10.stroke()} />\n            <CurrentCoordinate yAccessor={ema50.accessor()} fill={ema50.stroke()} />\n            <OHLCTooltip origin={[10, 10]} xDisplayFormat={timeFormat(\"%m-%d-%y %I:%M %p\")} textFill=\"#9aa3ad\" />\n            <MovingAverageTooltip\n              origin={[10, 25]}\n              textFill=\"#9aa3ad\"\n              options={[\n                {\n                  yAccessor: ema10.accessor(),\n                  type: \"EMA\",\n                  stroke: ema10.stroke(),\n                  windowSize: ema10.options().windowSize,\n                  echo: \"some echo here\",\n                },\n                {\n                  yAccessor: ema50.accessor(),\n                  type: \"EMA\",\n                  stroke: ema50.stroke(),\n                  windowSize: ema50.options().windowSize,\n                  echo: \"some echo here\",\n                },\n              ]}\n            />\n          </Chart>\n          <Chart id={2} origin={(w, h) => [0, h - 100]} height={100} yExtents={d => d.volume}>\n            <XAxis axisAt=\"bottom\" orient=\"bottom\" stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...xGrid} />\n            <YAxis axisAt=\"left\" orient=\"left\" ticks={5} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" tickFormat={format(\".2s\")} />\n            <BarSeries\n              yAccessor={d => d.volume}\n              fill={d => (d.close > d.open ? \"rgba(0, 255, 0, 0.2)\" : \"rgba(255, 0, 0, 0.3)\")}\n            />\n          </Chart>\n          <CrossHairCursor stroke=\"#9aa3ad\" opacity={1} />\n        </ChartCanvas>\n      )\n    }\n    return (\n      <div className=\"CandleChart\">\n        {chart}\n      </div>\n    );\n  }\n}\n\nCandleChart = fitWidth(CandleChart);\nexport default CandleChart","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, List } from 'semantic-ui-react';\nimport CandleChart from './chart/chart';\n\n// Import CSS Files\nimport './stats.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.buildStat = this.buildStat.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the orders has increased in length\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Update the stats and the document title\n  updateStats() {\n    let users = {};\n    const { orders } = this.props;\n\n    if(orders.length === 0) {\n      return {\n        num_users: '...',\n        num_buys: '...',\n        num_sells: '...',\n        buy_volume: '...',\n        sell_volume: '...',\n        last_price: '...',\n        last_type: '...'\n      };\n    }\n\n    let new_stats = {\n      num_users: 0,\n      num_buys: 0,\n      num_sells: 0,\n      buy_volume: 0.0,\n      sell_volume: 0.0,\n      last_price: 0,\n      last_type: \"BUY\"\n    };\n\n    for(let i = 0; i < orders.length; i++) {\n      const order = orders[i];\n\n      // Check if maker is in user list\n      if(!(order[\"maker\"] in users)) {\n        users[order[\"maker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if taker is in user list\n      if(!(order[\"taker\"] in users)) {\n        users[order[\"taker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if order is buy or sell and add the necessary info\n      const curr_1 = parseFloat(ethers.utils.formatUnits(order[\"curr_1\"].toString(), \"ether\"));\n      if(order[\"type\"] === \"BUY\") {\n        new_stats[\"num_buys\"] += 1;\n        new_stats[\"buy_volume\"] += curr_1;\n      } else if(order[\"type\"] === \"SELL\") {\n        new_stats[\"num_sells\"] += 1;\n        new_stats[\"sell_volume\"] += curr_1;\n      }\n    }\n\n    if(orders.length > 0) {\n      new_stats[\"last_price\"] = Math.round(orders[0][\"price\"] * 1000) / 1000;\n      new_stats[\"last_type\"] = orders[0][\"type\"];\n      new_stats[\"buy_volume\"] = Math.round(new_stats[\"buy_volume\"] * 100) / 100;\n      new_stats[\"sell_volume\"] = Math.round(new_stats[\"sell_volume\"] * 100) / 100;\n    }\n\n    let symbol = \"▲\";\n    if(new_stats[\"last_type\"] === \"SELL\") {\n      symbol = \"▼\";\n    }\n\n    document.title = new_stats[\"last_price\"] + \" \" + symbol + \" \" + this.props.currencies[1] + \"/\" + this.props.currencies[0];\n    return new_stats;\n  }\n\n  // Build each of the statistics given the raw stats and keys\n  buildStat(key, raw_stats) {\n    // If loading then print the loading dots\n    if(raw_stats[key] === \"...\") {\n      return <span className=\"loading_value\">{raw_stats[key]}</span>;\n    }\n\n    var color = null;\n    var value = numberWithCommas(raw_stats[key]);\n    if(key === \"buy_volume\" || key === \"sell_volume\") {\n      color = key === \"buy_volume\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]}</span></span>;\n    }\n\n    if(key === \"num_buys\" || key === \"num_sells\") {\n      color = key === \"num_buys\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()}</span>;\n    }\n\n    if(key === \"last_price\") {\n      color = raw_stats[\"last_type\"] === \"BUY\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]} / {this.props.currencies[0]}</span></span>;\n    }\n\n    return value;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, orders } = this.props;;\n\n    const keys = [\"num_users\", \"num_buys\", \"num_sells\", \"buy_volume\", \"sell_volume\", \"last_price\"];\n    let statistics = {};\n    const raw_stats = this.updateStats();\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      statistics[key] = this.buildStat(key, raw_stats);\n    }\n\n    const chart = <div id=\"Stats-chart\"><CandleChart orders={orders} currencies={currencies} /></div>;\n\n    return (\n      <div className=\"Stats\">\n        {chart}\n        <div id=\"Stats-statistics\">\n          <Grid id=\"Stats-grid\">\n            <Grid.Row>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Buys</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_buys\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Buy Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"buy_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Sells</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_sells\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Sell Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"sell_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Last Price</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"last_price\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Users</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_users\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Stats","import { ethers } from 'ethers';\n\n/** ################# HELPER FUNCTIONS ################# **/\n\n// Helper function to calculate the price of an order using BigNumber for all operations\nexport function getPrice(pay_amt, buy_amt, type) {\n\t// Convert amounts to BigNumbers\n\tpay_amt = ethers.utils.bigNumberify(pay_amt);\n\tbuy_amt = ethers.utils.bigNumberify(buy_amt);\n\n\t// If amounts are sufficiently small, just ignore and return false\n\tif(pay_amt.lte(ethers.utils.bigNumberify(\"1000\")) || buy_amt.lte(ethers.utils.bigNumberify(\"1000\"))) {\n\t\treturn false;\n\t}\n\n\tvar one = ethers.utils.bigNumberify(ethers.utils.parseUnits(\"1\", \"ether\"));\n\tvar price = 0;\n\n\t// Use the order type to decide operation for calculation and return values\n\tif(type === \"BUY\") {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(pay_amt).div(buy_amt).toString(), 'ether'));\n\t\treturn [price, buy_amt, pay_amt];\n\t} else {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(buy_amt).div(pay_amt).toString(), 'ether'));\n\t\treturn [price, pay_amt, buy_amt];\n\t}\n}\n\n// Helper function to determine the type of an order (BUY or SELL)\nfunction getType(order, currencies, curr_0_addr, curr_1_addr) {\n\t// Extract what is being bought and what is being sold\n\tvar buy_addr = order[\"buy_gem\"].toUpperCase();\n\tvar pay_addr = order[\"pay_gem\"].toUpperCase();\n\n\t// Compare to curr_0 and curr_1 to decide if this is a BUY or a SELL\n\tif(buy_addr === curr_0_addr.toUpperCase() && pay_addr === curr_1_addr.toUpperCase()) {\n\t\treturn \"SELL\";\n\t} else if(buy_addr === curr_1_addr.toUpperCase() && pay_addr === curr_0_addr.toUpperCase()) {\n\t\treturn \"BUY\";\n\t} else {\n\t\treturn null;\n\t}\n}\n\n// Helper function to convert raw orders into processed orders\nexport function eventsToOrders(events, currencies, curr_0_addr, curr_1_addr) {\n\tvar orders = [];\n\tfor(var i = 0; i < events.length; i++) {\n\t\tvar order = events[i];\n\t\tvar type = getType(order, currencies, curr_0_addr, curr_1_addr);\n\t\tvar pay_amt = order[\"give_amt\"].toString();\n\t\tvar buy_amt = order[\"take_amt\"].toString();\n\t\tvar offer = getPrice(pay_amt, buy_amt, type);\n\t\tif(offer) {\n\t\t\tvar timestamp = new Date(order[\"timestamp\"] * 1000);\n\t\t\ttimestamp = timestamp.toLocaleTimeString(undefined, {hour: 'numeric', minute: '2-digit'}) + \" \" + timestamp.toLocaleDateString(undefined, {day: 'numeric', month: 'numeric', year: '2-digit'});\n\t\t\torder = {\n\t\t\t\t\"raw_timestamp\": order[\"timestamp\"] * 1000,\n\t\t\t\t\"timestamp\": timestamp,\n\t\t\t\t\"type\": type,\n\t\t\t\t\"price\": offer[0],\n\t\t\t\t\"curr_0\": offer[1],\n\t\t\t\t\"curr_1\": offer[2],\n\t\t\t\t\"taker\": order[\"taker\"],\n\t\t\t\t\"maker\": order[\"maker\"]\n\t\t\t};\n\t\t\torders.push(order);\n\t\t}\n\t}\n\torders.reverse();\n\treturn orders;\n}\n\n// Helper function to build the hash keys for the log queries\nfunction buildHashKey(first_addr, second_addr) {\n\treturn ethers.utils.solidityKeccak256(['bytes', 'bytes'], [first_addr, second_addr]);\n}\n\n/** ################# Functions for retrieving executed orders ################# **/\n\n// Function to unsubscribe from subscription from subscribeToNewOrders(). Should run for cleanup.\nexport async function unSubscribeToMyNewOrders(account, currencies, contracts) {\n    var { Market } = contracts;\n    \n    var curr_0_addr = contracts[currencies[0]].address;\n    var curr_1_addr = contracts[currencies[1]].address;\n    \n    const hashKey01 = buildHashKey(curr_0_addr, curr_1_addr);\n    const hashKey10 = buildHashKey(curr_1_addr, curr_0_addr);\n    \n    var filter01_maker = Market.filters.LogTake(null, hashKey01, account, null, null, null);\n    var filter01_taker = Market.filters.LogTake(null, hashKey01, null, null, null, account);\n    var filter10_maker = Market.filters.LogTake(null, hashKey10, account, null, null, null);\n    var filter10_taker = Market.filters.LogTake(null, hashKey10, null, null, null, account);\n    Market.removeAllListeners(filter01_maker).removeAllListeners(filter01_taker).removeAllListeners(filter10_maker).removeAllListeners(filter10_taker);\n}\n\n// Function to unsubscribe from subscription from subscribeToNewOrders(). Should run for cleanup.\nexport async function unSubscribeToNewOrders(currencies, contracts) {\n    var { Market } = contracts;\n    \n    var curr_0_addr = contracts[currencies[0]].address;\n    var curr_1_addr = contracts[currencies[1]].address;\n    \n    const hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n    const hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n    \n    var filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n    var filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n    Market.removeAllListeners(filter1).removeAllListeners(filter2);\n}\n\nexport async function subscribeToMyNewOrders(account, currencies, contracts, addOrders) {\n\tvar { Market } = contracts;\n\n\tvar curr_0_addr = contracts[currencies[0]].address;\n\tvar curr_1_addr = contracts[currencies[1]].address;\n\n\tconst hashKey01 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst hashKey10 = buildHashKey(curr_1_addr, curr_0_addr);\n\n\tvar filter01_maker = Market.filters.LogTake(null, hashKey01, account, null, null, null);\n\tvar filter01_taker = Market.filters.LogTake(null, hashKey01, null, null, null, account);\n\tvar filter10_maker = Market.filters.LogTake(null, hashKey10, account, null, null, null);\n\tvar filter10_taker = Market.filters.LogTake(null, hashKey10, null, null, null, account);\n\tMarket.on(filter01_maker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter01_taker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter10_maker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter10_taker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n}\n\n// Function to subscribe to receive callbacks for new orders that were executed on the given currency pair\n// addOrders is a callback function that is given an order object (outuput from eventsToOrders)\nexport async function subscribeToNewOrders(currencies, contracts, addOrders) {\n\tvar { Market } = contracts;\n\n\tvar curr_0_addr = contracts[currencies[0]].address;\n\tvar curr_1_addr = contracts[currencies[1]].address;\n\n\tconst hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n\n\tvar filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n\tvar filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n\tMarket.on(filter1, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter2, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n}","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './accountstats.css';\n\n// Import src code\nimport { getPrice } from '../../utils/orders';\nimport { numberWithCommas } from '../../utils/general';\n\n// Component that calculates and displays the account statistics for a currency market\nclass AccountStats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: {\n          \"amount_0_bought\": '...',\n          \"avg_buy_price\": '...',\n          \"amount_0_sold\": '...',\n          \"avg_sell_price\": '...',\n          \"profit\": '...'\n        }\n    };\n  }\n\n  componentDidMount() {\n    const data = this.eventsToData(this.props.orders);\n    this.setState({ data });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if more orders are added or if the sorting has changed\n    if(this.props.orders.length !== nextProps.orders.length || this.state.data !== nextState.data) {\n      if(this.props.orders.length !== nextProps.orders.length) {\n        const data = this.eventsToData(nextProps.orders);\n        this.setState({ data });\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to turn raw events into processed data for the leaderboard\n  eventsToData(events) {\n    let profiles = {};\n    for(let i = 0; i < events.length; i++) {\n      const order = events[i];\n\n      // Assemble all necessary vars\n      const maker = order[\"maker\"];\n      const taker = order[\"taker\"];\n      let buyer = null;\n      let seller = null;\n\n      // Add maker and taker into the dict if they are not present\n      if(!(maker in profiles)) {\n        profiles[maker] = this.newUserProfile(maker);\n      }\n      if(!(taker in profiles)) {\n        profiles[taker] = this.newUserProfile(taker);\n      }\n\n      // Set who the buyer and who the seller is\n      if(order[\"type\"] === \"BUY\") {\n        buyer = taker;\n        seller = maker;\n      } else {\n        buyer = maker;\n        seller = taker;\n      }\n\n      // Add to buyer and seller data dict\n      let profile_data = profiles[buyer];\n      profile_data[\"amount_1_given\"] = profile_data[\"amount_1_given\"].add(order[\"curr_1\"]);\n      profile_data[\"amount_0_received\"] = profile_data[\"amount_0_received\"].add(order[\"curr_0\"]);\n      profiles[buyer] = profile_data;\n\n      profile_data = profiles[seller];\n      profile_data[\"amount_0_given\"] = profile_data[\"amount_0_given\"].add(order[\"curr_0\"]);\n      profile_data[\"amount_1_received\"] = profile_data[\"amount_1_received\"].add(order[\"curr_1\"]);\n      profiles[seller] = profile_data;\n    }\n\n    let data = {};\n    for (const key in profiles) {\n      const avg_buy_order = getPrice(profiles[key][\"amount_1_given\"], profiles[key][\"amount_0_received\"], \"BUY\");\n      const avg_buy_price = avg_buy_order ? Math.round(avg_buy_order[0].toString() * 10) / 10 : \"N/A\";\n      const avg_sell_order = getPrice(profiles[key][\"amount_0_given\"], profiles[key][\"amount_1_received\"], \"SELL\");\n      const avg_sell_price = avg_sell_order ? Math.round(avg_sell_order[0].toString() * 10) / 10 : \"N/A\";\n      const profit = this.getProfit(avg_buy_order, avg_sell_order);\n      const data_point = {\n        \"amount_0_bought\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_received\"].toString(), 'ether') * 10) / 10,\n        \"avg_buy_price\": avg_buy_price,\n        \"amount_0_sold\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_given\"].toString(), 'ether') * 10) / 10,\n        \"avg_sell_price\": avg_sell_price,\n        \"profit\": profit\n      };\n      data[key] = data_point;\n    }\n\n    if (this.props.account in data) {\n      data = data[this.props.account];\n    } else {\n      data = {\n          \"amount_0_bought\": '...',\n          \"avg_buy_price\": '...',\n          \"amount_0_sold\": '...',\n          \"avg_sell_price\": '...',\n          \"profit\": '...'\n        };\n    }\n\n    return data;\n  }\n\n  /** ################# HANDLERS ################# **/\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function that creates an empty user profile object\n  newUserProfile(address) {\n    return {\n          \"address\": address,\n          \"amount_0_given\": ethers.utils.bigNumberify(\"0\"), // Amount weth sold\n          \"amount_1_received\": ethers.utils.bigNumberify(\"0\"), // Amount dai received for sells\n          \"amount_1_given\": ethers.utils.bigNumberify(\"0\"), // Amount dai given for buys\n          \"amount_0_received\": ethers.utils.bigNumberify(\"0\"), // Amount weth bought\n        };\n  }\n\n  // Helper function to calculate profit given average buy and sell orders\n  getProfit(avg_buy_order, avg_sell_order) {\n    if(!avg_buy_order || !avg_sell_order) {\n      return 0;\n    } else {\n      var amount_sell = avg_sell_order[1];\n      var amount_buy = avg_buy_order[1];\n      var sell_price = avg_sell_order[0];\n      var buy_price = avg_buy_order[0];\n      var min_amount = amount_buy.lt(amount_sell) ? ethers.utils.formatUnits(amount_buy.toString(), 'ether') : ethers.utils.formatUnits(amount_sell.toString(), 'ether');\n      var profit = Math.round(min_amount * (sell_price - buy_price) * 100) / 100;\n      return profit;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies } = this.props;\n    const { loading, data } = this.state;\n\n    // Background Item is in case data is loading or empty\n    let background_item = null;\n\n    if(loading) {\n      background_item = (<div id=\"AccountStats-empty\">Loading...</div>);\n    } else if(data.length === 0) {\n      background_item = (<div id=\"AccountStats-empty\">NO DATA</div>);\n    }\n    let profit_suffix = data['profit'] === '...' ? '' : <span className=\"sub_value\">{currencies[1]}</span>;\n    let bought_suffix = data['amount_0_bought'] === '...' ? '' : <span className=\"sub_value\">{currencies[0]}</span>;\n    let sold_suffix = data['amount_0_sold'] === '...' ? '' : <span className=\"sub_value\">{currencies[0]}</span>;\n    let profit_prefix = \"Profit:\";\n\n    let profit = data['profit'];\n    if (profit !== '...') {\n      if (profit > 0) {\n        profit = <span className=\"green\">{numberWithCommas(profit)} {profit_suffix}</span>;\n      } else {\n        profit_prefix = \"Loss:\";\n        profit = <span className=\"red\">{numberWithCommas(profit)} {profit_suffix}</span>;\n      }\n    }\n    return (\n      <div className=\"AccountStats\">\n        <div id=\"AccountStats-grid\">\n          <Grid>\n            <Grid.Row>\n              <Grid.Column mobile={16} tablet={4} computer={4} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">{profit_prefix}</span> {profit}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\"># Bought:</span> {numberWithCommas(data['amount_0_bought'])} {bought_suffix}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">Avg. Buy:</span> {numberWithCommas(data['avg_buy_price'])}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\"># Sold:</span> {numberWithCommas(data['amount_0_sold'])} {sold_suffix}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">Avg. Sell:</span> {numberWithCommas(data['avg_sell_price'])}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default AccountStats","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, Icon } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './markethistory.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MarketHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n  }\n\n  // Only rerender if the number of orders increases\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retrive the maximum number in the order history for the color bands\n  getMax(orders) {\n    return Math.max.apply(Math, orders.slice(0, 250).map(function(o) { return o.curr_1 }));\n  }\n\n  // Function to render each row in the virtualized table\n  rowRenderer({index, key, style}) {\n    var item = this.props.orders[index];\n    \n    // Calculate the ratio of the order size vs the max order to get the color band size\n    var type = item[\"type\"];\n    var ratio = item[\"curr_1\"]/this.max_order * 100;\n    var direction = \"right\";\n    var color_0 = \"rgba(255, 0, 0, 0.2)\";\n    var color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color of the color band using the order type\n    var color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    var custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    var participants = (<div className=\"MarketHistory-participants\">\n                          <div className=\"MarketHistory-taker\"><HumanName icon_only address={item[\"taker\"]} /></div>\n                          <div className=\"MarketHistory-arrow\"><Icon size=\"large\" name=\"long arrow alternate right\" /></div>\n                          <div className=\"MarketHistory-maker\"><HumanName icon_only address={item[\"maker\"]} /></div>\n                        </div>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            {participants}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n\n  render() {\n    var { currencies, orders } = this.props;\n\n    // Update max order class variable (class var to not cause a rerender)\n    this.max_order = this.getMax(orders);\n    var background_item = null;\n\n    // Set the screen to loading if the orders are not available yet\n    if(orders.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default MarketHistory","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './leaderboard.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { getPrice } from '../../utils/orders';\nimport { numberWithCommas } from '../../utils/general';\n\n// Component that calculates and displays rankings for traders on the leaderboard\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: [],\n      direction: 'ascending',\n      column: 'profit'\n    };\n  }\n\n  componentDidMount() {\n    // Convert raw orders into the proper format and store max profit someone has made over the data range\n    const new_data = this.eventsToData(this.props.orders);\n    let max_profit = 1;\n    if(new_data.length > 0) {\n      max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n    }\n    this.setState({ max_profit, data: new_data });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if more orders are added or if the sorting has changed\n    if(this.props.orders.length !== nextProps.orders.length || this.state.data !== nextState.data || this.state.direction !== nextState.direction || this.state.column !== nextState.column) {\n      if(this.props.orders.length !== nextProps.orders.length) {\n        const new_data = this.eventsToData(nextProps.orders);\n        // Need to update the max profit to calibrate the coloring bands\n        let max_profit = 1;\n        if(new_data.length > 0) {\n          max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n        }\n        this.setState({ max_profit, data: new_data});\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to turn raw events into processed data for the leaderboard\n  eventsToData(events) {\n    let profiles = {};\n    for(let i = 0; i < events.length; i++) {\n      const order = events[i];\n\n      // Assemble all necessary vars\n      const maker = order[\"maker\"];\n      const taker = order[\"taker\"];\n      let buyer = null;\n      let seller = null;\n\n      // Add maker and taker into the dict if they are not present\n      if(!(maker in profiles)) {\n        profiles[maker] = this.newUserProfile(maker);\n      }\n      if(!(taker in profiles)) {\n        profiles[taker] = this.newUserProfile(taker);\n      }\n\n      // Set who the buyer and who the seller is\n      if(order[\"type\"] === \"BUY\") {\n        buyer = taker;\n        seller = maker;\n      } else {\n        buyer = maker;\n        seller = taker;\n      }\n\n      // Add to buyer and seller data dict\n      let profile_data = profiles[buyer];\n      profile_data[\"amount_1_given\"] = profile_data[\"amount_1_given\"].add(order[\"curr_1\"]);\n      profile_data[\"amount_0_received\"] = profile_data[\"amount_0_received\"].add(order[\"curr_0\"]);\n      profiles[buyer] = profile_data;\n\n      profile_data = profiles[seller];\n      profile_data[\"amount_0_given\"] = profile_data[\"amount_0_given\"].add(order[\"curr_0\"]);\n      profile_data[\"amount_1_received\"] = profile_data[\"amount_1_received\"].add(order[\"curr_1\"]);\n      profiles[seller] = profile_data;\n    }\n\n    let data = [];\n    for (const key in profiles) {\n      const avg_buy_order = getPrice(profiles[key][\"amount_1_given\"], profiles[key][\"amount_0_received\"], \"BUY\");\n      const avg_buy_price = avg_buy_order ? Math.round(avg_buy_order[0].toString() * 10) / 10 : \"N/A\";\n      const avg_sell_order = getPrice(profiles[key][\"amount_0_given\"], profiles[key][\"amount_1_received\"], \"SELL\");\n      const avg_sell_price = avg_sell_order ? Math.round(avg_sell_order[0].toString() * 10) / 10 : \"N/A\";\n      const profit = this.getProfit(avg_buy_order, avg_sell_order);\n      const data_point = {\n        \"user\": key,\n        \"amount_0_bought\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_received\"].toString(), 'ether') * 10) / 10,\n        \"avg_buy_price\": avg_buy_price,\n        \"amount_0_sold\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_given\"].toString(), 'ether') * 10) / 10,\n        \"avg_sell_price\": avg_sell_price,\n        \"profit\": profit\n      };\n      data.push(data_point);\n    }\n\n    data.sort(function(first, second) {\n      return second.profit - first.profit;\n    })\n\n    return data;\n  }\n\n\n  // Function that returns a row to be rendered in the virtualized table\n  rowRenderer({index, key, style}) {\n    const { max_profit } = this.state;\n    const { currencies, account } = this.props;\n    const item = this.state.data[index];\n\n    const ratio = Math.abs(item[\"profit\"])/max_profit * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(item[\"profit\"] > 0) {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    if(account === item[\"user\"]) {\n      color =  `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    let profit_color = 'grey';\n    if(item[\"profit\"] > 0) {\n      profit_color = 'green';\n    } else if(item[\"profit\"] < 0) {\n      profit_color = 'red';\n    }\n\n    return (\n      <div className=\"Leaderboard-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            <HumanName address={item[\"user\"]} />\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_bought\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_buy_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_sold\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_sell_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6}>\n            <span className={profit_color}>{numberWithCommas(item[\"profit\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[1]}</span></span>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# HANDLERS ################# **/\n\n  // Function used to handle changes in sorting by the user for the table\n  handleSort(clicked_column) {\n    const { column, data, direction } = this.state;\n\n    if(column !== clicked_column) {\n      var new_data = data.concat().sort(function(first, second) {\n                      if(first[clicked_column] === \"N/A\") {\n                        return 1;\n                      } else if(second[clicked_column] === \"N/A\") {\n                        return -1;\n                      } else {\n                        return second[clicked_column] - first[clicked_column];\n                      }\n                    })\n      this.setState({\n        column: clicked_column,\n        data: new_data,\n        direction: 'ascending'\n      });\n    } else {\n      this.setState({ \n        data: data.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function that creates an empty user profile object\n  newUserProfile(address) {\n    return {\n          \"address\": address,\n          \"amount_0_given\": ethers.utils.bigNumberify(\"0\"), // Amount weth sold\n          \"amount_1_received\": ethers.utils.bigNumberify(\"0\"), // Amount dai received for sells\n          \"amount_1_given\": ethers.utils.bigNumberify(\"0\"), // Amount dai given for buys\n          \"amount_0_received\": ethers.utils.bigNumberify(\"0\"), // Amount weth bought\n        };\n  }\n\n  // Helper function to calculate profit given average buy and sell orders\n  getProfit(avg_buy_order, avg_sell_order) {\n    if(!avg_buy_order || !avg_sell_order) {\n      return 0;\n    } else {\n      var amount_sell = avg_sell_order[1];\n      var amount_buy = avg_buy_order[1];\n      var sell_price = avg_sell_order[0];\n      var buy_price = avg_buy_order[0];\n      var min_amount = amount_buy.lt(amount_sell) ? ethers.utils.formatUnits(amount_buy.toString(), 'ether') : ethers.utils.formatUnits(amount_sell.toString(), 'ether');\n      var profit = Math.round(min_amount * (sell_price - buy_price) * 100) / 100;\n      return profit;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading, data, column, direction } = this.state;\n\n    // Background Item is in case data is loading or empty\n    let background_item = null;\n\n    if(loading) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    } else if(data.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">NO DATA</div>);\n    }\n\n    // Grab sorting symbols\n    let symbol = \"▲\";\n    if(direction === 'descending') {\n      symbol = \"▼\";\n    }\n\n    // Build header list\n    const headers = {\n      \"name\": \"Name\",\n      \"amount_0_bought\": \"# Bought\",\n      \"avg_buy_price\": \"Avg. Buy\",\n      \"amount_0_sold\": \"# Sold\",\n      \"avg_sell_price\": \"Avg. Sell\",\n      \"profit\": \"Profit\"\n    };\n    headers[column] = headers[column] + symbol;\n\n    return (\n      <div className=\"Leaderboard\">\n        <Grid id=\"Leaderboard-table-header\">\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            {headers[\"name\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_bought')} only={'computer tablet'}>\n            {headers[\"amount_0_bought\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_buy_price')} only={'computer tablet'}>\n            {headers[\"avg_buy_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_sold')} only={'computer tablet'}>\n            {headers[\"amount_0_sold\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_sell_price')} only={'computer tablet'}>\n            {headers[\"avg_sell_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6} onClick={() => this.handleSort('profit')}>\n            {headers[\"profit\"]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={data.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"Leaderboard-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default Leaderboard","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './myhistory.css';\n\n// Import src Code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n\n    this.my_orders = [];\n    this.max_order = 1;\n  }\n\n  componentDidMount() {\n    // If the orders prop is longer than 0 then set loading to false\n    if(this.props.orders.length > 0) {\n      this.setState({ loading: false });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the new state isn't loading or if the props orders has changed\n    if(this.state.loading && !nextState.loading) {\n      return true;\n    } else if(this.props.orders.length !== nextProps.orders.length) {\n      this.setState({ loading: false });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Gets the max value from the order history\n  getMax() {\n    return Math.max.apply(Math, this.my_orders.map(function(o) { return o.curr_1 }));\n  }\n\n  // Extract orders that match the current account address and return the filtered list\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n\n    for(let i = 0; i < orders.length; i++) {\n      let order = orders[i];\n      if(order[\"maker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"taker\"];\n        new_order[\"type\"] = new_order[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n        myOrders.push(new_order);\n      } else if(order[\"taker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"maker\"];\n        myOrders.push(new_order);\n      }\n    }\n    return myOrders;\n  }\n\n  // Build the HTML for each row to be rendered in the virtualized table\n  // Includes getting the color bar for each row\n  rowRenderer({index, key, style}) {\n    const item = this.my_orders[index];\n    \n    // Getting the information for the coloring ratio by dividng by the max order\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1\"]/this.max_order * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Getting the color for the color band\n    const color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    // Construct the HTML row\n    const price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            <HumanName address={item[\"participant\"]} icon_only />\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading } = this.state;\n    const { currencies } = this.props;\n\n    let background_item = null;\n    this.my_orders = this.getMyOrders();\n\n    if(loading) {\n      background_item = (<div id=\"MarketHistory-empty\">Loading...</div>);\n    } else if(this.my_orders.length === 0) {\n      background_item = (<div id=\"MarketHistory-empty\">NO ORDERS</div>);\n    } else {\n      this.max_order = this.getMax();\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={this.my_orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyHistory","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Sidebar, Segment, Icon, Input, Form, Button, Loader } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './sidebar.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass SideBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      visible: false,\n      amount: '0',\n      ui_amount: '',\n      currency_0_balance: \"0\",\n      currency_1_balance: \"0\",\n      id: null,\n      info: null,\n      owner: null,\n      bignumbers: {},\n      button_loading: false,\n      button_success: false,\n      button_error: false\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n    this.stopLoading = this.stopLoading.bind(this);\n    this.flashError = this.flashError.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n  }\n\n  // Get the balances for each of the currencies since we will need that throughout the component\n  componentDidMount() {\n    this.generateBigNumbers();\n    this.updateInfo();\n  }\n\n  // Update the information in the sidebar and recursively call itself every 3 seconds\n  async updateInfo() {\n    const { account, currencies, options } = this.props;\n    if(this.state.visible && this.state.id) {\n      const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n      const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n      const info = await options.contracts.Market.getOffer(this.state.id);\n      const owner = await options.contracts.Market.getOwner(this.state.id);\n      this.setState({ currency_0_balance, currency_1_balance, info, owner });\n    }\n    setTimeout(this.updateInfo, 3000);\n  }\n\n  // Generate BigNumber represenatation of integers for easy arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Helper function to set loading to false\n  stopLoading() {\n    this.setState({ loading: false });\n  }\n\n  // Need to update visible and the side_bar info key if a new order is passed in\n  async componentWillReceiveProps(nextProps) {\n    // Update if the new props for visibility are changed\n    if(nextProps.visible !== this.props.visible) {\n      this.setState({ visible: nextProps.visible });\n      if(nextProps.visible === false) {\n        this.setState({ info: null, owner: null, amount: '0', ui_amount: '', button_success: false, button_error: false, button_loading: false });\n      }\n    }\n    // Update if the information for the sidebar has changed\n    if(nextProps.sidebar_info !== this.props.sidebar_info) {\n      this.setState({ loading: true });\n      const info = await this.props.options.contracts.Market.getOffer(nextProps.sidebar_info[\"id\"]);\n      const owner = await this.props.options.contracts.Market.getOwner(nextProps.sidebar_info[\"id\"]);\n      this.setState({ id: nextProps.sidebar_info[\"id\"], info, owner, amount: '0', ui_amount: '' });\n      // Add artificial delay to show the new results are really updated\n      setTimeout(this.stopLoading, 50);\n    }\n  }\n\n  // Helper function to flash success on tx success\n  flashSuccess() {\n    const { toggleSidebar } = this.props;\n    this.setState({ button_success : true, button_loading: false });\n    setTimeout(toggleSidebar, 1500);\n  }\n\n  // Helper function to flash error on tx failure\n  flashError() {\n    this.setState({ button_error: true, button_loading: false });\n    setTimeout(() => this.setState({ button_error: false }), 1500);\n  }\n\n  // Most important function in the entire file since it actually interfaces\n  // and edits the blockchain.\n  async executeTrade(will_receive) {\n    const { sidebar_info } = this.props;\n\n    const id = sidebar_info[\"id\"];\n\n    // Log the inputs for the transaction so that you can always be 100% positive what is being sent\n    const inputs = {\n      \"id\": id,\n      \"will_receive\": will_receive.toString(),\n      \"will_receive_wholenums\": ethers.utils.formatUnits(will_receive.toString(), 'ether')\n    };\n    console.log(inputs);\n\n    try {\n      const tx = await this.props.options.contracts.Market.buy(id, will_receive.toString(), { gasLimit: 500000 });\n      this.setState({ button_loading: true });\n      await tx.wait();\n      this.flashSuccess();\n    } catch(error) {\n      this.flashError();\n    }\n  }\n\n  // Handler for when user changes the amount to be bought\n  handleUserChange(value) {\n    let internal_value = 0;\n    try{\n      // Check to see if the value is not just white space\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether').toString();\n      }\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n    this.setState({ ui_amount: value, amount: internal_value });\n  }\n\n  // Handler for when user uses percentage tool to update amount\n  handleAmountPercentageChange(value) {\n    const ui_value = ethers.utils.formatUnits(value.toString(), 'ether');\n    this.setState({ amount: value.toString(), ui_amount: ui_value });\n  }\n\n  // So we were passed in the most up to date info the older component had.\n  // However this can and will change if it was stale or other people are taking the order.\n  // This keeps the info up to date and fallsback onto the old data if an error happens.\n  getUpdatedInfo() {\n    const { info } = this.state;\n    const { sidebar_info } = this.props;\n\n    let info_obj = {};\n    // If info is empty then return null\n    if(!info) {\n      return null;\n    }\n\n    const buy_amt = info[0];\n    const pay_amt = info[2];\n\n    // Build information object depending on the types\n    if(sidebar_info[\"type\"] === \"BUY\") {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": pay_amt.toString(),\n        \"curr_1_amt\": buy_amt.toString()\n      };\n    } else {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": buy_amt.toString(),\n        \"curr_1_amt\": pay_amt.toString()\n      };\n    }\n\n    return info_obj;\n  }\n\n  // Calculate how much currency the user will receive\n  calcWillReceive() {\n    const { amount } = this.state;\n\n    // Don't forget that these are flipped from the actual smart contract docs since\n    // WE are the counterparties so buy_amt/pay_amt is flipped from expected\n    const buy_amt = ethers.utils.bigNumberify(this.state.info[0]);\n    const pay_amt = ethers.utils.bigNumberify(this.state.info[2]);\n\n    let amount_bn = ethers.utils.bigNumberify(amount);\n    try {\n      let will_receive = amount_bn.mul(buy_amt).div(pay_amt);\n      return will_receive;\n    } catch(err) {\n      return ethers.utils.bigNumberify(\"0\");\n    }\n  }\n\n  // Get the max amount possible to take from this order given the balances and offer\n  getMaxTake() {\n    const { sidebar_info } = this.props;\n    const { info, currency_0_balance, currency_1_balance } = this.state;\n\n    const pay_amt = ethers.utils.bigNumberify(info[2]);\n    const balance = sidebar_info[\"type\"] === \"BUY\" ? ethers.utils.bigNumberify(currency_0_balance) : ethers.utils.bigNumberify(currency_1_balance);\n    if(balance.lt(pay_amt)) {\n      return balance;\n    } else {\n      return pay_amt;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, amount, ui_amount, currency_0_balance, currency_1_balance, bignumbers, loading, button_loading, button_error, button_success, owner } = this.state;\n    const { currencies, toggleSidebar, sidebar_info, options } = this.props;\n\n    // Invert the type since the action do as a taker is the inverse of the action of the maker\n    const action = sidebar_info[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n    const subtitle = action === \"BUY\" ? (<span className=\"green\">{action}</span>) : (<span className=\"red\">SELL</span>);\n\n    // So we were passed in the most up to date info the older component had.\n    // However this can and will change if it was stale or other people are taking the order.\n    // This keeps the info up to date and fallsback onto the old data if an error happens.\n    const updated_info = this.getUpdatedInfo();\n    if(!updated_info || loading) {\n      return (\n        <div className=\"Side_bar\">\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n            <div id=\"Side_bar-x-container\">\n              <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n            </div>\n            <div id=\"Side_bar-title\">Take Order</div>\n            <Loader active>Loading</Loader>\n          </Sidebar>\n        </div>\n      );\n    }\n\n    // Build object that swaps values for buys and sells so that rendering is simple\n    let giving = {\n      \"currency\": null,\n      \"receive_currency\": null,\n      \"balance\": 0,\n      \"offered\": 0,\n      \"max_take\": this.getMaxTake(),\n      \"will_receive\": this.calcWillReceive(),\n      \"maker\": owner ? <HumanName address={owner} /> : \"Loading...\",\n    };\n    giving[\"ui_will_receive\"] = Math.round(ethers.utils.formatUnits(giving[\"will_receive\"].toString(), 'ether') * 1000) / 1000;\n\n    if(action === \"BUY\") {\n      giving[\"currency\"] = currencies[1];\n      giving[\"receive_currency\"] = currencies[0];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_1_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_1_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_1_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_1_amt\"], 'ether') * 1000) / 1000;\n    } else {\n      giving[\"currency\"] = currencies[0];\n      giving[\"receive_currency\"] = currencies[1];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_0_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_0_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_0_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_0_amt\"], 'ether') * 1000) / 1000;\n    }\n\n    // Adjust the text on the button if an action or error just occurred\n    var button_text = action + \" \" + currencies[0];\n    button_text = button_success ? \"SUCCESS\" : button_text;\n    button_text = button_error ? \"FAILED\" : button_text;\n\n    return (\n      <div className=\"Side_bar\">\n        <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n          <div id=\"Side_bar-x-container\">\n            <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n          </div>\n          <div id=\"Side_bar-title\">Take Order</div>\n          <div id=\"Side_bar-subtitle\">How much would you like to {subtitle}?</div>\n          \n          <div id=\"Side_bar-info\">\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Maker:</div>\n              <div className=\"Side_bar-info-content\">{giving[\"maker\"]}</div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Price:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(updated_info[\"price\"])} <span id=\"Side_bar-exchange\">{currencies[1]} / {currencies[0]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Balance {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_balance\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Offered {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_offered\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n          </div>\n\n          <Form size='tiny' id=\"Side_bar-form\">\n            <Form.Field>\n              <div>\n                <div className=\"Side_bar-info-title\">Spend {giving[\"currency\"]}:</div>\n                <Input\n                  label={{ basic: true, content: giving[\"currency\"] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amount}\n                  onChange={(e) => { this.handleUserChange(e.target.value) }}\n                  disabled={options.readOnly}\n                />\n              </div>\n            </Form.Field>\n            <Button.Group id=\"Side_bar-mini-buttons\" size='mini' basic>\n              <Button disabled={options.readOnly} onClick={ () => this.handleUserChange(\"\") } >0%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[4])) } >25%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[2])) } >50%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"]) } >100%</Button>\n            </Button.Group>\n          </Form>\n          <div className=\"Side_bar-info-item\">\n            <div className=\"Side_bar-info-title\">Will Receive</div>\n            <div className=\"Side_bar-info-content\">{giving[\"ui_will_receive\"].toString() + \" \" + giving[\"receive_currency\"]}</div>\n          </div>\n          <Button className=\"BuySell-button\" loading={button_loading} color={action === \"BUY\" ? \"green\" : \"red\"} disabled={options.readOnly || button_text !== action + \" \" + currencies[0] || giving[\"will_receive\"].lte(ethers.utils.bigNumberify(\"1000\")) || ethers.utils.bigNumberify(amount).gt(giving[\"max_take\"])} onClick={() => this.executeTrade(giving[\"will_receive\"]) }>{button_text}</Button>\n        </Sidebar>\n      </div>\n    );\n  }\n}\n\nexport default SideBar\n","import { ethers } from 'ethers';\n\n// Helper function to process raw events into order objects\nfunction processOpenOrders(rawOrders, type) {\n\tvar n = rawOrders[\"ids\"].length\n\tvar orders = []\n\tfor(var i = 0; i < n; i++) {\n\t\tif(rawOrders[\"ids\"][i].toString() !== \"0\") { // && rawOrders[\"owners\"][i] === account\n\t\t\tvar id = rawOrders[\"ids\"][i].toString()\n\t\t\tvar maker = rawOrders[\"owners\"][i]\n\t\t\tvar pay_amount = ethers.utils.formatUnits(rawOrders[\"payAmts\"][i].toString(), 'ether')\n\t\t\tvar buy_amount = ethers.utils.formatUnits(rawOrders[\"buyAmts\"][i].toString(), 'ether') \n\t\t\tvar price = 0\n\t\t\tvar order = {}\n\t\t\tif(type === \"BUY\") {\n\t\t\t\tprice = Math.round(pay_amount / buy_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": buy_amount,\n\t\t\t\t\t\"curr_1_amt\": pay_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprice = Math.round(buy_amount / pay_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": pay_amount,\n\t\t\t\t\t\"curr_1_amt\": buy_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t}\n\t\t\torders.push(order)\n\t\t}\n\t}\n\treturn orders\n}\n\n// Function that gets a list of open orders for a pair of currencies and a type (BUY or SELL)\nexport async function getOpenOrders(type, currencies, contracts) {\n\tconst { Market } = contracts;\n\n\tif(currencies.length === 2) {\n\t\tconst token_addr_0 = contracts[currencies[0]].address;\n\t\tconst token_addr_1 = contracts[currencies[1]].address;\n\n\t\tlet pay_token = null;\n\t\tlet buy_token = null;\n\n\t\tif(type === \"BUY\") {\n\t\t\tpay_token = token_addr_1;\n\t\t\tbuy_token = token_addr_0;\n\t\t} else {\n\t\t\tpay_token = token_addr_0;\n\t\t\tbuy_token = token_addr_1;\n\t\t}\n\n\t\tconst rawOrders = await contracts.SupportMethods.getOffers(Market.address, pay_token, buy_token);\n\t\tlet orders = [];\n\t\tif(rawOrders) {\n\t\t\torders = processOpenOrders(rawOrders, type);\n\t\t}\n\t\treturn orders;\n\t}\n\n\treturn [];\n}","// Import Major dependencies\nimport React, { Component } from 'react';\nimport { Grid, Tab, Responsive } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './market.css';\n\n// Import src code\nimport OrderListV2 from './orderlistV2/orderlistV2';\nimport LimitOrder from './limitorder/limitorder';\nimport MarketOrder from './marketorder/marketorder';\nimport MyOrders from './myorders/myorders';\nimport Stats from './stats/stats';\nimport AccountStats from './accountstats/accountstats';\nimport MarketHistory from './markethistory/markethistory';\nimport Leaderboard from './leaderboard/leaderboard';\nimport MyHistory from './myhistory/myhistory';\nimport SideBar from './sidebar/sidebar';\n\n// Import orderbook read functions\nimport { subscribeToNewOrders, subscribeToMyNewOrders, unSubscribeToNewOrders, unSubscribeToMyNewOrders } from '../utils/orders';\nimport { getOpenOrders } from '../utils/openorders';\n\n// eslint-disable-next-line\nimport myWorker from '../../workers/orders.worker';\n\nclass Market extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      account: \"\",\n      sidebar_info: {\n        \"price\": 0,\n        \"curr_0_amt\": 0,\n        \"curr_1_amt\": 0,\n        \"id\": \"\",\n        \"type\": \"\"\n      },\n      past_orders: [],\n      my_past_orders: [],\n      open_buy_orders: [],\n      open_sell_orders: [],\n      balances: ['0', '0'],\n      timers: [null, null],\n      num_order_calls: 0,\n      logged_latest_block: 0,\n      done_loading: false\n    };\n\n    this.updateBalances = this.updateBalances.bind(this);\n    this.updateOpenOrders = this.updateOpenOrders.bind(this);\n    this.pastOrderWorker = new myWorker();\n  }\n\n  async componentDidMount() {\n    // Retrieve starting data and subscribe to future live feeds\n    const { currencies, options } = this.props;\n    // Store account in state for convenience\n    let account = await options.signer.getAddress();\n\n    this.setState({ logged_latest_block: await options.provider.getBlockNumber() }, () => {\n      // Get past orders for 5 years (5 * 5760) in a webworker thread\n      this.pastOrderWorker.addEventListener('message', (event) => {\n        let type = event.data.type;\n        let payload = event.data.payload;\n\n        if (type === \"pastOrders\") {\n          this.processNewBatchPastOrders(payload);\n        } else if(type === \"myPastOrders\") {\n          this.processNewBatchMyPastOrders(payload);\n        }\n      });\n      \n      this.pastOrderWorker.postMessage({\n        type: \"pastOrders\",\n        currencies: currencies,\n        toBlock: this.state.logged_latest_block,\n        numBlocks: 720 // 5760 / 4\n      });\n\n      this.pastOrderWorker.postMessage({\n        type: \"myPastOrders\",\n        account: account,\n        currencies: currencies,\n        toBlock: this.state.logged_latest_block,\n        numBlocks: 5760*100\n      });\n    });\n    \n    this.setState({ account });\n    \n    // Start polls for open orders and balances\n    this.updateOpenOrders();\n    this.updateBalances();\n  }\n\n  // Cleaning up timers and unsubscribing from live feeds\n  componentWillUnmount() {\n    for(let i = 0; i < this.state.timers.length; i++) {\n      if(this.state.timers[i] !== null) {\n        clearTimeout(this.state.timers[i]);\n      }\n    }\n\n    const { options, currencies } = this.props;\n    unSubscribeToNewOrders(currencies, options.contracts);\n    unSubscribeToMyNewOrders(this.state.account, currencies, options.contracts);\n  }\n\n  async processNewBatchMyPastOrders(my_past_orders) {\n    const { currencies, options } = this.props;\n    this.setState({ my_past_orders });\n    subscribeToMyNewOrders(this.state.account, currencies, options.contracts, this.addMyOrders);\n  }\n\n  async processNewBatchPastOrders(past_orders) {\n    const { currencies, options } = this.props;\n    if (this.state.num_order_calls === 0) {\n      subscribeToNewOrders(currencies, options.contracts, this.addOrders);\n    } else {\n\n      past_orders = this.state.past_orders.concat(past_orders);\n    }\n    this.setState({ past_orders });\n\n    this.setState({ num_order_calls: this.state.num_order_calls + 1 }, () => {\n      if (this.state.num_order_calls < 40) {\n        let toBlock = this.state.logged_latest_block - 720*this.state.num_order_calls\n        this.pastOrderWorker.postMessage({\n          currencies: currencies,\n          toBlock: toBlock,\n          numBlocks: 720\n        });\n      } else {\n        this.setState({ done_loading: true })\n      }\n    });\n  }\n\n  /** ################# POLLING FUNCTIONS ################# **/\n\n  // Function to periodically update the balances in the state from the blockchain\n  async updateBalances() {\n    const { options, currencies } = this.props;\n    const { account } = this.state;\n\n    if(account !== \"\") {\n      console.log(\"Updating Balances...\")\n      const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n      const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n      const balances = [currency_0_balance, currency_1_balance];\n      this.setState({ balances });\n    }\n\n    // Set timer to recall same function after 3 seconds and store the timer in state\n    // for cleanup\n    const timer = setTimeout(this.updateBalances, 3000);\n    let timers = this.state.timers;\n    timers[0] = timer;\n    this.setState({ timers });\n  }\n\n  // Function to periodically update the list of open orders from the blockchain\n  async updateOpenOrders() {\n    console.log(\"Updating Open Orders...\");\n    const [open_buy_orders, open_sell_orders] = await Promise.all([\n                                                      getOpenOrders(\"BUY\", this.props.currencies, this.props.options.contracts), \n                                                      getOpenOrders(\"SELL\", this.props.currencies, this.props.options.contracts)]);\n\n    // Set timer to recall same function after 5 seconds and store the timer in state\n    // for cleanup\n    const timer = setTimeout(this.updateOpenOrders, 5000);\n    let timers =  this.state.timers;\n    timers[1] = timer;\n    this.setState({ timers, open_buy_orders, open_sell_orders });\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function used as a callback function for the subscription function\n  addOrders = (orders) => {\n    this.setState({ past_orders: orders.concat(this.state.past_orders) });\n  }\n\n  addMyOrders = (orders) => {\n    this.setState({ my_past_orders: orders.concat(this.state.my_past_orders) });\n  }\n\n  // Function to set the order information for the sidebar and sets it to visible\n  setSidebar = (info) => {\n    this.setState({ sidebar_info: info, visible: true });\n  }\n\n  // Function to toggle the visibility of the order sidebar\n  toggleSidebar = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  // Function to build the title of the Market page if valid currencies are selected\n  buildTitle() {\n    const { currencies } = this.props;\n    let title = \"Market: \";\n    title = currencies.length === 2 ? title + currencies[0] + \"/\" + currencies[1] : title;\n    return title;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, sidebar_info, account, past_orders, my_past_orders, balances, open_buy_orders, open_sell_orders, done_loading } = this.state;\n    const { currencies, options } = this.props;\n\n    // Build the title\n    const title = this.buildTitle();\n\n    // Concat buy and sell orders and sort to create an All Orders book\n    const all_open_orders = open_buy_orders.concat(open_sell_orders);\n    all_open_orders.sort(function(a, b) { return parseInt(a[3]) > parseInt(b[3]) ? 1 : -1 });\n\n    // Get the last order in the order book\n    const last_order = past_orders.length > 0 ? past_orders[0] : \"\";\n\n    // Create the panels for the Activity Pane Tabs\n    let activity_panes = [\n      { menuItem: 'Market History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketHistory currencies={currencies} options={options} orders={done_loading ? past_orders : []} /></Tab.Pane> },\n      { menuItem: '5-D Leaderboard', render: () => <Tab.Pane className=\"Market-tab-pane\"><Leaderboard currencies={currencies} account={account} options={options} orders={done_loading ? past_orders : []} /></Tab.Pane> },\n    ];\n\n    // If in readOnly mode then add more panes for account specific information\n    if(!options.readOnly) {\n      const logged_in_panes = [\n        { menuItem: 'Open Orders', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyOrders currencies={currencies} options={options} orders={all_open_orders} account={account} /></Tab.Pane> },\n        { menuItem: 'My History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyHistory currencies={currencies} options={options} orders={my_past_orders} account={account} /></Tab.Pane> },\n      ];\n      activity_panes = logged_in_panes.concat(activity_panes);\n    }\n\n    // Create the panels for the Order Pane Tabs\n    const buy_panes = [\n      { menuItem: 'Limit Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><LimitOrder currencies={currencies} options={options} last_price={last_order[\"price\"]} balances={balances} /></Tab.Pane> },\n      { menuItem: 'Market Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketOrder currencies={currencies} options={options} balances={balances} /></Tab.Pane> }\n    ];\n\n    return (\n      <div className=\"Market\">\n        <SideBar currencies={currencies} toggleSidebar={this.toggleSidebar} sidebar_info={sidebar_info} visible={visible} account={account} options={options} />\n        <div id=\"Market-title\"><span className=\"Market-h1\">{title}</span></div>\n        <div className=\"Market-headers\">5-Day Market Stats</div>\n        <div id=\"Market-stats\"><Stats currencies={currencies} options={options} orders={done_loading ? past_orders : [] } /></div>\n\n        <Grid divided id=\"Market-orderlists\">\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Center</div>\n            <div id=\"Market-buysell\">\n              <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={buy_panes} />\n            </div>\n          </Grid.Column>\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Book</div>\n            <OrderListV2 currencies={currencies} account={account} options={options} last_order={last_order} buy_orders={open_buy_orders} sell_orders={open_sell_orders} setSidebar={this.setSidebar} />\n          </Grid.Column>\n        </Grid>\n\n        <div className=\"Market-headers\">Activity Center</div>\n        <div id=\"Market-activity-pane\">\n          <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes} />\n          </Responsive>\n          <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes.slice(0,3)} />\n          </Responsive>\n        </div>\n\n        <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n          <div id=\"Market-leaderboard-pane\">\n            <div className=\"Market-headers\">Leaderboard</div>\n            <Leaderboard currencies={currencies} account={account} options={options} orders={done_loading ? past_orders : []} />\n          </div>\n        </Responsive>\n\n        <div id=\"Market-account-stats\">\n          <div className=\"Market-headers\">100-D Account Stats</div>\n          <AccountStats currencies={currencies} orders={my_past_orders} account={account} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Market","import React, { Component } from 'react';\nimport { Transition } from 'semantic-ui-react';\nimport './home.css';\n\nclass Home extends Component {\n  // Simple Home landing static page.\n  render() {\n    return (\n      <div id=\"Home\">\n        <Transition transitionOnMount={true} animation='fade up' duration={1500}>\n          <div id=\"Home-title\">\n            OasisX\n          </div>\n        </Transition>\n        <Transition transitionOnMount={true} animation='fade up' duration={3500}>\n          <div id=\"Home-subtitle\">\n            The fastest UI for Oasis.\n          </div>\n        </Transition>\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Input, Button } from 'semantic-ui-react'\nimport './login.css'\nimport HumanName from '../utils/humanname/humanname'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: \"\",\n      phrase: \"\",\n      password: \"\",\n      redirect: false,\n      saved_wallets: {},\n      loading: false\n    }\n\n    this.handleRedirect = this.handleRedirect.bind(this)\n  }\n\n  componentDidMount() {\n    var saved_wallets = this.getSavedAccounts()\n    this.setState({ saved_wallets })\n  }\n\n  handleFieldChange(name, value) {\n    this.setState({ [name]: value })\n  }\n\n  handleRedirect() {\n    this.setState({ redirect: true, loading: false })\n  }\n\n  getSavedAccounts() {\n    var localStorage = window.localStorage\n    if(localStorage.getItem(\"encrypted_wallets\")) {\n      var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n      return stored_wallets\n    }\n    return {}\n  }\n\n  async handleLogin() {\n    var { phrase, password, selected } = this.state\n    var { options } = this.props\n\n    this.setState({ loading: true })\n\n    if(selected === \"\" && phrase !== \"\") {\n      options.handleLogin(phrase, password)\n    } else if(selected !== \"\") {\n      await options.handleReLogin(selected, this.state.saved_wallets[selected], password)\n    } else {\n      console.log(\"ERROR: No account specified\")\n    }\n\n    this.setState({ phrase: \"\", password: \"\", selected: \"\" })\n    setTimeout(this.handleRedirect, 1000)\n  }\n\n  render() {\n    var { phrase, password, redirect, saved_wallets, selected, loading } = this.state\n    var { options } = this.props\n\n    if(redirect) {\n      return <Redirect to=\"/\" />\n    }\n\n    var wallet_list = Object.keys(saved_wallets).map((key) => {\n      var active = selected === key ? true : false\n      var classes = active ? 'Login-option Login-highlighted' : 'Login-option'\n      var field_change = active ? \"\" : key\n      field_change = loading ? this.state.selected : field_change\n      return <div key={key} className={classes} onClick={() => this.handleFieldChange(\"selected\", field_change) } ><HumanName address={key} inactive_link /></div>\n    })\n\n    return (\n      <div id=\"Login\">\n        <div className=\"LimitOrder-headers\">Login</div>\n        <div id=\"Login-wallets\">\n          {wallet_list}\n        </div>\n        <br />\n        <Input\n          label={{ content: \"Mneumonic Phrase\" }}\n          labelPosition='left'\n          placeholder='Enter Phrase...'\n          value={phrase}\n          onChange={(e) => { this.handleFieldChange(\"phrase\", e.target.value) }}\n          disabled={!options.readOnly || selected !== \"\" || loading}\n          className=\"Login-input\"\n          fluid\n        />\n        <Input\n          label={{ content: \"Password\" }}\n          labelPosition='left'\n          placeholder='Enter STRONG Password...'\n          value={password}\n          onChange={(e) => { this.handleFieldChange(\"password\", e.target.value) }}\n          disabled={!options.readOnly || loading}\n          className=\"Login-input\"\n          type=\"password\"\n          fluid\n        />\n        <br />\n        <Button id=\"Login-submit\" color='green' disabled={!options.readOnly || password === \"\" || (phrase === \"\" && selected === \"\")} loading={loading} onClick={() => this.handleLogin()} >Login</Button>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button } from 'semantic-ui-react'\n\nimport './wrapstation.css'\n\nclass WrapStation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      amount_wrap: '0',\n      ui_amount_wrap: '',\n      amount_unwrap: '0',\n      ui_amount_unwrap: '',\n      bignumbers: {},\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false]\n    }\n\n    this.flashSuccess = this.flashSuccess.bind(this)\n    this.flashError = this.flashError.bind(this)\n  }\n\n  componentDidMount() {\n    var bignumbers = {}\n    for(var i = 0; i <= 10; i++) {\n      var key = i\n      bignumbers[key] = ethers.utils.bigNumberify(key)\n    }\n\n    this.setState({ bignumbers })\n  }\n\n  handlePercentUpdate(name, value) {\n    var ui_value = ethers.utils.formatUnits(value.toString(), 'ether')\n    if(name === \"amount_wrap\") {\n      this.setState({ amount_wrap: value, ui_amount_wrap: ui_value })\n    } else if(name === \"amount_unwrap\") {\n      this.setState({ amount_unwrap: value, ui_amount_unwrap: ui_value })\n    } else {\n      return\n    }\n  }\n\n  handleUserUpdate(name, value) {\n    var internal_value = 0\n    try{\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether')\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n\n    if(name === \"ui_amount_wrap\") {\n      this.setState({ ui_amount_wrap: value, amount_wrap: internal_value })\n    } else if(name === \"ui_amount_unwrap\") {\n      this.setState({ ui_amount_unwrap: value, amount_unwrap: internal_value })\n    } else {\n      return\n    }\n  }\n\n\n  flashSuccess(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = true\n    error[index] = false\n    this.setState({ loading, success, error })\n    setTimeout(() => this.reset(index), 1500)\n  }\n\n  flashError(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = true\n    this.setState({ loading, success, error })\n    setTimeout(() => {\n      var { loading, success, error } = this.state\n      loading[index] = false\n      success[index] = false\n      error[index] = false\n      this.setState({ error })\n    }, 1500)\n  }\n\n  reset(index) {\n    var { loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = false\n    if(index === 0) {\n      amount_wrap = '0'\n      ui_amount_wrap = ''\n    }\n    if(index === 1) {\n      amount_unwrap = '0'\n      ui_amount_unwrap = ''\n    }\n    this.setState({ loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap })\n  }\n\n  onWrap = async () => {\n    // Grab the wrap function from the contract instance and the account and amount we want to execute it with\n    const deposit = this.props.options.contracts.WETH.deposit\n    var amount = this.state.amount_wrap\n\n    // Need to check if the amount value is an empty string/undefined/null and that it's greater than 0\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[0] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO WRAPPER...\")\n      try {\n        var tx = await deposit({value: amount})\n        await tx.wait()\n        this.flashSuccess(0)\n      } catch (error) {\n        this.flashError(0)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  onUnwrap = async () => {\n    const withdraw = this.props.options.contracts.WETH.withdraw\n    var amount = this.state.amount_unwrap\n\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[1] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO UNWRAPPER...\")\n      try {\n        var tx = await withdraw(amount.toString())\n        await tx.wait()\n        this.flashSuccess(1)\n      } catch (error) {\n        this.flashError(1)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  render() {\n    var { weth_balance, eth_balance, options } = this.props\n    var { ui_amount_wrap, ui_amount_unwrap, bignumbers, loading, success, error } = this.state\n\n    // Convert to BigNumbers since they will have potential math done on them (risk of overflow/underflow)\n    eth_balance = ethers.utils.bigNumberify(eth_balance)\n    weth_balance = ethers.utils.bigNumberify(weth_balance)\n\n    var button_text = [\"WRAP\", \"UNWRAP\"]\n    for(var i = 0; i < button_text.length; i++) {\n      if(success[i]) {\n        button_text[i] = \"SUCCESS\"\n      }\n      if(error[i]) {\n        button_text[i] = \"FAILED\"\n      }\n    }\n\n    return (\n      <div className=\"WrapStation\">\n        <div id=\"WrapStation-title\">Wrap / Unwrap</div>\n        <Form onSubmit={this.handleSubmit} size='tiny' id=\"WrapStation-form\">\n          <div className=\"WrapStation-headers\">Wrap <span id=\"WrapStation-warning\"><span className=\"red\">WARNING:</span> DO NOT WRAP ALL YOUR ETHER</span></div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={11}>\n              <Input\n                label={{ basic: true, content: \"ETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount ETH...'\n                value={ui_amount_wrap}\n                disabled={ loading[0] || error[0] || success[0] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_wrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[0] || error[0] || success[0] || options.readOnly || ui_amount_wrap === \"\" } loading={loading[0]} width={4} className=\"WrapStation-button\" color={error[0] ? 'red' : 'green'} size='small' onClick={ () => this.onWrap() } >{button_text[0]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_wrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[9]).div(bignumbers[10])) } >90%</Button>\n          </Button.Group>\n          <div className=\"WrapStation-headers\">Unwrap</div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={10}>\n              <Input\n                label={{ basic: true, content: \"WETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount WETH...'\n                value={ui_amount_unwrap}\n                disabled={ loading[1] || error[1] || success[1] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_unwrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[1] || error[1] || success[1] || options.readOnly || ui_amount_unwrap === \"\" } loading={loading[1]} width={4} className=\"WrapStation-button\" color={error[1] ? 'red' : 'green'} size='small' onClick={ () => this.onUnwrap() } >{button_text[1]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_unwrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance) } >100%</Button>\n          </Button.Group>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default WrapStation\n","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { ethers } from 'ethers';\nimport { Header, Table, Checkbox, Icon, Button } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './infobar.css'\n\n// Import src code\nimport WrapStation from './wrapstation/wrapstation'\nimport HumanName from '../utils/humanname/humanname'\n\n// Set up constants\nconst MAX_VAL = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\";\n\n// Class that controls the side information bar that contains the account balances\n// and the wrapping/unwrapping widget.\nclass Infobar extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      currencies: {\n        \"WETH\": { balance: 0, approved: 0 },\n        \"DAI\": { balance: 0, approved: 0 },\n        \"MKR\": { balance: 0, approved: 0 },\n        \"ETH\": { balance: 0, approved: 0  }\n      },\n      account: \"\"\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  componentDidMount() {\n    // Kick off the update timeout loop\n    this.updateInfo();\n  }\n\n  // Timed recursive function that periodically updates the information from the blockchain.\n  async updateInfo() {\n    const { options } = this.props;\n\n    // If the page is not readOnly then get balances for the active account.\n    if(!options.readOnly) {\n      console.log(\"Updating Sidebar Balances...\");\n      const account = await options.signer.getAddress();\n      const market_address = options.contracts.Market.address;\n\n      // Retrieve the balances and approvals\n      const [weth_balance, dai_balance, mkr_balance] = await this.getBalances(account);\n      const [weth_approval, dai_approval, mkr_approval] = await this.getApprovals(account, market_address);\n      const eth_balance = await options.provider.getBalance(account);\n\n      // Create and store currencies object\n      var currencies = {\n        \"WETH\": { balance: weth_balance.toString(), approved: weth_approval.toString() },\n        \"DAI\": { balance: dai_balance.toString(), approved: dai_approval.toString() },\n        \"MKR\": { balance: mkr_balance.toString(), approved: mkr_approval.toString() },\n        \"ETH\": { balance: eth_balance.toString(), approved: MAX_VAL  }\n      };\n      this.setState({ currencies, account });\n    }\n\n    // Call the same function after timeout of 3 seconds\n    setTimeout(this.updateInfo, 3000);\n  }\n\n  /** ################# BLOCKCHAIN WRITE FUNCTIONS ################# **/\n\n  // Approves the market contract to use a given amount of a given currency.\n  async approveCurrencyForAmount(currency, amount) {\n    var { options } = this.props\n    \n    let market_address = options.contracts.Market.address\n\n    if(currency in options.contracts) {\n      var contract = options.contracts[currency]\n      await contract.approve(market_address, amount)\n    }\n  }\n\n  // Approves a MAX_VAL amount of a given currency for the market contract.\n  approveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, MAX_VAL)\n  }\n\n  // Approves a 0 amount of a given currency for the market contract.\n  unapproveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, \"0\")\n  }\n\n  // Toggles between approving and unapproving a currency.\n  toggleApproval(currency, current_approval) {\n    let new_approval = !current_approval\n    if(new_approval) {\n      this.approveCurrency(currency)\n    } else {\n      this.unapproveCurrency(currency)\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to get balances for all the currencies for the given account.\n  async getBalances(account) {\n    const { options } = this.props;\n    const weth_promise = options.contracts.WETH.balanceOf(account);\n    const dai_promise = options.contracts.DAI.balanceOf(account);\n    const mkr_promise = options.contracts.MKR.balanceOf(account);\n    return Promise.all([weth_promise, dai_promise, mkr_promise]);\n  }\n\n  // Helper function to get approvals for all the currencies in this market for the given account.\n  async getApprovals(account, market_address) {\n    const { options } = this.props;\n    const weth_promise = await options.contracts.WETH.allowance(account, market_address);\n    const dai_promise = await options.contracts.DAI.allowance(account, market_address);\n    const mkr_promise = await options.contracts.MKR.allowance(account, market_address);\n    return Promise.all([weth_promise, dai_promise, mkr_promise])\n  }\n\n  // Helper function that gets the UI balance, meaning it is in Ethers (not Gwei) and Rounded to the nearest 1000ths place.\n  // If there is a problem in the value then the value is a Error string.\n  getUIBalance(raw_balance) {\n    let UI_balance = raw_balance\n    if(raw_balance != null) {\n      UI_balance = Math.round(ethers.utils.formatUnits(raw_balance.toString(), 'ether') * 1000) / 1000\n    } else {\n      UI_balance = \"Error...\"\n    }\n    return UI_balance    \n  }\n\n  // Helper function that gets the toggle value for the allowance for a given balance/allowance pair\n  getUIAllowance(raw_balance, raw_allowance) {\n    let UI_allowance = false\n    raw_allowance = ethers.utils.bigNumberify(raw_allowance)\n    let balance = ethers.utils.bigNumberify(raw_balance)\n    if(raw_allowance.gt(balance)) {\n      UI_allowance = true\n    } else {\n      UI_allowance = false\n    }\n    return UI_allowance\n  }\n\n  // Helper function to create object that is used for easy rendering.\n  buildRenderList() {\n    const { currencies } = this.state;\n    const renderList = Object.keys(currencies).map((key) => {\n      let raw_balance = currencies[key][\"balance\"];\n      let raw_allowance = currencies[key][\"approved\"];\n      return {\n        name: key,\n        balance: this.getUIBalance(raw_balance),\n        approved: this.getUIAllowance(raw_balance, raw_allowance)\n      };\n    })\n    return renderList;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, account } = this.state\n    const { padded, closeSidebar, options } = this.props\n    const currenciesInformation = this.buildRenderList();\n\n    // Display a X icon if the user is on mobile (indicated b padded).\n    var x_icon = <Icon name=\"close\" id=\"Infobar-x\" size=\"large\" onClick={closeSidebar} />\n    if(padded) {\n      x_icon = null\n    }\n\n    // Retrieve the username or Login button if readOnly is true.\n    var username = <Button primary as={Link} to={'/login'} fluid onClick={closeSidebar} >Login</Button>\n    if(!options.readOnly) {\n      username = <HumanName address={account} />\n    }\n\n    return (\n      <div id='Infobar'>\n        {/* Insert the account information bar */}\n        <div className='Infobar-header'>{username}{x_icon}</div>\n        \n        {/* Insert the Table of Balances/Approvals */}\n        <Table basic='very' padded={\"very\"} striped unstackable id=\"Infobar-table\">\n          <Table.Header id=\"Infobar-table-header\">\n            <Table.Row>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Token</Header>\n              </Table.Cell>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Balance</Header>\n              </Table.Cell>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Approved</Header>\n              </Table.Cell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {/* Loop and render each currency's info */}\n            {currenciesInformation.map((currency, index) => {\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.name}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.balance}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <Checkbox toggle disabled={currency.name === \"ETH\" || options.readOnly} checked={currency.approved} onClick={ () => this.toggleApproval(currency.name, currency.approved) } />\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>\n        </Table>\n\n        {/* Insert the wrapping station widget into the sidebar. */}\n        <WrapStation options={options} weth_balance={currencies[\"WETH\"][\"balance\"]} eth_balance={currencies[\"ETH\"][\"balance\"]} />\n      </div>\n    )\n  }\n}\n\nexport default Infobar;","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Responsive, Icon, Dropdown, Sidebar, Segment } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './navbar.css';\n\n// Import Artifacts\nimport logo from '../../images/x.svg';\nimport Infobar from '../infobar/infobar';\n\nconst other_buttons = [\n  { name: 'WETH/DAI', href: '/WETH_DAI' },\n  { name: 'MKR/WETH', href: '/MKR_WETH'},\n  { name: 'MKR/DAI', href: '/MKR_DAI'}\n];\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  // Helper function to toggle the sidebar. Used only on mobile.\n  toggleVisible = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  render() {\n    const { children, options } = this.props;\n    const { visible } = this.state;\n\n    return (\n      <div>\n        {/* Mobile Version of the navbar that displays at the top */}\n        <Responsive {...Responsive.onlyMobile}>\n          <Menu \n            borderless\n            fixed='top'\n            id='Navbar-mobile'\n          >\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' href='/' className='Navbar-item'>\n              <div className='Navbar-button-mobile' id='Navbar-logo-container'><img src={logo} alt='logo' id='Navbar-logo-mobile' /></div>\n            </Menu.Item>\n\n            {/* Display dropdown of all other markets */}\n            <Dropdown item text='Markets' className='Navbar-dropdown'>\n              <Dropdown.Menu>\n                {\n                  other_buttons.map((button, idx) => {\n                    return (\n                        <Dropdown.Item\n                          name={button.name}\n                          className='Navbar-item'\n                          as={Link}\n                          to={button.href}\n                          key={idx}\n                        >\n                        {button.name}\n                      </Dropdown.Item>\n                    )\n                  })\n                }\n              </Dropdown.Menu>\n            </Dropdown>\n\n            {/* Display a hamburger menu to toggle sidebar with information. */}\n            <Menu.Menu position='right'>\n              <Menu.Item>\n                <Icon name='sidebar' inverted onClick={ this.toggleVisible } />\n              </Menu.Item>                \n            </Menu.Menu>\n          </Menu>\n\n          {/* Add sidebar infobar */}\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Navbar-Side_info_bar\">\n            <Infobar options={options} padded={false} closeSidebar={this.toggleVisible} />\n          </Sidebar>\n          { children }\n        </Responsive>\n\n        {/* Desktop Version of the navbar that is on the left side of the screen */}\n        <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n          <Menu secondary vertical size='mini' id='Navbar'>\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' className='Navbar-item' as={Link} to={'/'}>\n              <div className='Navbar-button' id='Navbar-logo-container'><img src={logo} alt='logo' className='Navbar-icon' /></div>\n            </Menu.Item>\n\n            {/* Display the list of other buttons for all other markets */}\n            {\n              other_buttons.map((button, idx) => {\n                return (\n                    <Menu.Item\n                      name={button.name}\n                      className='Navbar-item'\n                      onClick={this.handleToggle}\n                      as={Link}\n                      to={button.href}\n                      key={idx}\n                    >\n                    <div className='Navbar-button'>{button.name}</div>\n                  </Menu.Item>\n                )\n              })\n            }\n          </Menu>\n          {/* Children are all content that will be rendered on page, it is put as a child to the navbar */}\n          { children }\n        </Responsive>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","// Import Major Dependencies\nimport React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Responsive } from 'semantic-ui-react';\nimport { ethers } from 'ethers';\n\n// Import CSS Files\nimport './App.css';\n\n// Import src code\nimport Market from '../market/market';\nimport Home from '../home/home';\nimport Login from '../login/login';\nimport Navbar from '../navbar/navbar';\nimport Infobar from '../infobar/infobar';\n\n// Load ABI and Config file\nconst config = require(\"./../../config\");\nconst erc20Abi = require(\"./../../abi/standard-token/erc20\");\nconst WEthAbi = require(\"./../../abi/standard-token/ds-eth-token\");\nconst MatchingMarketAbi = require(\"./../../abi/maker-otc/matching-market\");\nconst SupportMethodsAbi = require(\"./../../abi/otc-support-methods/otc-support-methods\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        provider: null,\n        signer: null,\n        contracts: [],\n        readOnly: true,\n        handleLogin: this.handleLogin,\n        handleReLogin: this.handleReLogin\n      }\n    };\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleReLogin = this.handleReLogin.bind(this);\n  }\n\n  componentWillMount() {\n    // Retrieve and store options\n    const options = this.getOptions();\n    this.setState({ options });\n  }\n\n  // Constructs and Returns a Dictionary with the environment options\n  getOptions() {\n    // Get a connection to the Ethereum blockchain\n    const ethereum = this.getEthereum();\n    let contracts = [];\n\n    // Retrieve the Provider, Signer, and Contracts\n    let provider = null;\n    let signer = null;\n    let readOnly = true;\n\n    ethers.errors.setLogLevel(\"off\");\n\n    // If an Ethereum connection exists then retrieve the provider and signer\n    // Else connect to default provider from ethers.js (myetherwallet/infura) and generate a random account to be the signer\n    if(ethereum) {\n      provider = new ethers.providers.Web3Provider(ethereum);\n      signer = provider.getSigner();\n\n      // Set readOnly to false since we have a signing account (not randomly generated)\n      // The contracts are then initialized with the signer\n      readOnly = false;\n      contracts = this.getContracts(signer);\n    } else {\n      provider = new ethers.getDefaultProvider();\n      signer = new ethers.Wallet.createRandom();\n\n      // Since this is readOnly, the contracts are initialized with the provider\n      contracts = this.getContracts(provider);\n    }\n\n    // Package options\n    const options = this.buildOptions(provider, signer, contracts, readOnly);\n    return options;\n  }\n\n  async handleLogin(phrase, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      let provider = new ethers.getDefaultProvider();\n      let signer = new ethers.Wallet.fromMnemonic(phrase).connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n\n      // Encrypt and store the wallet into the browsers local storage\n      let encrypted_wallet = await signer.encrypt(password);\n      this.saveEncryptedWallet(encrypted_wallet);\n    }\n  }\n\n  async handleReLogin(account, json_string, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      console.log(\"LOGGING IN WITH ACCOUNT \" + account);\n      let provider = new ethers.getDefaultProvider();\n      let signer = await ethers.Wallet.fromEncryptedJson(json_string, password);\n      signer = signer.connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n    }\n  }\n\n  saveEncryptedWallet(wallet) {\n    var json_wallet = JSON.parse(wallet)\n    var address = json_wallet.address\n    var localStorage = window.localStorage\n    if(!localStorage.getItem(\"encrypted_wallets\")) {\n      localStorage.setItem(\"encrypted_wallets\", JSON.stringify({}))\n    }\n\n    var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n    stored_wallets[\"0x\" + address] = wallet\n    localStorage.setItem(\"encrypted_wallets\", JSON.stringify(stored_wallets))\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to build options dictionary\n  buildOptions(provider, signer, contracts, readOnly) {\n    return {\n      provider: provider,\n      signer: signer,\n      contracts: contracts,\n      readOnly: readOnly,\n      handleLogin: this.handleLogin,\n      handleReLogin: this.handleReLogin\n    }\n  }\n\n  // Helper method to retrieve provider to ethereum blockchain if present and null otherwise.\n  getEthereum() {\n    var ethereum = null;\n    // If web3 is present in the window return the connection provider otherwise null\n    if(window.web3) {\n      ethereum = window.ethereum ? window.ethereum : window.web3.currentProvider;\n    }\n    return ethereum;\n  }\n\n  // Helper method to retrieve an object of all the initialized contracts.\n  getContracts(contract_initializer) {\n    return {\n      WETH: new ethers.Contract(config[\"tokens\"][\"main\"][\"W-ETH\"], WEthAbi.interface, contract_initializer),\n      DAI: new ethers.Contract(config[\"tokens\"][\"main\"][\"DAI\"], erc20Abi.interface, contract_initializer),\n      MKR: new ethers.Contract(config[\"tokens\"][\"main\"][\"MKR\"], erc20Abi.interface, contract_initializer),\n      Market: new ethers.Contract(config[\"market\"][\"main\"][\"address\"], MatchingMarketAbi.interface, contract_initializer),\n      SupportMethods: new ethers.Contract(config[\"otcSupportMethods\"][\"main\"][\"address\"], SupportMethodsAbi.interface, contract_initializer)\n    };\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { options } = this.state\n\n    // If there is no provider at all then render a Loading screen.\n    if(options.provider === null) {\n      return (\n        <div className=\"App\">\n          Loading...\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <div>\n            <Navbar options={options} />\n            <div id=\"App_market_container\">\n                <Switch>\n                  <Route exact path='/' render={() => <Home />} />\n                  <Route exact path='/login' render={() => <Login options={options} />} />\n                  <Route exact path='/WETH_DAI' render={() => <Market key={'WETH_DAI'} options={options} currencies={['WETH', 'DAI']} />} />\n                  <Route exact path='/MKR_WETH' render={() => <Market key={'MKR_WETH'} options={options} currencies={['MKR', 'WETH']} />} />\n                  <Route exact path='/MKR_DAI' render={() => <Market  key={'MKR_DAI'} options={options} currencies={['MKR', 'DAI']} />} />\n                </Switch>\n            </div>\n            <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n              <Infobar padded={true} options={options} />\n            </Responsive>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// Import Major Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\n// Import CSS Files\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-virtualized/styles.css'\nimport './index.css';\n\n// Import App src code\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}