{"version":3,"sources":["images/x.svg","workers/orders.worker.js","registerServiceWorker.js","components/utils/general.js","components/utils/humanname/humanname.js","components/market/orderlistV2/orderlistV2.js","components/market/limitorder/limitorder.js","components/market/marketorder/marketorder.js","components/market/myorders/myorders.js","components/market/stats/chart/chart.js","components/market/stats/stats.js","components/utils/orders.js","components/market/accountstats/accountstats.js","components/market/markethistory/markethistory.js","components/market/leaderboard/leaderboard.js","components/market/myhistory/myhistory.js","components/market/sidebar/sidebar.js","components/utils/openorders.js","components/market/market.js","components/home/home.js","components/login/login.js","components/infobar/wrapstation/wrapstation.js","components/infobar/infobar.js","components/navbar/navbar.js","components/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","Worker","__webpack_public_path__","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","numberWithCommas","x","parts","toString","split","replace","join","first_names","last_names","colors","fontColors","HumanName","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loading","balances","getBalances","prevProps","prevState","address","setState","options","currencies","contracts","balanceOf","Math","round","ethers","utils","formatUnits","nextProps","nextState","length","num_names","bigNumberify","first_name_idx","substr","last_name_idx","mod","initials","num_colors","long_num","color_idx","_this$props2","icon_only","inactive_link","react_default","a","createElement","className","_this$getName","getName","_this$getName2","slicedToArray","name","_this$getColor","getColor","_this$getColor2","backgroundColor","fontColor","color","onClick","open","icon","style","final","title","Popup","trigger","Header","Content","Component","OrderListV2","max_order","orders","buy_orders","sell_orders","last_order","top10","concat","sort","b","curr_1_amt","slice","floor","_this2","index","_ref","key","item","maker","price","id","Grid","padded","Column","computer","tablet","mobile","content","account","type","ratio","color_0","color_1","custom_style","backgroundImage","backgroundSize","backgroundRepeat","assign","setSidebar","verticalAlign","humanname_humanname","_this3","_this$props","sell_orders_reverse","reverse","push","curr_0_amt","getMax","Icon","size","es","outline","_ref2","height","width","rowHeight","rowCount","rowRenderer","scrollToIndex","LimitOrder","sidetext","init","success","amount_0","ui_amount_0","amount_1","ui_amount_1","bignumbers","last_price","handleSubmit","bind","assertThisInitialized","flashSuccess","flashError","generateBigNumbers","i","curr_gem_0","curr_gem_1","data","pay_amt","pay_gem","buy_amt","buy_gem","Market","offer","gasLimit","gasPrice","parseUnits","tx","wait","_context","t0","setTimeout","value","test","amount_1_bn","amount_0_bn","price_bn","one_bn","mul","div","err","_this4","_this$state","can_buy","can_sell","curr_0_balance","curr_1_balance","gte","gt","side_text","Loader","active","inline","Form","Field","Input","label","basic","labelPosition","placeholder","onChange","e","handlePriceChange","target","disabled","readOnly","handleAmountChange","Button","Group","inverted","handleAmountPercentageChange","MarketOrder","amounts","ui_amounts","expected_price","expected_amount","handleMarketBuy","handleMarketSell","min_expected_amount","min_fill_amount","sellAllAmount","_this$state5","reset","_this$state6","_this3$state","_this$state7","will_receive","giving","getBuyAmount","one","_this$state9","new_amounts","new_ui_amounts","ui_amount","amount_bn","setExpectedAmount","_this5","_this$state10","_this6","_this$state11","_this$props4","side_texts","widths","MyOrders","myOrders","cancel","orders_table","background_item","getMyOrders","Table","Body","map","Row","Cell","textAlign","cancelOrder","selectable","striped","celled","unstackable","columns","HeaderCell","candlesAppearance","wickStroke","fill","d","close","widthRatio","opacity","CandleChart","first_timestamp","curr_candle","date","Date","high","low","volume","parseFloat","end_timestamp","order","max","min","chart","initialData","buildChartPoints","ema10","ema","windowSize","sourcePath","skipUndefined","merge","c","accessor","stroke","ema50","calculatedData","margin","left","right","top","bottom","yGrid","innerTickSize","tickStrokeDasharray","tickStrokeOpacity","tickStrokeWidth","xGrid","_xScaleProvider","discontinuousTimeScaleProvider","inputDateAccessor","xScaleProvider","xScale","xAccessor","displayXAccessor","xExtents","last","react_stockcharts_es","seriesName","clamp","yExtents","axes","axisAt","orient","ticks","tickStroke","series","yAccessor","coordinates","tooltip","origin","xDisplayFormat","timeFormat","textFill","echo","w","h","tickFormat","format","fitWidth","Stats","buildStat","users","num_users","num_buys","num_sells","buy_volume","sell_volume","last_type","new_stats","curr_1","raw_stats","keys","statistics","updateStats","stats_chart_chart","List","Item","Description","getPrice","lte","getType","curr_0_addr","curr_1_addr","buy_addr","toUpperCase","pay_addr","eventsToOrders","events","timestamp","toLocaleTimeString","undefined","hour","minute","toLocaleDateString","day","month","year","raw_timestamp","curr_0","taker","buildHashKey","first_addr","second_addr","solidityKeccak256","_callee","hashKey01","hashKey10","filter01_maker","filter01_taker","filter10_maker","filter10_taker","regenerator_default","wrap","prev","next","filters","LogTake","removeAllListeners","stop","_callee2","hashKey1","hashKey2","filter1","filter2","_context2","subscribeToMyNewOrders","_x6","_x7","_x8","_x9","_subscribeToMyNewOrders","apply","arguments","_callee3","addOrders","_context3","on","pair","take_amt","give_amt","event","subscribeToNewOrders","_x10","_x11","_x12","_subscribeToNewOrders","_callee4","_context4","AccountStats","amount_0_bought","avg_buy_price","amount_0_sold","avg_sell_price","profit","eventsToData","profiles","buyer","seller","newUserProfile","profile_data","add","avg_buy_order","avg_sell_order","getProfit","data_point","amount_0_given","amount_1_received","amount_1_given","amount_0_received","amount_sell","amount_buy","sell_price","buy_price","min_amount","lt","profit_suffix","bought_suffix","sold_suffix","profit_prefix","MarketHistory","o","participants","only","Leaderboard","direction","column","new_data","max_profit","abs","user","first","second","profit_color","clicked_column","_this$state2","symbol","headers","handleSort","MyHistory","my_orders","new_order","SideBar","visible","amount","currency_0_balance","currency_1_balance","info","owner","button_loading","button_success","button_error","updateInfo","stopLoading","getOffer","getOwner","sidebar_info","toggleSidebar","inputs","will_receive_wholenums","buy","internal_value","ui_value","balance","action","subtitle","updated_info","getUpdatedInfo","Sidebar","as","Segment","animation","currency","receive_currency","offered","max_take","getMaxTake","calcWillReceive","button_text","handleUserChange","executeTrade","processOpenOrders","rawOrders","n","pay_amount","buy_amount","trimNulls","trimLength","filter","toNumber","ids","payAmts","buyAmts","owners","timestamps","getOpenOrders","_x","_x2","_x3","_getOpenOrders","token_addr_0","token_addr_1","pay_token","buy_token","allRawOrders","newOrders","offerId","SupportMethods","getOffers","sent","getWorseOffer","abrupt","config","require","setDocTitle","past_orders","addMyOrders","my_past_orders","open_buy_orders","open_sell_orders","timers","num_order_calls","num_my_order_calls","logged_latest_block","done_loading","done_loading_my_orders","updateBalances","updateOpenOrders","pastOrderWorker","myWorker","signer","getAddress","provider","getBlockNumber","addEventListener","payload","processNewBatchPastOrders","processNewBatchMyPastOrders","postMessage","toBlock","numBlocks","ceil","parseInt","clearTimeout","_x4","_x5","_unSubscribeToNewOrders","unSubscribeToNewOrders","_unSubscribeToMyNewOrders","unSubscribeToMyNewOrders","timer","Promise","all","document","_this$props6","buildTitle","all_open_orders","activity_panes","menuItem","render","Tab","Pane","markethistory_markethistory","leaderboard_leaderboard","myorders_myorders","myhistory_myhistory","buy_panes","limitorder_limitorder","marketorder_marketorder","sidebar_sidebar","stats_stats","divided","menu","fluid","tabular","attached","panes","orderlistV2_orderlistV2","Responsive","minWidth","onlyTablet","maxWidth","accountstats_accountstats","Home","Transition","transitionOnMount","duration","Login","selected","phrase","password","redirect","saved_wallets","handleRedirect","getSavedAccounts","defineProperty","localStorage","getItem","JSON","parse","handleLogin","handleReLogin","Redirect","to","wallet_list","classes","field_change","handleFieldChange","WrapStation","onWrap","asyncToGenerator","mark","deposit","WETH","amount_wrap","onUnwrap","withdraw","amount_unwrap","ui_amount_wrap","ui_amount_unwrap","_this$state3","weth_balance","eth_balance","_this$state4","onSubmit","handleUserUpdate","handlePercentUpdate","MAX_VAL","Infobar","context","approved","DAI","MKR","ETH","market_address","dai_balance","mkr_balance","getApprovals","weth_approval","dai_approval","mkr_approval","getBalance","contract","approve","approveCurrencyForAmount","current_approval","approveCurrency","unapproveCurrency","weth_promise","dai_promise","mkr_promise","allowance","raw_balance","raw_allowance","getUIBalance","getUIAllowance","closeSidebar","currenciesInformation","buildRenderList","x_icon","username","primary","Link","Checkbox","toggle","checked","toggleApproval","wrapstation_wrapstation","other_buttons","href","Navbar","toggleVisible","children","onlyMobile","Menu","borderless","fixed","src","logo","alt","Dropdown","text","button","idx","position","infobar_infobar","secondary","vertical","handleToggle","erc20Abi","WEthAbi","MatchingMarketAbi","SupportMethodsAbi","App","getOptions","ethereum","getEthereum","errors","setLogLevel","providers","Web3Provider","getSigner","getContracts","getDefaultProvider","Wallet","createRandom","buildOptions","fromMnemonic","connect","encrypt","encrypted_wallet","saveEncryptedWallet","json_string","fromEncryptedJson","wallet","setItem","stringify","stored_wallets","web3","currentProvider","contract_initializer","Contract","interface","HashRouter","navbar_navbar","Switch","Route","exact","path","home_home","login_login","market_market","React","ReactDOM","components_App_App","getElementById","URL","process","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cfd48f1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.23ec4264.svg\";","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"d4e350f9ca2709355b9a.worker.js\");\n};","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function numberWithCommas(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Popup } from 'semantic-ui-react';\nimport { numberWithCommas } from '../general';\n\n// Import CSS Files\nimport './humanname.css';\n\n// Set up constants\nconst first_names = [\"JAMES\", \"JOHN\", \"ROBERT\", \"MICHAEL\", \"WILLIAM\", \"DAVID\", \"RICHARD\", \"CHARLES\", \"JOSEPH\", \"THOMAS\", \"CHRISTOPHER\", \"DANIEL\", \"PAUL\", \"MARK\", \"DONALD\", \"GEORGE\", \"KENNETH\", \"STEVEN\", \"EDWARD\", \"BRIAN\", \"RONALD\", \"ANTHONY\", \"KEVIN\", \"JASON\", \"MATTHEW\", \"GARY\", \"TIMOTHY\", \"JOSE\", \"LARRY\", \"JEFFREY\", \"FRANK\", \"SCOTT\", \"ERIC\", \"STEPHEN\", \"ANDREW\", \"RAYMOND\", \"GREGORY\", \"JOSHUA\", \"JERRY\", \"DENNIS\", \"WALTER\", \"PATRICK\", \"PETER\", \"HAROLD\", \"DOUGLAS\", \"HENRY\", \"CARL\", \"ARTHUR\", \"RYAN\", \"ROGER\", \"JOE\", \"JUAN\", \"JACK\", \"ALBERT\", \"JONATHAN\", \"JUSTIN\", \"TERRY\", \"GERALD\", \"KEITH\", \"SAMUEL\", \"WILLIE\", \"RALPH\", \"LAWRENCE\", \"NICHOLAS\", \"ROY\", \"BENJAMIN\", \"BRUCE\", \"BRANDON\", \"ADAM\", \"HARRY\", \"FRED\", \"WAYNE\", \"BILLY\", \"STEVE\", \"LOUIS\", \"JEREMY\", \"AARON\", \"RANDY\", \"HOWARD\", \"EUGENE\", \"CARLOS\", \"RUSSELL\", \"BOBBY\", \"VICTOR\", \"MARTIN\", \"ERNEST\", \"PHILLIP\", \"TODD\", \"JESSE\", \"CRAIG\", \"ALAN\", \"SHAWN\", \"CLARENCE\", \"SEAN\", \"PHILIP\", \"CHRIS\", \"JOHNNY\", \"EARL\", \"JIMMY\", \"ANTONIO\", \"DANNY\", \"BRYAN\", \"TONY\", \"LUIS\", \"MIKE\", \"STANLEY\", \"LEONARD\", \"NATHAN\", \"DALE\", \"MANUEL\", \"RODNEY\", \"CURTIS\", \"NORMAN\", \"ALLEN\", \"MARVIN\", \"VINCENT\", \"GLENN\", \"JEFFERY\", \"TRAVIS\", \"JEFF\", \"CHAD\", \"JACOB\", \"LEE\", \"MELVIN\", \"ALFRED\", \"KYLE\", \"FRANCIS\", \"BRADLEY\", \"JESUS\", \"HERBERT\", \"FREDERICK\", \"RAY\", \"JOEL\", \"EDWIN\", \"DON\", \"EDDIE\", \"RICKY\", \"TROY\", \"RANDALL\", \"BARRY\", \"ALEXANDER\", \"BERNARD\", \"MARIO\", \"LEROY\", \"FRANCISCO\", \"MARCUS\", \"MICHEAL\", \"THEODORE\", \"CLIFFORD\", \"MIGUEL\", \"OSCAR\", \"JAY\", \"JIM\", \"TOM\", \"CALVIN\", \"ALEX\", \"JON\", \"RONNIE\", \"BILL\", \"LLOYD\", \"TOMMY\", \"LEON\", \"DEREK\", \"WARREN\", \"DARRELL\", \"JEROME\", \"FLOYD\", \"LEO\", \"ALVIN\", \"TIM\", \"WESLEY\", \"GORDON\", \"DEAN\", \"GREG\", \"JORGE\", \"DUSTIN\", \"PEDRO\", \"DERRICK\", \"DAN\", \"LEWIS\", \"ZACHARY\", \"COREY\", \"HERMAN\", \"MAURICE\", \"VERNON\", \"ROBERTO\", \"CLYDE\", \"GLEN\", \"HECTOR\", \"SHANE\", \"RICARDO\", \"SAM\", \"RICK\", \"LESTER\", \"BRENT\", \"RAMON\", \"CHARLIE\", \"TYLER\", \"GILBERT\", \"GENE\"];\nconst last_names = [\"SMITH\", \"JOHNSON\", \"WILLIAMS\", \"JONES\", \"BROWN\", \"DAVIS\", \"MILLER\", \"WILSON\", \"MOORE\", \"TAYLOR\", \"ANDERSON\", \"THOMAS\", \"JACKSON\", \"WHITE\", \"HARRIS\", \"MARTIN\", \"THOMPSON\", \"GARCIA\", \"MARTINEZ\", \"ROBINSON\", \"CLARK\", \"RODRIGUEZ\", \"LEWIS\", \"LEE\", \"WALKER\", \"HALL\", \"ALLEN\", \"YOUNG\", \"HERNANDEZ\", \"KING\", \"WRIGHT\", \"LOPEZ\", \"HILL\", \"SCOTT\", \"GREEN\", \"ADAMS\", \"BAKER\", \"GONZALEZ\", \"NELSON\", \"CARTER\", \"MITCHELL\", \"PEREZ\", \"ROBERTS\", \"TURNER\", \"PHILLIPS\", \"CAMPBELL\", \"PARKER\", \"EVANS\", \"EDWARDS\", \"COLLINS\", \"STEWART\", \"SANCHEZ\", \"MORRIS\", \"ROGERS\", \"REED\", \"COOK\", \"MORGAN\", \"BELL\", \"MURPHY\", \"BAILEY\", \"RIVERA\", \"COOPER\", \"RICHARDSON\", \"COX\", \"HOWARD\", \"WARD\", \"TORRES\", \"PETERSON\", \"GRAY\", \"RAMIREZ\", \"JAMES\", \"WATSON\", \"BROOKS\", \"KELLY\", \"SANDERS\", \"PRICE\", \"BENNETT\", \"WOOD\", \"BARNES\", \"ROSS\", \"HENDERSON\", \"COLEMAN\", \"JENKINS\", \"PERRY\", \"POWELL\", \"LONG\", \"PATTERSON\", \"HUGHES\", \"FLORES\", \"WASHINGTON\", \"BUTLER\", \"SIMMONS\", \"FOSTER\", \"GONZALES\", \"BRYANT\", \"ALEXANDER\", \"RUSSELL\", \"GRIFFIN\", \"DIAZ\", \"HAYES\", \"MYERS\", \"FORD\", \"HAMILTON\", \"GRAHAM\", \"SULLIVAN\", \"WALLACE\", \"WOODS\", \"COLE\", \"WEST\", \"JORDAN\", \"OWENS\", \"REYNOLDS\", \"FISHER\", \"ELLIS\", \"HARRISON\", \"GIBSON\", \"MCDONALD\", \"CRUZ\", \"MARSHALL\", \"ORTIZ\", \"GOMEZ\", \"MURRAY\", \"FREEMAN\", \"WELLS\", \"WEBB\", \"SIMPSON\", \"STEVENS\", \"TUCKER\", \"PORTER\", \"HUNTER\", \"HICKS\", \"CRAWFORD\", \"HENRY\", \"BOYD\", \"MASON\", \"MORALES\", \"KENNEDY\", \"WARREN\", \"DIXON\", \"RAMOS\", \"REYES\", \"BURNS\", \"GORDON\", \"SHAW\", \"HOLMES\", \"RICE\", \"ROBERTSON\", \"HUNT\", \"BLACK\", \"DANIELS\", \"PALMER\", \"MILLS\", \"NICHOLS\", \"GRANT\", \"KNIGHT\", \"FERGUSON\", \"ROSE\", \"STONE\", \"HAWKINS\", \"DUNN\", \"PERKINS\", \"HUDSON\", \"SPENCER\", \"GARDNER\", \"STEPHENS\", \"PAYNE\", \"PIERCE\", \"BERRY\", \"MATTHEWS\", \"ARNOLD\", \"WAGNER\", \"WILLIS\", \"RAY\", \"WATKINS\", \"OLSON\", \"CARROLL\", \"DUNCAN\", \"SNYDER\", \"HART\", \"CUNNINGHAM\", \"BRADLEY\", \"LANE\", \"ANDREWS\", \"RUIZ\", \"HARPER\", \"FOX\", \"RILEY\", \"ARMSTRONG\", \"CARPENTER\", \"WEAVER\", \"GREENE\", \"LAWRENCE\", \"ELLIOTT\", \"CHAVEZ\", \"SIMS\", \"AUSTIN\", \"PETERS\", \"KELLEY\", \"FRANKLIN\", \"LAWSON\"];\nconst colors = [\"#001f3f\", \"#0074D9\", \"#7FDBFF\", \"#39CCCC\", \"#2ECC40\", \"#01FF70\", \"#FFDC00\", \"#FF851B\", \"#3D9970\", \"#F15152\", \"#111111\", \"#AAAAAA\", \"#DDDDDD\"];\nconst fontColors = [\"#FFFFFF\", \"#FFFFFF\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#FFFFFF\", \"#111111\", \"#111111\"];\n\nclass HumanName extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      balances: [\"...\", \"...\"]\n    };\n\n    this.getBalances();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if(this.props.address !== prevProps.address) {\n      this.setState({ balances: [\"...\", \"...\"], loading: true });\n      this.getBalances();\n    }\n  }\n\n  async getBalances() {\n    // Convert raw orders into the proper format and store max profit someone has made over the data range\n    const { address, options, currencies } = this.props;\n    if (currencies) {\n      let balances = this.state.balances\n      balances[0] = await options.contracts[currencies[0]].balanceOf(address)\n      balances[1] = await options.contracts[currencies[1]].balanceOf(address)\n      balances[0] = numberWithCommas(Math.round(ethers.utils.formatUnits(balances[0].toString(), 'ether') * 1000) / 1000)\n      balances[1] = numberWithCommas(Math.round(ethers.utils.formatUnits(balances[1].toString(), 'ether') * 1000) / 1000)\n      this.setState({ loading: false, balances })\n    }\n  }\n\n  // Only update the component if the address has changed since no other change will effect output.\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.address !== nextProps.address || this.state.loading !== nextState.loading) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert the address to a name using the mapping scheme\n  getName(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [address, \"0x\"];\n    }\n\n    const num_names = ethers.utils.bigNumberify(\"200\");\n    \n    // Split the address into 2 equal lengths to create the first and last names\n    let first_name_idx = ethers.utils.bigNumberify(address.substr(0, 22)).toString();\n    let last_name_idx = ethers.utils.bigNumberify(\"0x\" + address.substr(22, 40)).toString();\n    \n    // Mod the numbers by 200 to get a response that is within the max index of 200 to be used to retrieve a first and last name\n    first_name_idx = ethers.utils.bigNumberify(first_name_idx).mod(num_names).toString();\n    last_name_idx = ethers.utils.bigNumberify(last_name_idx).mod(num_names).toString();\n\n    const initials = first_names[first_name_idx][0] + last_names[last_name_idx][0];\n    return [first_names[first_name_idx] + \" \" + last_names[last_name_idx], initials];\n  }\n\n  // Convert the address to a color using the mapping scheme\n  getColor(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [colors[0], fontColors[0]];\n    }\n\n    const num_colors = ethers.utils.bigNumberify(\"13\");\n    const long_num = ethers.utils.bigNumberify(address).toString();\n\n    // Mode the number by 13 to get a response within the max index of 13 to be used to retrieve the colors\n    const color_idx = ethers.utils.bigNumberify(long_num).mod(num_colors).toString()\n    return [colors[color_idx], fontColors[color_idx]]\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { address, icon_only, inactive_link, currencies } = this.props;\n    const { balances } = this.state;\n\n    // If the address is null then render an empty circle\n    if(!address) {\n      return (<div className=\"HumanName-circle\"></div>);\n    }\n\n    // Get the computed name and colors\n    let [ name, initials ] = this.getName(address);\n    const [ backgroundColor, fontColor ] = this.getColor(address);\n    \n    name = (<div className=\"HumanName-name\">{name}</div>);\n    const color = { \"backgroundColor\": backgroundColor, \"color\": fontColor };\n\n    // OnClick function will open up a tab with the account information in etherscan\n    let onClick = () => window.open('https://etherscan.io/address/' + address, '_blank');\n    if(inactive_link) {\n      onClick = null;\n    }\n\n    const icon = (<div className=\"HumanName-circle\" style={color}>{initials}</div>)\n    let final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon} {name}</span>)\n    if( icon_only ) {\n      final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon}</span>)\n    }\n\n    if(currencies) {\n      final = (<Popup trigger={final}>\n                <Popup.Header>Balances</Popup.Header>\n                <Popup.Content>\n                  <p>{balances[0]} {currencies[0]}</p>                \n                  <p>{balances[1]} {currencies[1]}</p>                \n                </Popup.Content>\n              </Popup>)\n    }\n    return final\n\n  }\n}\n\nexport default HumanName\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Grid, Icon, Popup } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS FIle\nimport './orderlistV2.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass OrderListV2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n    this.orders = [];\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if buy/sell orders has changed or the last order is different\n    if(nextProps.buy_orders !== this.props.buy_orders || nextProps.sell_orders !== this.props.sell_orders || nextProps.last_order !== this.props.last_order) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retreives the maximum value in the orderbook\n  getMax(orders) {\n    const top10 = orders.concat().sort((a,b) => b.curr_1_amt - a.curr_1_amt).slice(0,10);\n    if(top10.length === 10) {\n      return top10[top10.length-1].curr_1_amt;\n    } else if(top10.length > 0) {\n      return top10[Math.floor(top10.length/2)].curr_1_amt;\n    } else {\n      return null;\n    }\n  }\n\n  // Renders the HTML for each row in the virtualized table\n  // Includes the color bands based on ratio to max\n  rowRenderer({index, key, style}) {\n    const item = this.orders[index];\n    // If this condition is true then this means it is the middle dividing row and the last price should be shown\n    if(item.maker === \"0\") {\n      const { last_order } = this.props;\n      let price = \"...\";\n      if(last_order[\"price\"]) {\n        price = last_order[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100) + \"▲\"}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100)  + \"▼\" }</span>);\n      }\n      return (\n        <div id=\"OrderListV2-table-middle\" key={key} style={style} >\n          <Grid padded={'horizontally'}>\n            <Grid.Column computer={2} tablet={2} mobile={3}>\n            </Grid.Column>\n            <Grid.Column computer={4} tablet={4} mobile={4}>\n              <Popup trigger={<span>{price}</span>} content='Last Price' />\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={4}>\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={5}>\n            </Grid.Column>\n          </Grid>\n        </div>\n      )      \n    }\n\n    // Calculate ratio to the max\n    const { account } = this.props;\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1_amt\"]/this.max_order * 100;\n    const direction = \"right\";\n\n    // Calculate the colors for the color bands\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color to make the rows striped\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n    if(account === item[\"maker\"]) {\n      color = `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n\n    style = Object.assign(custom_style, style);\n    let price = item[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"OrderListV2-table-entry\" key={key} style={style} onClick={() => this.props.setSidebar(item) }>\n        <Grid padded={'horizontally'} verticalAlign={'middle'} className=\"OrderListV2-table-entry-grid\">\n          <Grid.Column computer={2} tablet={2} mobile={3} className=\"OrderListV2-table-entry-grid-img\">\n            <HumanName inactive_link icon_only address={item[\"maker\"]} />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_0_amt\"])}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_1_amt\"])}\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, buy_orders, sell_orders } = this.props;\n\n    // Copy and reverse the sell order list\n    const sell_orders_reverse = sell_orders.slice(0);\n    sell_orders_reverse.reverse();\n\n    // Push the \"MIDDLE\" row with the price summary onto the list\n    sell_orders_reverse.push({\n      \"maker\": \"0\",\n      \"price\": \"0\",\n      \"curr_0_amt\": \"0\",\n      \"curr_1_amt\": \"0\"\n    });\n\n    // Concatenate with the list of buy orders to get the mirroed orderbook\n    this.orders = sell_orders_reverse.concat(buy_orders);\n\n    // Recalculate the max order on the books\n    this.max_order = this.getMax(this.orders);\n\n    // If the buy or sell book is length 0 then just show loading screen since this mostly indicates an error and bad UX\n    if(sell_orders.length === 0 && buy_orders.length === 0) {\n      return (\n        <div className=\"OrderListV2\">\n          <div className=\"OrderListV2-loading\">Loading...</div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"OrderListV2\">\n        <Grid id=\"OrderListV2-table-header\">\n          <Grid.Column computer={2} tablet={2} mobile={3}>\n            <Icon name=\"user circle\" size=\"large\" />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5}>\n            {currencies[1]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={40}\n              rowCount={this.orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              scrollToIndex={sell_orders_reverse.length + 6}\n              className=\"OrderListV2-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n\nexport default OrderListV2","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './limitorder.css'\n\nclass LimitOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      sidetext: \"LOADING...\",\n      init: false,\n      error: false,\n      success: false,\n      price: '',\n      amount_0: '',\n      ui_amount_0: '',\n      amount_1: '',\n      ui_amount_1: '',\n      bignumbers: [],\n      last_price: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores BigNumber integers for easy math later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Main function that interfaces and writes to the blockchain.\n  // This is the most important function here.\n  async handleSubmit(type) {\n    // Set loading to true to update UI\n    let sidetext;\n    if(type === \"BUY\") {\n      sidetext = \"BUYING...\"\n    } else if(type === \"SELL\") {\n      sidetext = \"SELLING...\"\n    } else {\n      sidetext = \"LOADING...\"\n    }\n    this.setState({loading: true, sidetext, error: false, success: false});\n\n    const { currencies, options } = this.props;\n\n    // Get the important info for the transaction\n    const amount_0 = this.state.amount_0;\n    const amount_1 = this.state.amount_1;\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n    let data = {};\n\n    // Set data to the correct value depending on if the order is a BUY or SELL\n    // Basically you just flip the currency 0 and currency 1\n    if(type === \"BUY\") {\n      data = {\n        pay_amt: amount_1,\n        pay_gem: curr_gem_1,\n        buy_amt: amount_0,\n        buy_gem: curr_gem_0\n      };\n    } else if(type === \"SELL\") {\n      data = {\n        pay_amt: amount_0,\n        pay_gem: curr_gem_0,\n        buy_amt: amount_1,\n        buy_gem: curr_gem_1\n      };\n    } else {\n      return;\n    }\n\n    console.log(data);\n\n    try {\n      const tx = await options.contracts.Market.offer(data.pay_amt, data.pay_gem, data.buy_amt, data.buy_gem, 1, { gasLimit: 500000, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') });\n      await tx.wait();\n      this.flashSuccess();\n    } catch (error) {\n      console.log(error);\n      this.flashError();\n    }\n  }\n\n  // Function to flash Success on the button when a order has gone thru\n  flashSuccess() {\n    this.setState({ success : true, loading: false });\n    setTimeout(() => this.setState({ success: false, price: '', amount_0: '0', ui_amount_0: '', amount_1: '0', ui_amount_1: '' }), 1500);\n  }\n\n  // Function to flash Error on the button when a order has failed\n  flashError() {\n    this.setState({ error: true, loading: false });\n    setTimeout(() => this.setState({ error: false }), 1500);\n  }\n\n  // Handler for changes in price in the UI\n  handlePriceChange(value) {\n    if(/\\S/.test(value) && this.state.ui_amount_0 !== \"\") {\n      const price = value;\n      const ui_amount_1 = this.state.ui_amount_0 * price;\n      const amount_1_bn = ethers.utils.parseUnits(ui_amount_1.toString(), 'ether');\n      this.setState({ price: price, amount_1: amount_1_bn.toString(), ui_amount_1: ui_amount_1.toString() });\n    } else {\n      this.setState({ price: value, amount_1: '0', ui_amount_1: '' });\n    }\n  }\n\n  // Handler for changes in amount to be traded in the UI\n  handleAmountChange(index, value) {\n    if(/\\S/.test(value) && this.state.price !== \"\") {\n      const price = this.state.price;\n      let ui_amount_0 = null;\n      let ui_amount_1 = null;\n      let amount_0_bn = null;\n      let amount_1_bn = null;\n\n      // All math is done in BigNumber arithmetic using wei\n      if(index === 0) {\n        ui_amount_0 = value;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n        ui_amount_1 = ui_amount_0 * price;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n      } else if(index === 1) {\n        ui_amount_1 = value;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n        ui_amount_0 = ui_amount_1 / price;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n      } else {\n        return;\n      }\n\n      this.setState({ \n        amount_0: amount_0_bn.toString(), \n        ui_amount_0: ui_amount_0, \n        amount_1: amount_1_bn.toString(),\n        ui_amount_1: ui_amount_1,\n      });\n    } else {\n      this.setState({\n        amount_0: '0',\n        ui_amount_0: '',\n        amount_1: '0',\n        ui_amount_1: ''\n      });\n    }\n  }\n\n  // Handler for changes in amount using the percentage tools\n  handleAmountPercentageChange(index, value) {\n    const price = this.state.price;\n\n    // All arithmetic is done using BigNumber and wei\n    let ui_amount_0 = null;\n    let ui_amount_1 = null;\n    let amount_0_bn = null;\n    let amount_1_bn = null;\n    const price_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(price.toString(), 'ether'));\n    const one_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits('1'), 'ether');\n\n    if(index === 0) {\n      amount_0_bn = value;\n      amount_1_bn = amount_0_bn.mul(price_bn).div(one_bn);\n    } else if(index === 1) {\n      amount_1_bn = value;\n      amount_0_bn = amount_1_bn.mul(one_bn).div(price_bn);\n    } else {\n      return;\n    }\n\n    // Try catch to stop any type of input that is invalid with a valid response\n    try {\n      ui_amount_0 = ethers.utils.formatUnits(amount_0_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_0 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    try {\n      ui_amount_1 = ethers.utils.formatUnits(amount_1_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_1 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    this.setState({\n      amount_0: amount_0_bn.toString(),\n      ui_amount_0: ui_amount_0,\n      amount_1: amount_1_bn.toString(),\n      ui_amount_1: ui_amount_1\n    });\n  }\n\n  render() {\n    const { price, amount_0, amount_1, ui_amount_0, ui_amount_1, bignumbers, loading, success, error, sidetext } = this.state;\n    const { currencies, last_price, balances, options } = this.props;\n    \n    // Set flags that set whether a buy/sell is logically possible\n    let can_buy = false;\n    let can_sell = false;\n    \n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    const amount_0_bn = ethers.utils.bigNumberify(amount_0);\n    const amount_1_bn = ethers.utils.bigNumberify(amount_1);\n\n    if(price !== \"\" && curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    \n    if(price !== \"\" && curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Set the sidetext (text next to the button) depending on the situation context\n    let side_text = \"\";\n    if(loading) {\n      side_text = (<span className=\"LimitOrder-color\"><Loader active inline size=\"small\"/> {sidetext} </span>);\n    }\n    if(error) {\n      side_text = (<span className=\"red LimitOrder-color\">FAILED</span>);\n    }\n    if(success) {\n      side_text = (<span className=\"green LimitOrder-color\">SUCCESS</span>);\n    }\n\n    return (\n      <div className=\"LimitOrder\">\n        <Form size='tiny'>\n          <div className=\"LimitOrder-headers\">Price</div>\n          <Form.Field id=\"LimitOrder-price\">\n            <Input\n              label={{ basic: true, content: currencies[1] + \" / \" + currencies[0]  }}\n              labelPosition='right'\n              placeholder='Enter Price...'\n              value={price}\n              onChange={(e) => { this.handlePriceChange(e.target.value) }}\n              disabled={options.readOnly}\n            />\n            <span className=\"LimitOrder-currentPrice\" onClick={() => this.handlePriceChange(last_price) } >Current Market Price</span>\n          </Form.Field>\n          <hr />\n          <div className=\"LimitOrder-headers\" id=\"LimitOrder-amount-header\">Amounts</div>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[0] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_0}\n                onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[1] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_1}\n                onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n          <Button className=\"LimitOrder-button\" color='green' disabled={!can_buy || loading || options.readOnly} onClick={() => this.handleSubmit(\"BUY\")} >BUY {currencies[0]}</Button>\n          <Button className=\"LimitOrder-button\" color='red' disabled={!can_sell || loading || options.readOnly} onClick={() => this.handleSubmit(\"SELL\")} >SELL {currencies[0]}</Button>\n          {side_text}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default LimitOrder","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './marketorder.css'\n\nclass MarketOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false],\n      amounts: ['0', '0'],\n      ui_amounts: ['', ''],\n      expected_price: ['', ''],\n      expected_amount: ['0', '0'],\n      bignumbers: []\n    };\n\n    this.handleMarketBuy = this.handleMarketBuy.bind(this);\n    this.handleMarketSell = this.handleMarketSell.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores a list of BigNumber integers for arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n\n    this.setState({ bignumbers });\n  }\n\n  // Handler for Market Buy\n  async handleMarketBuy() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[1] = true;\n    error[1] = false;\n    success[1] = false;\n    this.setState({ loading , error, success });\n    \n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n    \n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[1]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_1,\n      pay_amt: amounts[1],\n      buy_gem: curr_gem_0,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the data object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      var tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"], { gasLimit: 500000, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') });\n      // Wait for transaction to finish\n      await tx.wait();\n      this.flashSuccess(1);\n    } catch (error) {\n      this.flashError(1);\n    }\n  }\n\n  // Handler for Market Sell\n  async handleMarketSell() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[0] = true;\n    error[0] = false;\n    success[0] = false;\n    this.setState({ loading , error, success });\n\n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[0]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_0,\n      pay_amt: amounts[0],\n      buy_gem: curr_gem_1,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the dta object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      const tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"], { gasLimit: 500000, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') });\n      // Wait for tx to finish\n      await tx.wait();\n      this.flashSuccess(0);\n    } catch (error) {\n      this.flashError(0);\n    }\n  }\n\n  // Handler for when a tx is successful\n  flashSuccess(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = true;\n    error[index] = false;\n    this.setState({ loading, success, error });\n    setTimeout(() => this.reset(index), 1500);\n  }\n\n  // Handler for whne a tx is failed\n  flashError(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = true;\n    this.setState({ loading, success, error });\n    setTimeout(() => {\n      let { loading, success, error } = this.state;\n      loading[index] = false;\n      success[index] = false;\n      error[index] = false;\n      this.setState({ error });\n    }, 1500);\n  }\n\n  // State reset function that completely nullifies the component state\n  reset(index) {\n    let { loading, success, error, amounts, ui_amounts } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = false;\n    amounts[index] = \"0\";\n    ui_amounts[index] = \"\";\n    this.setState({ loading, success, error, amounts, ui_amounts });\n  }\n\n  // Calculate the amount of currency that we expect to receive from the trade\n  // Index is wether currency 0 or 1 is being bought\n  async setExpectedAmount(index) {\n    // Assemble variables\n    const { amounts, expected_amount, expected_price } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    let will_receive = \"0\";\n    let giving = amounts[index];\n\n    // Depending on which currency is being received\n    if(index === 0) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_1, curr_gem_0, giving);\n    } else if(index === 1) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_0, curr_gem_1, giving);\n    }\n\n    // If the amount received/given is greater than 0 then calculate expected info using BigNumber\n    if(will_receive !== \"0\" && giving !== \"0\") {\n      will_receive = ethers.utils.bigNumberify(will_receive);\n      giving = ethers.utils.bigNumberify(giving);\n      var one = ethers.utils.bigNumberify(ethers.utils.parseUnits('1', 'ether'));\n\n      var price = one.mul(will_receive).div(giving);\n      if(index === 1) {\n        price = one.mul(giving).div(will_receive);\n      }\n      price = Math.round(ethers.utils.formatUnits(price.toString(), 'ether') * 1000) / 1000;\n\n      expected_amount[index] = will_receive;\n      expected_price[index] = price;\n    } else {\n      expected_amount[index] = \"0\";\n      expected_price[index] = \"\";\n    }\n    this.setState({ expected_amount, expected_price });\n  }\n\n  // Handler for a change in the amount of currency to be traded\n  handleAmountChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather currency balance\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    // If there is an error then replace values with empty values\n    try {\n      // Test the new amount value to see if it is whitespace and if so replace with empty values\n      if(/\\S/.test(value)) {\n        const ui_amount = value;\n\n        // Get BigNumber representation of the amount in wei\n        const amount_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount.toString(), 'ether'));\n\n        // Reassign the new amounts\n        new_amounts[index] = amount_bn.toString();\n        new_ui_amounts[index] = ui_amount.toString();\n\n        // Save the amounts\n        this.setState({ \n          amounts: new_amounts,\n          ui_amounts: new_ui_amounts\n        });\n      } else {\n        new_amounts[index] = '0';\n        new_ui_amounts[index] = '';\n      }\n    } catch(err) {\n      console.log(err);\n      new_amounts[index] = '0';\n      new_ui_amounts[index] = '';\n    }\n\n    this.setState({\n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  // Handler for changes in amount using percentage tool\n  handleAmountPercentageChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather the amount variables\n    // Initialize ui_amount to 0 to be replaced by real value in try/catch\n    const amount_bn = value;\n    let ui_amount = ethers.utils.formatUnits(\"0\", 'ether');\n    try {\n      ui_amount = ethers.utils.formatUnits(amount_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n    }\n\n    // clone amounts into new objects\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    new_amounts[index] = amount_bn.toString();\n    new_ui_amounts[index] = ui_amount.toString();\n\n    // Store new objects\n    this.setState({ \n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { amounts, ui_amounts, expected_price, bignumbers, loading, success, error } = this.state;\n    const { currencies, balances, options } = this.props;\n    \n    // Set flags if buying/selling is logically valid\n    let can_buy = false;\n    let can_sell = false;\n    \n    // Get the balances for each currency\n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    // Get the amounts for each currency input box\n    const amount_0_bn = ethers.utils.bigNumberify(amounts[0]);\n    const amount_1_bn = ethers.utils.bigNumberify(amounts[1]);\n\n    // If the balance is greater than the amount then set the proper flags\n    if(curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    if(curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Generate the side text next to the buttons\n    let side_texts = [\"\", \"\"];\n    for(let i = 0; i < 2; i++) {\n      if(loading[i]) {\n        side_texts[i] = (<span className=\"MarketOrder-color\"><Loader active inline size=\"small\"/> LOADING...</span>);\n      }\n      if(error[i]) {\n        side_texts[i] = (<span className=\"red MarketOrder-color\">FAILED</span>);\n      }\n      if(success[i]) {\n        side_texts[i] = (<span className=\"green MarketOrder-color\">SUCCESS</span>);\n      }\n    }\n\n    return (\n      <div className=\"MarketOrder\">\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"green\">BUY</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[1]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"green\">Buy</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[1] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[1]}\n                  onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='green' disabled={!can_buy || loading[1] || error[1] || options.readOnly} onClick={this.handleMarketBuy} >BUY {currencies[0]}</Button>\n            {side_texts[1]}\n          </Form>\n        </div>\n        <hr />\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"red\">SELL</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[0]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"red\">Sell</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[0] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[0]}\n                  onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(0, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='red' disabled={!can_sell || loading[0] || error[0] || options.readOnly} onClick={this.handleMarketSell} >SELL {currencies[0]}</Button>\n            {side_texts[0]}\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MarketOrder\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Table, Button } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './myorders.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyOrders extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  // Filter to the open orders that match the current account address\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n    for(let i = 0; i < orders.length; i++) {\n      if(orders[i][\"maker\"] === account) {\n        myOrders.push(orders[i]);\n      }\n    }\n    return myOrders;\n  }\n\n  // Handler to cancel an order\n  async cancelOrder(id) {\n    const { Market } = this.props.options.contracts;\n    console.log(\"CANCEL ORDER \" + id);\n    try {\n      const tx = await Market.cancel(id, { gasLimit: 500000, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') });\n      await tx.wait();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies } = this.props;\n\n    let orders_table = null;\n    let background_item = null;\n    const orders = this.getMyOrders();\n\n    // If there are no orders then render an emtpy list\n    if(orders.length === 0) {\n      background_item = (<div id=\"MyOrders-empty\">NO ORDERS</div>);\n    } else {\n      orders_table = (<Table.Body id=\"MyOrders-tableBody\">\n            {orders.map((item, index) => {\n              var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>) : (<span className=\"red MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>)\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'><Button className=\"MyOrders-button\" color='red' size='mini' inverted onClick={() => {this.cancelOrder(item[\"id\"])}}>CANCEL</Button></div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{price}</div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_0_amt\"])}</div>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_1_amt\"])}</div>\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>);\n    }\n\n    return (\n      <div className=\"MyOrders\">\n        <Table selectable striped basic celled unstackable columns={5} textAlign='left' id=\"MyOrders-table\">\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Action</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Price</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[0]}</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[1]}</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          { orders_table }\n        </Table>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyOrders\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { BarSeries, CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { CrossHairCursor, CurrentCoordinate } from \"react-stockcharts/lib/coordinates\";\nimport { OHLCTooltip, MovingAverageTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\" \nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\n\n// Import CSS Files\nimport './chart.css';\n\n// Set the appearance of the candle chart\nconst candlesAppearance = {\n  wickStroke: \"#7a8692\",\n  fill: function fill(d) {\n    return d.close > d.open ? \"rgba(0, 255, 0, 0.5)\" : \"rgba(255, 0, 0, 0.5)\";\n  },\n  widthRatio: 0.8,\n  opacity: 1,\n};\n\nclass CandleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n  \n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if there are a different number of orders being piped in\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert raw order data into the processed chart points\n  buildChartPoints(orders) {\n    let data = [];\n\n    let first_timestamp = orders[orders.length - 1]['raw_timestamp'];\n    first_timestamp = first_timestamp - (first_timestamp % (3600000/4));\n\n    let curr_candle = {\n      date: new Date(first_timestamp),\n      open: orders[orders.length-1]['price'],\n      high: orders[orders.length-1]['price'],\n      low: orders[orders.length-1]['price'],\n      close: orders[orders.length-1]['price'],\n      volume: parseFloat(ethers.utils.formatUnits(orders[orders.length-1]['curr_1'], 'ether'))\n    };\n    let end_timestamp = first_timestamp + (3600000/4);\n    for(let i = orders.length-2; i >= 0; i--) {\n      const order = orders[i];\n      if(order[\"raw_timestamp\"] < end_timestamp) {\n        curr_candle['volume'] += parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'));\n        curr_candle['close'] = order['price'];\n        if(order['price'] > curr_candle['high']) {\n          curr_candle['high'] = order['price'];\n        } else if(order['price'] < curr_candle['low']) {\n          curr_candle['low'] = order['price'];\n        }\n      } else {\n        data.push(curr_candle);\n        curr_candle = {\n          date: new Date(end_timestamp),\n          open: curr_candle['close'],\n          high: Math.max(order['price'], curr_candle['close']),\n          low: Math.min(order['price'], curr_candle['close']),\n          close: order['price'],\n          volume: parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'))\n        };\n        end_timestamp = end_timestamp + (3600000/4);\n      }\n    }\n    return data;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    var { width, ratio, orders } = this.props\n\n    var chart = <div id=\"CandleChart-loading\">Loading...</div>\n    if(orders.length > 0) {\n      var initialData = this.buildChartPoints(orders)\n      const ema10 = ema()\n        .options({\n          windowSize: 10, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema10 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema10) // Required, if not provided, log an error during calculation\n        .stroke(\"#ce4200\"); // Optional\n      const ema50 = ema()\n        .options({\n          windowSize: 50, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema50 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema50) // Required, if not provided, log an error during calculation\n        .stroke(\"blue\"); // Optional\n      const calculatedData = ema50(ema10(initialData))\n\n      const margin = { left: 50, right: 60, top: 30, bottom: 50 }\n      const height = 500\n      var gridHeight = height - margin.top - margin.bottom;\n      var gridWidth = width - margin.left - margin.right;\n      var showGrid = true;\n      var yGrid = showGrid ? { \n          innerTickSize: -1 * gridWidth,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      var xGrid = showGrid ? { \n          innerTickSize: -1 * gridHeight,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor( d => d.date )\n      const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider( calculatedData )\n      const start = xAccessor(last(data))\n      const end = xAccessor(data[Math.max(0, data.length - 100)])\n      const xExtents = [start, end]\n\n      chart = (\n        <ChartCanvas\n          height={height}\n          ratio={ratio}\n          width={width}\n          margin={margin}\n          type=\"hybrid\"\n          seriesName=\"Data\"\n          data={data}\n          xScale={xScale}\n          xAccessor={xAccessor}\n          displayXAccessor={displayXAccessor}\n          xExtents={xExtents}\n          clamp={true}\n        >\n          <Chart id={1} height={400} yExtents={[d => [d.high+3, d.low-3], ema10.accessor(), ema50.accessor()]}>\n            <YAxis axisAt=\"right\" orient=\"right\" ticks={10} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...yGrid} />\n            <CandlestickSeries {...candlesAppearance} />\n            <LineSeries yAccessor={ema10.accessor()} stroke={ema10.stroke()}/>\n            <LineSeries yAccessor={ema50.accessor()} stroke={ema50.stroke()}/>\n            <CurrentCoordinate yAccessor={ema10.accessor()} fill={ema10.stroke()} />\n            <CurrentCoordinate yAccessor={ema50.accessor()} fill={ema50.stroke()} />\n            <OHLCTooltip origin={[10, 10]} xDisplayFormat={timeFormat(\"%m-%d-%y %I:%M %p\")} textFill=\"#9aa3ad\" />\n            <MovingAverageTooltip\n              origin={[10, 25]}\n              textFill=\"#9aa3ad\"\n              options={[\n                {\n                  yAccessor: ema10.accessor(),\n                  type: \"EMA\",\n                  stroke: ema10.stroke(),\n                  windowSize: ema10.options().windowSize,\n                  echo: \"some echo here\",\n                },\n                {\n                  yAccessor: ema50.accessor(),\n                  type: \"EMA\",\n                  stroke: ema50.stroke(),\n                  windowSize: ema50.options().windowSize,\n                  echo: \"some echo here\",\n                },\n              ]}\n            />\n          </Chart>\n          <Chart id={2} origin={(w, h) => [0, h - 100]} height={100} yExtents={d => d.volume}>\n            <XAxis axisAt=\"bottom\" orient=\"bottom\" stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...xGrid} />\n            <YAxis axisAt=\"left\" orient=\"left\" ticks={5} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" tickFormat={format(\".2s\")} />\n            <BarSeries\n              yAccessor={d => d.volume}\n              fill={d => (d.close > d.open ? \"rgba(0, 255, 0, 0.2)\" : \"rgba(255, 0, 0, 0.3)\")}\n            />\n          </Chart>\n          <CrossHairCursor stroke=\"#9aa3ad\" opacity={1} />\n        </ChartCanvas>\n      )\n    }\n    return (\n      <div className=\"CandleChart\">\n        {chart}\n      </div>\n    );\n  }\n}\n\nCandleChart = fitWidth(CandleChart);\nexport default CandleChart","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, List } from 'semantic-ui-react';\nimport CandleChart from './chart/chart';\n\n// Import CSS Files\nimport './stats.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.buildStat = this.buildStat.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the orders has increased in length\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Update the stats and the document title\n  updateStats() {\n    let users = {};\n    const { orders } = this.props;\n\n    if(orders.length === 0) {\n      return {\n        num_users: '...',\n        num_buys: '...',\n        num_sells: '...',\n        buy_volume: '...',\n        sell_volume: '...',\n        last_price: '...',\n        last_type: '...'\n      };\n    }\n\n    let new_stats = {\n      num_users: 0,\n      num_buys: 0,\n      num_sells: 0,\n      buy_volume: 0.0,\n      sell_volume: 0.0,\n      last_price: 0,\n      last_type: \"BUY\"\n    };\n\n    for(let i = 0; i < orders.length; i++) {\n      const order = orders[i];\n\n      // Check if maker is in user list\n      if(!(order[\"maker\"] in users)) {\n        users[order[\"maker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if taker is in user list\n      if(!(order[\"taker\"] in users)) {\n        users[order[\"taker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if order is buy or sell and add the necessary info\n      const curr_1 = parseFloat(ethers.utils.formatUnits(order[\"curr_1\"].toString(), \"ether\"));\n      if(order[\"type\"] === \"BUY\") {\n        new_stats[\"num_buys\"] += 1;\n        new_stats[\"buy_volume\"] += curr_1;\n      } else if(order[\"type\"] === \"SELL\") {\n        new_stats[\"num_sells\"] += 1;\n        new_stats[\"sell_volume\"] += curr_1;\n      }\n    }\n\n    if(orders.length > 0) {\n      new_stats[\"last_price\"] = Math.round(orders[0][\"price\"] * 1000) / 1000;\n      new_stats[\"last_type\"] = orders[0][\"type\"];\n      new_stats[\"buy_volume\"] = Math.round(new_stats[\"buy_volume\"] * 100) / 100;\n      new_stats[\"sell_volume\"] = Math.round(new_stats[\"sell_volume\"] * 100) / 100;\n    }\n\n    return new_stats;\n  }\n\n  // Build each of the statistics given the raw stats and keys\n  buildStat(key, raw_stats) {\n    // If loading then print the loading dots\n    if(raw_stats[key] === \"...\") {\n      return <span className=\"loading_value\">{raw_stats[key]}</span>;\n    }\n\n    var color = null;\n    var value = numberWithCommas(raw_stats[key]);\n    if(key === \"buy_volume\" || key === \"sell_volume\") {\n      color = key === \"buy_volume\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]}</span></span>;\n    }\n\n    if(key === \"num_buys\" || key === \"num_sells\") {\n      color = key === \"num_buys\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()}</span>;\n    }\n\n    if(key === \"last_price\") {\n      color = raw_stats[\"last_type\"] === \"BUY\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]} / {this.props.currencies[0]}</span></span>;\n    }\n\n    return value;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, orders } = this.props;;\n\n    const keys = [\"num_users\", \"num_buys\", \"num_sells\", \"buy_volume\", \"sell_volume\", \"last_price\"];\n    let statistics = {};\n    const raw_stats = this.updateStats();\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      statistics[key] = this.buildStat(key, raw_stats);\n    }\n\n    const chart = <div id=\"Stats-chart\"><CandleChart orders={orders} currencies={currencies} /></div>;\n\n    return (\n      <div className=\"Stats\">\n        {chart}\n        <div id=\"Stats-statistics\">\n          <Grid id=\"Stats-grid\">\n            <Grid.Row>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Buys</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_buys\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Buy Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"buy_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Sells</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_sells\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Sell Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"sell_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Last Price</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"last_price\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Users</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_users\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Stats","import { ethers } from 'ethers';\n\n/** ################# HELPER FUNCTIONS ################# **/\n\n// Helper function to calculate the price of an order using BigNumber for all operations\nexport function getPrice(pay_amt, buy_amt, type) {\n\t// Convert amounts to BigNumbers\n\tpay_amt = ethers.utils.bigNumberify(pay_amt);\n\tbuy_amt = ethers.utils.bigNumberify(buy_amt);\n\n\t// If amounts are sufficiently small, just ignore and return false\n\tif(pay_amt.lte(ethers.utils.bigNumberify(\"1000\")) || buy_amt.lte(ethers.utils.bigNumberify(\"1000\"))) {\n\t\treturn false;\n\t}\n\n\tvar one = ethers.utils.bigNumberify(ethers.utils.parseUnits(\"1\", \"ether\"));\n\tvar price = 0;\n\n\t// Use the order type to decide operation for calculation and return values\n\tif(type === \"BUY\") {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(pay_amt).div(buy_amt).toString(), 'ether'));\n\t\treturn [price, buy_amt, pay_amt];\n\t} else {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(buy_amt).div(pay_amt).toString(), 'ether'));\n\t\treturn [price, pay_amt, buy_amt];\n\t}\n}\n\n// Helper function to determine the type of an order (BUY or SELL)\nfunction getType(order, currencies, curr_0_addr, curr_1_addr) {\n\t// Extract what is being bought and what is being sold\n\tvar buy_addr = order[\"buy_gem\"].toUpperCase();\n\tvar pay_addr = order[\"pay_gem\"].toUpperCase();\n\n\t// Compare to curr_0 and curr_1 to decide if this is a BUY or a SELL\n\tif(buy_addr === curr_0_addr.toUpperCase() && pay_addr === curr_1_addr.toUpperCase()) {\n\t\treturn \"SELL\";\n\t} else if(buy_addr === curr_1_addr.toUpperCase() && pay_addr === curr_0_addr.toUpperCase()) {\n\t\treturn \"BUY\";\n\t} else {\n\t\treturn null;\n\t}\n}\n\n// Helper function to convert raw orders into processed orders\nexport function eventsToOrders(events, currencies, curr_0_addr, curr_1_addr) {\n\tvar orders = [];\n\tfor(var i = 0; i < events.length; i++) {\n\t\tvar order = events[i];\n\t\tvar type = getType(order, currencies, curr_0_addr, curr_1_addr);\n\t\tvar pay_amt = order[\"give_amt\"].toString();\n\t\tvar buy_amt = order[\"take_amt\"].toString();\n\t\tvar offer = getPrice(pay_amt, buy_amt, type);\n\t\tif(offer) {\n\t\t\tvar timestamp = new Date(order[\"timestamp\"] * 1000);\n\t\t\ttimestamp = timestamp.toLocaleTimeString(undefined, {hour: 'numeric', minute: '2-digit'}) + \" \" + timestamp.toLocaleDateString(undefined, {day: 'numeric', month: 'numeric', year: '2-digit'});\n\t\t\torder = {\n\t\t\t\t\"raw_timestamp\": order[\"timestamp\"] * 1000,\n\t\t\t\t\"timestamp\": timestamp,\n\t\t\t\t\"type\": type,\n\t\t\t\t\"price\": offer[0],\n\t\t\t\t\"curr_0\": offer[1],\n\t\t\t\t\"curr_1\": offer[2],\n\t\t\t\t\"taker\": order[\"taker\"],\n\t\t\t\t\"maker\": order[\"maker\"]\n\t\t\t};\n\t\t\torders.push(order);\n\t\t}\n\t}\n\torders.reverse();\n\treturn orders;\n}\n\n// Helper function to build the hash keys for the log queries\nfunction buildHashKey(first_addr, second_addr) {\n\treturn ethers.utils.solidityKeccak256(['bytes', 'bytes'], [first_addr, second_addr]);\n}\n\n/** ################# Functions for retrieving executed orders ################# **/\n\n// Function to unsubscribe from subscription from subscribeToNewOrders(). Should run for cleanup.\nexport async function unSubscribeToMyNewOrders(account, currencies, contracts) {\n    var { Market } = contracts;\n    \n    var curr_0_addr = contracts[currencies[0]].address;\n    var curr_1_addr = contracts[currencies[1]].address;\n    \n    const hashKey01 = buildHashKey(curr_0_addr, curr_1_addr);\n    const hashKey10 = buildHashKey(curr_1_addr, curr_0_addr);\n    \n    var filter01_maker = Market.filters.LogTake(null, hashKey01, account, null, null, null);\n    var filter01_taker = Market.filters.LogTake(null, hashKey01, null, null, null, account);\n    var filter10_maker = Market.filters.LogTake(null, hashKey10, account, null, null, null);\n    var filter10_taker = Market.filters.LogTake(null, hashKey10, null, null, null, account);\n    Market.removeAllListeners(filter01_maker).removeAllListeners(filter01_taker).removeAllListeners(filter10_maker).removeAllListeners(filter10_taker);\n}\n\n// Function to unsubscribe from subscription from subscribeToNewOrders(). Should run for cleanup.\nexport async function unSubscribeToNewOrders(currencies, contracts) {\n    var { Market } = contracts;\n    \n    var curr_0_addr = contracts[currencies[0]].address;\n    var curr_1_addr = contracts[currencies[1]].address;\n    \n    const hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n    const hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n    \n    var filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n    var filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n    Market.removeAllListeners(filter1).removeAllListeners(filter2);\n}\n\nexport async function subscribeToMyNewOrders(account, currencies, contracts, addOrders) {\n\tvar { Market } = contracts;\n\n\tvar curr_0_addr = contracts[currencies[0]].address;\n\tvar curr_1_addr = contracts[currencies[1]].address;\n\n\tconst hashKey01 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst hashKey10 = buildHashKey(curr_1_addr, curr_0_addr);\n\n\tvar filter01_maker = Market.filters.LogTake(null, hashKey01, account, null, null, null);\n\tvar filter01_taker = Market.filters.LogTake(null, hashKey01, null, null, null, account);\n\tvar filter10_maker = Market.filters.LogTake(null, hashKey10, account, null, null, null);\n\tvar filter10_taker = Market.filters.LogTake(null, hashKey10, null, null, null, account);\n\tMarket.on(filter01_maker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter01_taker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter10_maker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter10_taker, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n}\n\n// Function to subscribe to receive callbacks for new orders that were executed on the given currency pair\n// addOrders is a callback function that is given an order object (outuput from eventsToOrders)\nexport async function subscribeToNewOrders(currencies, contracts, addOrders) {\n\tvar { Market } = contracts;\n\n\tvar curr_0_addr = contracts[currencies[0]].address;\n\tvar curr_1_addr = contracts[currencies[1]].address;\n\n\tconst hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n\n\tvar filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n\tvar filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n\tMarket.on(filter1, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter2, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n}","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './accountstats.css';\n\n// Import src code\nimport { getPrice } from '../../utils/orders';\nimport { numberWithCommas } from '../../utils/general';\n\n// Component that calculates and displays the account statistics for a currency market\nclass AccountStats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: {\n          \"amount_0_bought\": '...',\n          \"avg_buy_price\": '...',\n          \"amount_0_sold\": '...',\n          \"avg_sell_price\": '...',\n          \"profit\": '...'\n        }\n    };\n  }\n\n  componentDidMount() {\n    const data = this.eventsToData(this.props.orders);\n    this.setState({ data });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if more orders are added or if the sorting has changed\n    if(this.props.orders.length !== nextProps.orders.length || this.state.data !== nextState.data) {\n      if(this.props.orders.length !== nextProps.orders.length) {\n        const data = this.eventsToData(nextProps.orders);\n        this.setState({ data });\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to turn raw events into processed data for the leaderboard\n  eventsToData(events) {\n    let profiles = {};\n    for(let i = 0; i < events.length; i++) {\n      const order = events[i];\n\n      // Assemble all necessary vars\n      const maker = order[\"maker\"];\n      const taker = order[\"taker\"];\n      let buyer = null;\n      let seller = null;\n\n      // Add maker and taker into the dict if they are not present\n      if(!(maker in profiles)) {\n        profiles[maker] = this.newUserProfile(maker);\n      }\n      if(!(taker in profiles)) {\n        profiles[taker] = this.newUserProfile(taker);\n      }\n\n      // Set who the buyer and who the seller is\n      if(order[\"type\"] === \"BUY\") {\n        buyer = taker;\n        seller = maker;\n      } else {\n        buyer = maker;\n        seller = taker;\n      }\n\n      // Add to buyer and seller data dict\n      let profile_data = profiles[buyer];\n      profile_data[\"amount_1_given\"] = profile_data[\"amount_1_given\"].add(order[\"curr_1\"]);\n      profile_data[\"amount_0_received\"] = profile_data[\"amount_0_received\"].add(order[\"curr_0\"]);\n      profiles[buyer] = profile_data;\n\n      profile_data = profiles[seller];\n      profile_data[\"amount_0_given\"] = profile_data[\"amount_0_given\"].add(order[\"curr_0\"]);\n      profile_data[\"amount_1_received\"] = profile_data[\"amount_1_received\"].add(order[\"curr_1\"]);\n      profiles[seller] = profile_data;\n    }\n\n    let data = {};\n    for (const key in profiles) {\n      const avg_buy_order = getPrice(profiles[key][\"amount_1_given\"], profiles[key][\"amount_0_received\"], \"BUY\");\n      const avg_buy_price = avg_buy_order ? Math.round(avg_buy_order[0].toString() * 10) / 10 : \"N/A\";\n      const avg_sell_order = getPrice(profiles[key][\"amount_0_given\"], profiles[key][\"amount_1_received\"], \"SELL\");\n      const avg_sell_price = avg_sell_order ? Math.round(avg_sell_order[0].toString() * 10) / 10 : \"N/A\";\n      const profit = this.getProfit(avg_buy_order, avg_sell_order);\n      const data_point = {\n        \"amount_0_bought\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_received\"].toString(), 'ether') * 10) / 10,\n        \"avg_buy_price\": avg_buy_price,\n        \"amount_0_sold\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_given\"].toString(), 'ether') * 10) / 10,\n        \"avg_sell_price\": avg_sell_price,\n        \"profit\": profit\n      };\n      data[key] = data_point;\n    }\n\n    if (this.props.account in data) {\n      data = data[this.props.account];\n    } else {\n      data = {\n          \"amount_0_bought\": '...',\n          \"avg_buy_price\": '...',\n          \"amount_0_sold\": '...',\n          \"avg_sell_price\": '...',\n          \"profit\": '...'\n        };\n    }\n\n    return data;\n  }\n\n  /** ################# HANDLERS ################# **/\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function that creates an empty user profile object\n  newUserProfile(address) {\n    return {\n          \"address\": address,\n          \"amount_0_given\": ethers.utils.bigNumberify(\"0\"), // Amount weth sold\n          \"amount_1_received\": ethers.utils.bigNumberify(\"0\"), // Amount dai received for sells\n          \"amount_1_given\": ethers.utils.bigNumberify(\"0\"), // Amount dai given for buys\n          \"amount_0_received\": ethers.utils.bigNumberify(\"0\"), // Amount weth bought\n        };\n  }\n\n  // Helper function to calculate profit given average buy and sell orders\n  getProfit(avg_buy_order, avg_sell_order) {\n    if(!avg_buy_order || !avg_sell_order) {\n      return 0;\n    } else {\n      var amount_sell = avg_sell_order[1];\n      var amount_buy = avg_buy_order[1];\n      var sell_price = avg_sell_order[0];\n      var buy_price = avg_buy_order[0];\n      var min_amount = amount_buy.lt(amount_sell) ? ethers.utils.formatUnits(amount_buy.toString(), 'ether') : ethers.utils.formatUnits(amount_sell.toString(), 'ether');\n      var profit = Math.round(min_amount * (sell_price - buy_price) * 100) / 100;\n      return profit;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies } = this.props;\n    const { loading, data } = this.state;\n\n    // Background Item is in case data is loading or empty\n    let background_item = null;\n\n    if(loading) {\n      background_item = (<div id=\"AccountStats-empty\">Loading...</div>);\n    } else if(data.length === 0) {\n      background_item = (<div id=\"AccountStats-empty\">NO DATA</div>);\n    }\n    let profit_suffix = data['profit'] === '...' ? '' : <span className=\"sub_value\">{currencies[1]}</span>;\n    let bought_suffix = data['amount_0_bought'] === '...' ? '' : <span className=\"sub_value\">{currencies[0]}</span>;\n    let sold_suffix = data['amount_0_sold'] === '...' ? '' : <span className=\"sub_value\">{currencies[0]}</span>;\n    let profit_prefix = \"Profit:\";\n\n    let profit = data['profit'];\n    if (profit !== '...') {\n      if (profit > 0) {\n        profit = <span className=\"green\">{numberWithCommas(profit)} {profit_suffix}</span>;\n      } else {\n        profit_prefix = \"Loss:\";\n        profit = <span className=\"red\">{numberWithCommas(profit)} {profit_suffix}</span>;\n      }\n    }\n    return (\n      <div className=\"AccountStats\">\n        <div id=\"AccountStats-grid\">\n          <Grid>\n            <Grid.Row>\n              <Grid.Column mobile={16} tablet={4} computer={4} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">{profit_prefix}</span> {profit}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\"># Bought:</span> {numberWithCommas(data['amount_0_bought'])} {bought_suffix}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">Avg. Buy:</span> {numberWithCommas(data['avg_buy_price'])}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\"># Sold:</span> {numberWithCommas(data['amount_0_sold'])} {sold_suffix}\n              </Grid.Column>\n              <Grid.Column mobile={16} tablet={3} computer={3} textAlign=\"center\" className=\"AccountStats-grid-col\">\n                <span className=\"AccountStats-fieldName\">Avg. Sell:</span> {numberWithCommas(data['avg_sell_price'])}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default AccountStats","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, Icon } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './markethistory.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MarketHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n  }\n\n  // Only rerender if the number of orders increases\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retrive the maximum number in the order history for the color bands\n  getMax(orders) {\n    return Math.max.apply(Math, orders.slice(0, 250).map(function(o) { return o.curr_1 }));\n  }\n\n  // Function to render each row in the virtualized table\n  rowRenderer({index, key, style}) {\n    var item = this.props.orders[index];\n    \n    // Calculate the ratio of the order size vs the max order to get the color band size\n    var type = item[\"type\"];\n    var ratio = item[\"curr_1\"]/this.max_order * 100;\n    var direction = \"right\";\n    var color_0 = \"rgba(255, 0, 0, 0.2)\";\n    var color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color of the color band using the order type\n    var color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    var custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    var participants = (<div className=\"MarketHistory-participants\">\n                          <div className=\"MarketHistory-taker\"><HumanName icon_only address={item[\"taker\"]} /></div>\n                          <div className=\"MarketHistory-arrow\"><Icon size=\"large\" name=\"long arrow alternate right\" /></div>\n                          <div className=\"MarketHistory-maker\"><HumanName icon_only address={item[\"maker\"]} /></div>\n                        </div>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            {participants}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n\n  render() {\n    var { currencies, orders } = this.props;\n\n    // Update max order class variable (class var to not cause a rerender)\n    this.max_order = this.getMax(orders);\n    var background_item = null;\n\n    // Set the screen to loading if the orders are not available yet\n    if(orders.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default MarketHistory","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './leaderboard.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { getPrice } from '../../utils/orders';\nimport { numberWithCommas } from '../../utils/general';\n\n// Component that calculates and displays rankings for traders on the leaderboard\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: [],\n      direction: 'ascending',\n      column: 'profit'\n    };\n  }\n\n  componentDidMount() {\n    // Convert raw orders into the proper format and store max profit someone has made over the data range\n    const new_data = this.eventsToData(this.props.orders);\n    let max_profit = 1;\n    if(new_data.length > 0) {\n      max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n    }\n    this.setState({ max_profit, data: new_data });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if more orders are added or if the sorting has changed\n    if(this.props.orders.length !== nextProps.orders.length || this.state.data !== nextState.data || this.state.direction !== nextState.direction || this.state.column !== nextState.column) {\n      if(this.props.orders.length !== nextProps.orders.length) {\n        const new_data = this.eventsToData(nextProps.orders);\n        // Need to update the max profit to calibrate the coloring bands\n        let max_profit = 1;\n        if(new_data.length > 0) {\n          max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n        }\n        this.setState({ max_profit, data: new_data});\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to turn raw events into processed data for the leaderboard\n  eventsToData(events) {\n    let profiles = {};\n    for(let i = 0; i < events.length; i++) {\n      const order = events[i];\n\n      // Assemble all necessary vars\n      const maker = order[\"maker\"];\n      const taker = order[\"taker\"];\n      let buyer = null;\n      let seller = null;\n\n      // Add maker and taker into the dict if they are not present\n      if(!(maker in profiles)) {\n        profiles[maker] = this.newUserProfile(maker);\n      }\n      if(!(taker in profiles)) {\n        profiles[taker] = this.newUserProfile(taker);\n      }\n\n      // Set who the buyer and who the seller is\n      if(order[\"type\"] === \"BUY\") {\n        buyer = taker;\n        seller = maker;\n      } else {\n        buyer = maker;\n        seller = taker;\n      }\n\n      // Add to buyer and seller data dict\n      let profile_data = profiles[buyer];\n      profile_data[\"amount_1_given\"] = profile_data[\"amount_1_given\"].add(order[\"curr_1\"]);\n      profile_data[\"amount_0_received\"] = profile_data[\"amount_0_received\"].add(order[\"curr_0\"]);\n      profiles[buyer] = profile_data;\n\n      profile_data = profiles[seller];\n      profile_data[\"amount_0_given\"] = profile_data[\"amount_0_given\"].add(order[\"curr_0\"]);\n      profile_data[\"amount_1_received\"] = profile_data[\"amount_1_received\"].add(order[\"curr_1\"]);\n      profiles[seller] = profile_data;\n    }\n\n    let data = [];\n    for (const key in profiles) {\n      const avg_buy_order = getPrice(profiles[key][\"amount_1_given\"], profiles[key][\"amount_0_received\"], \"BUY\");\n      const avg_buy_price = avg_buy_order ? Math.round(avg_buy_order[0].toString() * 10) / 10 : \"N/A\";\n      const avg_sell_order = getPrice(profiles[key][\"amount_0_given\"], profiles[key][\"amount_1_received\"], \"SELL\");\n      const avg_sell_price = avg_sell_order ? Math.round(avg_sell_order[0].toString() * 10) / 10 : \"N/A\";\n      const profit = this.getProfit(avg_buy_order, avg_sell_order);\n      const data_point = {\n        \"user\": key,\n        \"amount_0_bought\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_received\"].toString(), 'ether') * 10) / 10,\n        \"avg_buy_price\": avg_buy_price,\n        \"amount_0_sold\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_given\"].toString(), 'ether') * 10) / 10,\n        \"avg_sell_price\": avg_sell_price,\n        \"profit\": profit\n      };\n      data.push(data_point);\n    }\n\n    data.sort(function(first, second) {\n      return second.profit - first.profit;\n    })\n\n    return data;\n  }\n\n  // Function that returns a row to be rendered in the virtualized table\n  rowRenderer({index, key, style}) {\n    const { max_profit } = this.state;\n    const { currencies, account, options } = this.props;\n    const item = this.state.data[index];\n\n    const ratio = Math.abs(item[\"profit\"])/max_profit * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(item[\"profit\"] > 0) {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    if(account === item[\"user\"]) {\n      color =  `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    let profit_color = 'grey';\n    if(item[\"profit\"] > 0) {\n      profit_color = 'green';\n    } else if(item[\"profit\"] < 0) {\n      profit_color = 'red';\n    }\n\n    return (\n      <div className=\"Leaderboard-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            <HumanName address={item[\"user\"]} currencies={currencies} options={options} />\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_bought\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_buy_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_sold\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_sell_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6}>\n            <span className={profit_color}>{numberWithCommas(item[\"profit\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[1]}</span></span>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# HANDLERS ################# **/\n\n  // Function used to handle changes in sorting by the user for the table\n  handleSort(clicked_column) {\n    const { column, data, direction } = this.state;\n\n    if(column !== clicked_column) {\n      var new_data = data.concat().sort(function(first, second) {\n                      if(first[clicked_column] === \"N/A\") {\n                        return 1;\n                      } else if(second[clicked_column] === \"N/A\") {\n                        return -1;\n                      } else {\n                        return second[clicked_column] - first[clicked_column];\n                      }\n                    })\n      this.setState({\n        column: clicked_column,\n        data: new_data,\n        direction: 'ascending'\n      });\n    } else {\n      this.setState({ \n        data: data.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function that creates an empty user profile object\n  newUserProfile(address) {\n    return {\n          \"address\": address,\n          \"amount_0_given\": ethers.utils.bigNumberify(\"0\"), // Amount weth sold\n          \"amount_1_received\": ethers.utils.bigNumberify(\"0\"), // Amount dai received for sells\n          \"amount_1_given\": ethers.utils.bigNumberify(\"0\"), // Amount dai given for buys\n          \"amount_0_received\": ethers.utils.bigNumberify(\"0\"), // Amount weth bought\n        };\n  }\n\n  // Helper function to calculate profit given average buy and sell orders\n  getProfit(avg_buy_order, avg_sell_order) {\n    if(!avg_buy_order || !avg_sell_order) {\n      return 0;\n    } else {\n      var amount_sell = avg_sell_order[1];\n      var amount_buy = avg_buy_order[1];\n      var sell_price = avg_sell_order[0];\n      var buy_price = avg_buy_order[0];\n      var min_amount = amount_buy.lt(amount_sell) ? ethers.utils.formatUnits(amount_buy.toString(), 'ether') : ethers.utils.formatUnits(amount_sell.toString(), 'ether');\n      var profit = Math.round(min_amount * (sell_price - buy_price) * 100) / 100;\n      return profit;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading, data, column, direction } = this.state;\n\n    // Background Item is in case data is loading or empty\n    let background_item = null;\n\n    if(loading) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    } else if(data.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">NO DATA</div>);\n    }\n\n    // Grab sorting symbols\n    let symbol = \"▲\";\n    if(direction === 'descending') {\n      symbol = \"▼\";\n    }\n\n    // Build header list\n    const headers = {\n      \"name\": \"Name\",\n      \"amount_0_bought\": \"# Bought\",\n      \"avg_buy_price\": \"Avg. Buy\",\n      \"amount_0_sold\": \"# Sold\",\n      \"avg_sell_price\": \"Avg. Sell\",\n      \"profit\": \"Profit\"\n    };\n    headers[column] = headers[column] + symbol;\n\n    return (\n      <div className=\"Leaderboard\">\n        <Grid id=\"Leaderboard-table-header\">\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            {headers[\"name\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_bought')} only={'computer tablet'}>\n            {headers[\"amount_0_bought\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_buy_price')} only={'computer tablet'}>\n            {headers[\"avg_buy_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_sold')} only={'computer tablet'}>\n            {headers[\"amount_0_sold\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_sell_price')} only={'computer tablet'}>\n            {headers[\"avg_sell_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6} onClick={() => this.handleSort('profit')}>\n            {headers[\"profit\"]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={data.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"Leaderboard-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default Leaderboard","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './myhistory.css';\n\n// Import src Code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n\n    this.my_orders = [];\n    this.max_order = 1;\n  }\n\n  componentDidMount() {\n    // If the orders prop is longer than 0 then set loading to false\n    if(this.props.orders.length > 0) {\n      this.setState({ loading: false });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the new state isn't loading or if the props orders has changed\n    if(this.state.loading && !nextState.loading) {\n      return true;\n    } else if(this.props.orders.length !== nextProps.orders.length) {\n      this.setState({ loading: false });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Gets the max value from the order history\n  getMax() {\n    return Math.max.apply(Math, this.my_orders.map(function(o) { return o.curr_1 }));\n  }\n\n  // Extract orders that match the current account address and return the filtered list\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n\n    for(let i = 0; i < orders.length; i++) {\n      let order = orders[i];\n      if(order[\"maker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"taker\"];\n        new_order[\"type\"] = new_order[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n        myOrders.push(new_order);\n      } else if(order[\"taker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"maker\"];\n        myOrders.push(new_order);\n      }\n    }\n    return myOrders;\n  }\n\n  // Build the HTML for each row to be rendered in the virtualized table\n  // Includes getting the color bar for each row\n  rowRenderer({index, key, style}) {\n    const item = this.my_orders[index];\n    \n    // Getting the information for the coloring ratio by dividng by the max order\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1\"]/this.max_order * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Getting the color for the color band\n    const color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    // Construct the HTML row\n    const price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            <HumanName address={item[\"participant\"]} icon_only />\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading } = this.state;\n    const { currencies } = this.props;\n\n    let background_item = null;\n    this.my_orders = this.getMyOrders();\n\n    if(loading) {\n      background_item = (<div id=\"MarketHistory-empty\">Loading...</div>);\n    } else if(this.my_orders.length === 0) {\n      background_item = (<div id=\"MarketHistory-empty\">NO ORDERS</div>);\n    } else {\n      this.max_order = this.getMax();\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={this.my_orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyHistory","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Sidebar, Segment, Icon, Input, Form, Button, Loader } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './sidebar.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass SideBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      visible: false,\n      amount: '0',\n      ui_amount: '',\n      currency_0_balance: \"0\",\n      currency_1_balance: \"0\",\n      id: null,\n      info: null,\n      owner: null,\n      bignumbers: {},\n      button_loading: false,\n      button_success: false,\n      button_error: false\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n    this.stopLoading = this.stopLoading.bind(this);\n    this.flashError = this.flashError.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n  }\n\n  // Get the balances for each of the currencies since we will need that throughout the component\n  componentDidMount() {\n    this.generateBigNumbers();\n    this.updateInfo();\n  }\n\n  // Update the information in the sidebar and recursively call itself every 3 seconds\n  async updateInfo() {\n    const { account, currencies, options } = this.props;\n    if(this.state.visible && this.state.id) {\n      const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n      const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n      const info = await options.contracts.Market.getOffer(this.state.id);\n      const owner = await options.contracts.Market.getOwner(this.state.id);\n      this.setState({ currency_0_balance, currency_1_balance, info, owner });\n    }\n    setTimeout(this.updateInfo, 3000);\n  }\n\n  // Generate BigNumber represenatation of integers for easy arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Helper function to set loading to false\n  stopLoading() {\n    this.setState({ loading: false });\n  }\n\n  // Need to update visible and the side_bar info key if a new order is passed in\n  async componentWillReceiveProps(nextProps) {\n    // Update if the new props for visibility are changed\n    if(nextProps.visible !== this.props.visible) {\n      this.setState({ visible: nextProps.visible });\n      if(nextProps.visible === false) {\n        this.setState({ info: null, owner: null, amount: '0', ui_amount: '', button_success: false, button_error: false, button_loading: false });\n      }\n    }\n    // Update if the information for the sidebar has changed\n    if(nextProps.sidebar_info !== this.props.sidebar_info) {\n      this.setState({ loading: true });\n      const info = await this.props.options.contracts.Market.getOffer(nextProps.sidebar_info[\"id\"]);\n      const owner = await this.props.options.contracts.Market.getOwner(nextProps.sidebar_info[\"id\"]);\n      this.setState({ id: nextProps.sidebar_info[\"id\"], info, owner, amount: '0', ui_amount: '' });\n      // Add artificial delay to show the new results are really updated\n      setTimeout(this.stopLoading, 50);\n    }\n  }\n\n  // Helper function to flash success on tx success\n  flashSuccess() {\n    const { toggleSidebar } = this.props;\n    this.setState({ button_success : true, button_loading: false });\n    setTimeout(toggleSidebar, 1500);\n  }\n\n  // Helper function to flash error on tx failure\n  flashError() {\n    this.setState({ button_error: true, button_loading: false });\n    setTimeout(() => this.setState({ button_error: false }), 1500);\n  }\n\n  // Most important function in the entire file since it actually interfaces\n  // and edits the blockchain.\n  async executeTrade(will_receive) {\n    const { sidebar_info } = this.props;\n\n    const id = sidebar_info[\"id\"];\n\n    // Log the inputs for the transaction so that you can always be 100% positive what is being sent\n    const inputs = {\n      \"id\": id,\n      \"will_receive\": will_receive.toString(),\n      \"will_receive_wholenums\": ethers.utils.formatUnits(will_receive.toString(), 'ether')\n    };\n    console.log(inputs);\n\n    try {\n      const tx = await this.props.options.contracts.Market.buy(id, will_receive.toString(), { gasLimit: 500000, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') });\n      this.setState({ button_loading: true });\n      await tx.wait();\n      this.flashSuccess();\n    } catch(error) {\n      this.flashError();\n    }\n  }\n\n  // Handler for when user changes the amount to be bought\n  handleUserChange(value) {\n    let internal_value = 0;\n    try{\n      // Check to see if the value is not just white space\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether').toString();\n      }\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n    this.setState({ ui_amount: value, amount: internal_value });\n  }\n\n  // Handler for when user uses percentage tool to update amount\n  handleAmountPercentageChange(value) {\n    const ui_value = ethers.utils.formatUnits(value.toString(), 'ether');\n    this.setState({ amount: value.toString(), ui_amount: ui_value });\n  }\n\n  // So we were passed in the most up to date info the older component had.\n  // However this can and will change if it was stale or other people are taking the order.\n  // This keeps the info up to date and fallsback onto the old data if an error happens.\n  getUpdatedInfo() {\n    const { info } = this.state;\n    const { sidebar_info } = this.props;\n\n    let info_obj = {};\n    // If info is empty then return null\n    if(!info) {\n      return null;\n    }\n\n    const buy_amt = info[0];\n    const pay_amt = info[2];\n\n    // Build information object depending on the types\n    if(sidebar_info[\"type\"] === \"BUY\") {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": pay_amt.toString(),\n        \"curr_1_amt\": buy_amt.toString()\n      };\n    } else {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": buy_amt.toString(),\n        \"curr_1_amt\": pay_amt.toString()\n      };\n    }\n\n    return info_obj;\n  }\n\n  // Calculate how much currency the user will receive\n  calcWillReceive() {\n    const { amount } = this.state;\n\n    // Don't forget that these are flipped from the actual smart contract docs since\n    // WE are the counterparties so buy_amt/pay_amt is flipped from expected\n    const buy_amt = ethers.utils.bigNumberify(this.state.info[0]);\n    const pay_amt = ethers.utils.bigNumberify(this.state.info[2]);\n\n    let amount_bn = ethers.utils.bigNumberify(amount);\n    try {\n      let will_receive = amount_bn.mul(buy_amt).div(pay_amt);\n      return will_receive;\n    } catch(err) {\n      return ethers.utils.bigNumberify(\"0\");\n    }\n  }\n\n  // Get the max amount possible to take from this order given the balances and offer\n  getMaxTake() {\n    const { sidebar_info } = this.props;\n    const { info, currency_0_balance, currency_1_balance } = this.state;\n\n    const pay_amt = ethers.utils.bigNumberify(info[2]);\n    const balance = sidebar_info[\"type\"] === \"BUY\" ? ethers.utils.bigNumberify(currency_0_balance) : ethers.utils.bigNumberify(currency_1_balance);\n    if(balance.lt(pay_amt)) {\n      return balance;\n    } else {\n      return pay_amt;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, amount, ui_amount, currency_0_balance, currency_1_balance, bignumbers, loading, button_loading, button_error, button_success, owner } = this.state;\n    const { currencies, toggleSidebar, sidebar_info, options } = this.props;\n\n    // Invert the type since the action do as a taker is the inverse of the action of the maker\n    const action = sidebar_info[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n    const subtitle = action === \"BUY\" ? (<span className=\"green\">{action}</span>) : (<span className=\"red\">SELL</span>);\n\n    // So we were passed in the most up to date info the older component had.\n    // However this can and will change if it was stale or other people are taking the order.\n    // This keeps the info up to date and fallsback onto the old data if an error happens.\n    const updated_info = this.getUpdatedInfo();\n    if(!updated_info || loading) {\n      return (\n        <div className=\"Side_bar\">\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n            <div id=\"Side_bar-x-container\">\n              <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n            </div>\n            <div id=\"Side_bar-title\">Take Order</div>\n            <Loader active>Loading</Loader>\n          </Sidebar>\n        </div>\n      );\n    }\n\n    // Build object that swaps values for buys and sells so that rendering is simple\n    let giving = {\n      \"currency\": null,\n      \"receive_currency\": null,\n      \"balance\": 0,\n      \"offered\": 0,\n      \"max_take\": this.getMaxTake(),\n      \"will_receive\": this.calcWillReceive(),\n      \"maker\": owner ? <HumanName address={owner} options={options} currencies={currencies} /> : \"Loading...\",\n    };\n    giving[\"ui_will_receive\"] = Math.round(ethers.utils.formatUnits(giving[\"will_receive\"].toString(), 'ether') * 1000) / 1000;\n\n    if(action === \"BUY\") {\n      giving[\"currency\"] = currencies[1];\n      giving[\"receive_currency\"] = currencies[0];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_1_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_1_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_1_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_1_amt\"], 'ether') * 1000) / 1000;\n    } else {\n      giving[\"currency\"] = currencies[0];\n      giving[\"receive_currency\"] = currencies[1];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_0_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_0_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_0_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_0_amt\"], 'ether') * 1000) / 1000;\n    }\n\n    // Adjust the text on the button if an action or error just occurred\n    var button_text = action + \" \" + currencies[0];\n    button_text = button_success ? \"SUCCESS\" : button_text;\n    button_text = button_error ? \"FAILED\" : button_text;\n\n    return (\n      <div className=\"Side_bar\">\n        <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n          <div id=\"Side_bar-x-container\">\n            <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n          </div>\n          <div id=\"Side_bar-title\">Take Order</div>\n          <div id=\"Side_bar-subtitle\">How much would you like to {subtitle}?</div>\n          \n          <div id=\"Side_bar-info\">\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Maker:</div>\n              <div className=\"Side_bar-info-content\">{giving[\"maker\"]}</div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Price:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(updated_info[\"price\"])} <span id=\"Side_bar-exchange\">{currencies[1]} / {currencies[0]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Balance {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_balance\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Offered {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_offered\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n          </div>\n\n          <Form size='tiny' id=\"Side_bar-form\">\n            <Form.Field>\n              <div>\n                <div className=\"Side_bar-info-title\">Spend {giving[\"currency\"]}:</div>\n                <Input\n                  label={{ basic: true, content: giving[\"currency\"] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amount}\n                  onChange={(e) => { this.handleUserChange(e.target.value) }}\n                  disabled={options.readOnly}\n                />\n              </div>\n            </Form.Field>\n            <Button.Group id=\"Side_bar-mini-buttons\" size='mini' basic>\n              <Button disabled={options.readOnly} onClick={ () => this.handleUserChange(\"\") } >0%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[4])) } >25%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[2])) } >50%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"]) } >100%</Button>\n            </Button.Group>\n          </Form>\n          <div className=\"Side_bar-info-item\">\n            <div className=\"Side_bar-info-title\">Will Receive</div>\n            <div className=\"Side_bar-info-content\">{giving[\"ui_will_receive\"].toString() + \" \" + giving[\"receive_currency\"]}</div>\n          </div>\n          <Button className=\"BuySell-button\" loading={button_loading} color={action === \"BUY\" ? \"green\" : \"red\"} disabled={options.readOnly || button_text !== action + \" \" + currencies[0] || giving[\"will_receive\"].lte(ethers.utils.bigNumberify(\"1000\")) || ethers.utils.bigNumberify(amount).gt(giving[\"max_take\"])} onClick={() => this.executeTrade(giving[\"will_receive\"]) }>{button_text}</Button>\n        </Sidebar>\n      </div>\n    );\n  }\n}\n\nexport default SideBar\n","import { ethers } from 'ethers';\n\n// Helper function to process raw events into order objects\nfunction processOpenOrders(rawOrders, type) {\n\tvar n = rawOrders[\"ids\"].length\n\tvar orders = []\n\tfor(var i = 0; i < n; i++) {\n\t\tif(rawOrders[\"ids\"][i].toString() !== \"0\") { // && rawOrders[\"owners\"][i] === account\n\t\t\tvar id = rawOrders[\"ids\"][i].toString()\n\t\t\tvar maker = rawOrders[\"owners\"][i]\n\t\t\tvar pay_amount = ethers.utils.formatUnits(rawOrders[\"payAmts\"][i].toString(), 'ether')\n\t\t\tvar buy_amount = ethers.utils.formatUnits(rawOrders[\"buyAmts\"][i].toString(), 'ether') \n\t\t\tvar price = 0\n\t\t\tvar order = {}\n\t\t\tif(type === \"BUY\") {\n\t\t\t\tprice = Math.round(pay_amount / buy_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": buy_amount,\n\t\t\t\t\t\"curr_1_amt\": pay_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprice = Math.round(buy_amount / pay_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": pay_amount,\n\t\t\t\t\t\"curr_1_amt\": buy_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t}\n\t\t\torders.push(order)\n\t\t}\n\t}\n\treturn orders\n}\n\n// Returns the trimmed length of the list if the 0 padding was removed from the end\nfunction getTrueLength(list) {\n\treturn list.filter((item) => {\n\t\treturn item.toNumber() !== 0\n\t}).length\n}\n\n// Trims all the 0 padding away from the end of the rawOrders payload\nfunction trimNulls(rawOrders) {\n\tconst trimLength = getTrueLength(rawOrders[\"ids\"])\n\treturn {\n\t\t\"ids\": rawOrders[\"ids\"].slice(0, trimLength),\n\t\t\"payAmts\": rawOrders[\"payAmts\"].slice(0, trimLength),\n\t\t\"buyAmts\": rawOrders[\"buyAmts\"].slice(0, trimLength),\n\t\t\"owners\": rawOrders[\"owners\"].slice(0, trimLength),\n\t\t\"timestamps\": rawOrders[\"timestamps\"].slice(0, trimLength),\n\t}\n}\n\n// Function that gets a list of open orders for a pair of currencies and a type (BUY or SELL)\nexport async function getOpenOrders(type, currencies, contracts) {\n\tconst { Market } = contracts;\n\n\tif(currencies.length === 2) {\n\t\tconst token_addr_0 = contracts[currencies[0]].address;\n\t\tconst token_addr_1 = contracts[currencies[1]].address;\n\n\t\tlet pay_token = null;\n\t\tlet buy_token = null;\n\n\t\tif(type === \"BUY\") {\n\t\t\tpay_token = token_addr_1;\n\t\t\tbuy_token = token_addr_0;\n\t\t} else {\n\t\t\tpay_token = token_addr_0;\n\t\t\tbuy_token = token_addr_1;\n\t\t}\n\n\t\tlet allRawOrders = await contracts.SupportMethods.getOffers(Market.address, pay_token, buy_token);\n\t\tlet newOrders = allRawOrders[\"ids\"].length\n\t\twhile (newOrders !== 0) {\n\t\t\tlet offerId = await contracts.Market.getWorseOffer(allRawOrders[\"ids\"][allRawOrders[\"ids\"].length - 1])\n\t\t\tlet rawOrders = await contracts.SupportMethods[\"getOffers(address,uint256)\"](Market.address, offerId)\n\t\t\trawOrders = trimNulls(rawOrders)\n\t\t\tnewOrders = rawOrders[\"ids\"].length\n\t\t\tallRawOrders[\"ids\"] = allRawOrders[\"ids\"].concat(rawOrders[\"ids\"]);\n\t\t\tallRawOrders[\"payAmts\"] = allRawOrders[\"payAmts\"].concat(rawOrders[\"payAmts\"]);\n\t\t\tallRawOrders[\"buyAmts\"] = allRawOrders[\"buyAmts\"].concat(rawOrders[\"buyAmts\"]);\n\t\t\tallRawOrders[\"owners\"] = allRawOrders[\"owners\"].concat(rawOrders[\"owners\"]);\n\t\t\tallRawOrders[\"timestamps\"] = allRawOrders[\"timestamps\"].concat(rawOrders[\"timestamps\"]);\n\t\t}\n\t\tlet orders = [];\n\t\tif(allRawOrders) {\n\t\t\torders = processOpenOrders(allRawOrders, type);\n\t\t}\n\t\treturn orders;\n\t}\n\n\treturn [];\n}","// Import Major dependencies\nimport React, { Component } from 'react';\nimport { Grid, Tab, Responsive } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './market.css';\n\n// Import src code\nimport OrderListV2 from './orderlistV2/orderlistV2';\nimport LimitOrder from './limitorder/limitorder';\nimport MarketOrder from './marketorder/marketorder';\nimport MyOrders from './myorders/myorders';\nimport Stats from './stats/stats';\nimport AccountStats from './accountstats/accountstats';\nimport MarketHistory from './markethistory/markethistory';\nimport Leaderboard from './leaderboard/leaderboard';\nimport MyHistory from './myhistory/myhistory';\nimport SideBar from './sidebar/sidebar';\n\n// Import orderbook read functions\nimport { subscribeToNewOrders, subscribeToMyNewOrders, unSubscribeToNewOrders, unSubscribeToMyNewOrders } from '../utils/orders';\nimport { getOpenOrders } from '../utils/openorders';\n\n// eslint-disable-next-line\nimport myWorker from '../../workers/orders.worker';\n\nconst config = require(\"./../../config\");\n\nclass Market extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      account: \"\",\n      sidebar_info: {\n        \"price\": 0,\n        \"curr_0_amt\": 0,\n        \"curr_1_amt\": 0,\n        \"id\": \"\",\n        \"type\": \"\"\n      },\n      past_orders: [],\n      my_past_orders: [],\n      open_buy_orders: [],\n      open_sell_orders: [],\n      balances: ['0', '0'],\n      timers: [null, null],\n      num_order_calls: 0,\n      num_my_order_calls: 0,\n      logged_latest_block: 0,\n      done_loading: false,\n      done_loading_my_orders: false\n    };\n\n    this.updateBalances = this.updateBalances.bind(this);\n    this.updateOpenOrders = this.updateOpenOrders.bind(this);\n    this.pastOrderWorker = new myWorker();\n  }\n\n  async componentDidMount() {\n    // Retrieve starting data and subscribe to future live feeds\n    const { currencies, options } = this.props;\n    // Store account in state for convenience\n    let account = await options.signer.getAddress();\n\n    this.setState({ logged_latest_block: await options.provider.getBlockNumber() }, () => {\n      // Get past orders for 5 years (5 * 5760) in a webworker thread\n      this.pastOrderWorker.addEventListener('message', (event) => {\n        let type = event.data.type;\n        let payload = event.data.payload;\n\n        if (type === \"pastOrders\") {\n          this.processNewBatchPastOrders(payload);\n        } else if(type === \"myPastOrders\") {\n          this.processNewBatchMyPastOrders(payload);\n        }\n      });\n      \n      this.pastOrderWorker.postMessage({\n        type: \"pastOrders\",\n        currencies: currencies,\n        toBlock: this.state.logged_latest_block,\n        numBlocks: 720 // 5760 / 4\n      });\n\n      this.pastOrderWorker.postMessage({\n        type: \"myPastOrders\",\n        account: account,\n        currencies: currencies,\n        toBlock: this.state.logged_latest_block,\n        numBlocks: Math.ceil((this.state.logged_latest_block - parseInt(config[\"market\"][\"main\"][\"blockNumber\"])) / 10)\n      });\n    });\n    \n    this.setState({ account });\n    \n    // Start polls for open orders and balances\n    this.updateOpenOrders();\n    this.updateBalances();\n  }\n\n  // Cleaning up timers and unsubscribing from live feeds\n  componentWillUnmount() {\n    for(let i = 0; i < this.state.timers.length; i++) {\n      if(this.state.timers[i] !== null) {\n        clearTimeout(this.state.timers[i]);\n      }\n    }\n\n    const { options, currencies } = this.props;\n    unSubscribeToNewOrders(currencies, options.contracts);\n    unSubscribeToMyNewOrders(this.state.account, currencies, options.contracts);\n  }\n\n  async processNewBatchMyPastOrders(my_past_orders) {\n    const { currencies, options } = this.props;\n\n    let account = await options.signer.getAddress();\n\n    if (this.state.num_my_order_calls === 0) {\n      subscribeToMyNewOrders(this.state.account, currencies, options.contracts, this.addMyOrders);\n    } else {\n      my_past_orders = this.state.my_past_orders.concat(my_past_orders);\n    }\n    this.setState({ my_past_orders });\n\n    this.setState({ num_my_order_calls: this.state.num_my_order_calls + 1 }, () => {\n      if (this.state.num_my_order_calls < 10) {\n        let numBlocks  = Math.ceil((this.state.logged_latest_block - parseInt(config[\"market\"][\"main\"][\"blockNumber\"])) / 10)\n        let toBlock = this.state.logged_latest_block - numBlocks * this.state.num_my_order_calls;\n        this.pastOrderWorker.postMessage({\n          type: \"myPastOrders\",\n          account: account,\n          currencies: currencies,\n          toBlock: toBlock,\n          numBlocks: numBlocks\n        });      \n      } else {\n        this.setState({ done_loading_my_orders: true })\n      }\n    })\n  }\n\n  async processNewBatchPastOrders(past_orders) {\n    const { currencies, options } = this.props;\n    if (this.state.num_order_calls === 0) {\n      this.setDocTitle(past_orders[0]);\n      subscribeToNewOrders(currencies, options.contracts, this.addOrders);\n    } else {\n      past_orders = this.state.past_orders.concat(past_orders);\n    }\n    this.setState({ past_orders });\n\n    this.setState({ num_order_calls: this.state.num_order_calls + 1 }, () => {\n      if (this.state.num_order_calls < 40) {\n        let toBlock = this.state.logged_latest_block - 720*this.state.num_order_calls\n        this.pastOrderWorker.postMessage({\n          currencies: currencies,\n          toBlock: toBlock,\n          numBlocks: 720\n        });\n      } else {\n        this.setState({ done_loading: true })\n      }\n    });\n  }\n\n  /** ################# POLLING FUNCTIONS ################# **/\n\n  // Function to periodically update the balances in the state from the blockchain\n  async updateBalances() {\n    const { options, currencies } = this.props;\n    const { account } = this.state;\n\n    try {\n      if(account !== \"\") {\n        console.log(\"Updating Balances...\")\n        const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n        const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n        const balances = [currency_0_balance, currency_1_balance];\n        this.setState({ balances });\n      }\n    } catch(err) {\n      console.log(\"Error Updating Balance!: \" + err);\n    } finally {\n      // Set timer to recall same function after 3 seconds and store the timer in state\n      // for cleanup\n      const timer = setTimeout(this.updateBalances, 3000);\n      let timers = this.state.timers;\n      timers[0] = timer;\n      this.setState({ timers });\n    }\n  }\n\n  // Function to periodically update the list of open orders from the blockchain\n  async updateOpenOrders() {\n    try {\n      console.log(\"Updating Open Orders...\");\n      const [open_buy_orders, open_sell_orders] = await Promise.all([\n                                                        getOpenOrders(\"BUY\", this.props.currencies, this.props.options.contracts), \n                                                        getOpenOrders(\"SELL\", this.props.currencies, this.props.options.contracts)]);\n      this.setState({ open_buy_orders, open_sell_orders });\n    } finally {\n      // Set timer to recall same function after 5 seconds and store the timer in state\n      // for cleanup\n      const timer = setTimeout(this.updateOpenOrders, 7500);\n      let timers =  this.state.timers;\n      timers[1] = timer;\n      this.setState({ timers });\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function used as a callback function for the subscription function\n  addOrders = (orders) => {\n    if(orders.length > 0) {\n      this.setDocTitle(orders[0]);\n    }\n    this.setState({ past_orders: orders.concat(this.state.past_orders) });\n  }\n\n  addMyOrders = (orders) => {\n    this.setState({ my_past_orders: orders.concat(this.state.my_past_orders) });\n  }\n\n  // Function to set the order information for the sidebar and sets it to visible\n  setSidebar = (info) => {\n    this.setState({ sidebar_info: info, visible: true });\n  }\n\n  // Function to toggle the visibility of the order sidebar\n  toggleSidebar = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  // Function to build the title of the Market page if valid currencies are selected\n  buildTitle() {\n    const { currencies } = this.props;\n    let title = \"Market: \";\n    title = currencies.length === 2 ? title + currencies[0] + \"/\" + currencies[1] : title;\n    return title;\n  }\n\n  setDocTitle(last_order) {\n    let symbol = \"▲\";\n    if(last_order[\"type\"] === \"SELL\") {\n      symbol = \"▼\";\n    }\n    const price = Math.round(last_order[\"price\"] * 1000) / 1000;\n    document.title = price + \" \" + symbol + \" \" + this.props.currencies[1] + \"/\" + this.props.currencies[0];\n\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, sidebar_info, account, past_orders, my_past_orders, balances, open_buy_orders, open_sell_orders, done_loading, done_loading_my_orders } = this.state;\n    const { currencies, options } = this.props;\n\n    // Build the title\n    const title = this.buildTitle();\n\n    // Concat buy and sell orders and sort to create an All Orders book\n    const all_open_orders = open_buy_orders.concat(open_sell_orders);\n    all_open_orders.sort(function(a, b) { return parseInt(a[3]) > parseInt(b[3]) ? 1 : -1 });\n\n    // Get the last order in the order book\n    const last_order = past_orders.length > 0 ? past_orders[0] : \"\";\n\n    // Create the panels for the Activity Pane Tabs\n    let activity_panes = [\n      { menuItem: 'Market History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketHistory currencies={currencies} options={options} orders={done_loading ? past_orders : []} /></Tab.Pane> },\n      { menuItem: '5-D Leaderboard', render: () => <Tab.Pane className=\"Market-tab-pane\"><Leaderboard currencies={currencies} account={account} options={options} orders={done_loading ? past_orders : []} /></Tab.Pane> },\n    ];\n\n    // If in readOnly mode then add more panes for account specific information\n    if(!options.readOnly) {\n      const logged_in_panes = [\n        { menuItem: 'Open Orders', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyOrders currencies={currencies} options={options} orders={all_open_orders} account={account} /></Tab.Pane> },\n        { menuItem: 'My History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyHistory currencies={currencies} options={options} orders={my_past_orders} account={account} /></Tab.Pane> },\n      ];\n      activity_panes = logged_in_panes.concat(activity_panes);\n    }\n\n    // Create the panels for the Order Pane Tabs\n    const buy_panes = [\n      { menuItem: 'Limit Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><LimitOrder currencies={currencies} options={options} last_price={last_order[\"price\"]} balances={balances} /></Tab.Pane> },\n      { menuItem: 'Market Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketOrder currencies={currencies} options={options} balances={balances} /></Tab.Pane> }\n    ];\n\n    return (\n      <div className=\"Market\">\n        <SideBar currencies={currencies} toggleSidebar={this.toggleSidebar} sidebar_info={sidebar_info} visible={visible} account={account} options={options} />\n        <div id=\"Market-title\"><span className=\"Market-h1\">{title}</span></div>\n        <div className=\"Market-headers\">5-Day Market Stats</div>\n        <div id=\"Market-stats\"><Stats currencies={currencies} options={options} orders={done_loading ? past_orders : [] } /></div>\n\n        <Grid divided id=\"Market-orderlists\">\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Center</div>\n            <div id=\"Market-buysell\">\n              <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={buy_panes} />\n            </div>\n          </Grid.Column>\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Book</div>\n            <OrderListV2 currencies={currencies} account={account} options={options} last_order={last_order} buy_orders={open_buy_orders} sell_orders={open_sell_orders} setSidebar={this.setSidebar} />\n          </Grid.Column>\n        </Grid>\n\n        <div className=\"Market-headers\">Activity Center</div>\n        <div id=\"Market-activity-pane\">\n          <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes} />\n          </Responsive>\n          <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes.slice(0,3)} />\n          </Responsive>\n        </div>\n\n        <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n          <div id=\"Market-leaderboard-pane\">\n            <div className=\"Market-headers\">Leaderboard</div>\n            <Leaderboard currencies={currencies} account={account} options={options} orders={done_loading ? past_orders : []} />\n          </div>\n        </Responsive>\n\n        <div id=\"Market-account-stats\">\n          <div className=\"Market-headers\">All Time Account Stats</div>\n          <AccountStats currencies={currencies} orders={done_loading_my_orders ? my_past_orders : []} account={account} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Market","import React, { Component } from 'react';\nimport { Transition } from 'semantic-ui-react';\nimport './home.css';\n\nclass Home extends Component {\n  // Simple Home landing static page.\n  render() {\n    return (\n      <div id=\"Home\">\n        <Transition transitionOnMount={true} animation='fade up' duration={1500}>\n          <div id=\"Home-title\">\n            OasisX\n          </div>\n        </Transition>\n        <Transition transitionOnMount={true} animation='fade up' duration={3500}>\n          <div id=\"Home-subtitle\">\n            The fastest UI for Oasis.\n          </div>\n        </Transition>\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Input, Button } from 'semantic-ui-react'\nimport './login.css'\nimport HumanName from '../utils/humanname/humanname'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: \"\",\n      phrase: \"\",\n      password: \"\",\n      redirect: false,\n      saved_wallets: {},\n      loading: false\n    }\n\n    this.handleRedirect = this.handleRedirect.bind(this)\n  }\n\n  componentDidMount() {\n    var saved_wallets = this.getSavedAccounts()\n    this.setState({ saved_wallets })\n  }\n\n  handleFieldChange(name, value) {\n    this.setState({ [name]: value })\n  }\n\n  handleRedirect() {\n    this.setState({ redirect: true, loading: false })\n  }\n\n  getSavedAccounts() {\n    var localStorage = window.localStorage\n    if(localStorage.getItem(\"encrypted_wallets\")) {\n      var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n      return stored_wallets\n    }\n    return {}\n  }\n\n  async handleLogin() {\n    var { phrase, password, selected } = this.state\n    var { options } = this.props\n\n    this.setState({ loading: true })\n\n    if(selected === \"\" && phrase !== \"\") {\n      options.handleLogin(phrase, password)\n    } else if(selected !== \"\") {\n      await options.handleReLogin(selected, this.state.saved_wallets[selected], password)\n    } else {\n      console.log(\"ERROR: No account specified\")\n    }\n\n    this.setState({ phrase: \"\", password: \"\", selected: \"\" })\n    setTimeout(this.handleRedirect, 1000)\n  }\n\n  render() {\n    var { phrase, password, redirect, saved_wallets, selected, loading } = this.state\n    var { options } = this.props\n\n    if(redirect) {\n      return <Redirect to=\"/\" />\n    }\n\n    var wallet_list = Object.keys(saved_wallets).map((key) => {\n      var active = selected === key ? true : false\n      var classes = active ? 'Login-option Login-highlighted' : 'Login-option'\n      var field_change = active ? \"\" : key\n      field_change = loading ? this.state.selected : field_change\n      return <div key={key} className={classes} onClick={() => this.handleFieldChange(\"selected\", field_change) } ><HumanName address={key} inactive_link /></div>\n    })\n\n    return (\n      <div id=\"Login\">\n        <div className=\"LimitOrder-headers\">Login</div>\n        <div id=\"Login-wallets\">\n          {wallet_list}\n        </div>\n        <br />\n        <Input\n          label={{ content: \"Mneumonic Phrase\" }}\n          labelPosition='left'\n          placeholder='Enter Phrase...'\n          value={phrase}\n          onChange={(e) => { this.handleFieldChange(\"phrase\", e.target.value) }}\n          disabled={!options.readOnly || selected !== \"\" || loading}\n          className=\"Login-input\"\n          fluid\n        />\n        <Input\n          label={{ content: \"Password\" }}\n          labelPosition='left'\n          placeholder='Enter STRONG Password...'\n          value={password}\n          onChange={(e) => { this.handleFieldChange(\"password\", e.target.value) }}\n          disabled={!options.readOnly || loading}\n          className=\"Login-input\"\n          type=\"password\"\n          fluid\n        />\n        <br />\n        <Button id=\"Login-submit\" color='green' disabled={!options.readOnly || password === \"\" || (phrase === \"\" && selected === \"\")} loading={loading} onClick={() => this.handleLogin()} >Login</Button>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button } from 'semantic-ui-react'\n\nimport './wrapstation.css'\n\nclass WrapStation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      amount_wrap: '0',\n      ui_amount_wrap: '',\n      amount_unwrap: '0',\n      ui_amount_unwrap: '',\n      bignumbers: {},\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false]\n    }\n\n    this.flashSuccess = this.flashSuccess.bind(this)\n    this.flashError = this.flashError.bind(this)\n  }\n\n  componentDidMount() {\n    var bignumbers = {}\n    for(var i = 0; i <= 10; i++) {\n      var key = i\n      bignumbers[key] = ethers.utils.bigNumberify(key)\n    }\n\n    this.setState({ bignumbers })\n  }\n\n  handlePercentUpdate(name, value) {\n    var ui_value = ethers.utils.formatUnits(value.toString(), 'ether')\n    if(name === \"amount_wrap\") {\n      this.setState({ amount_wrap: value, ui_amount_wrap: ui_value })\n    } else if(name === \"amount_unwrap\") {\n      this.setState({ amount_unwrap: value, ui_amount_unwrap: ui_value })\n    } else {\n      return\n    }\n  }\n\n  handleUserUpdate(name, value) {\n    var internal_value = 0\n    try{\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether')\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n\n    if(name === \"ui_amount_wrap\") {\n      this.setState({ ui_amount_wrap: value, amount_wrap: internal_value })\n    } else if(name === \"ui_amount_unwrap\") {\n      this.setState({ ui_amount_unwrap: value, amount_unwrap: internal_value })\n    } else {\n      return\n    }\n  }\n\n\n  flashSuccess(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = true\n    error[index] = false\n    this.setState({ loading, success, error })\n    setTimeout(() => this.reset(index), 1500)\n  }\n\n  flashError(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = true\n    this.setState({ loading, success, error })\n    setTimeout(() => {\n      var { loading, success, error } = this.state\n      loading[index] = false\n      success[index] = false\n      error[index] = false\n      this.setState({ error })\n    }, 1500)\n  }\n\n  reset(index) {\n    var { loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = false\n    if(index === 0) {\n      amount_wrap = '0'\n      ui_amount_wrap = ''\n    }\n    if(index === 1) {\n      amount_unwrap = '0'\n      ui_amount_unwrap = ''\n    }\n    this.setState({ loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap })\n  }\n\n  onWrap = async () => {\n    // Grab the wrap function from the contract instance and the account and amount we want to execute it with\n    const deposit = this.props.options.contracts.WETH.deposit\n    var amount = this.state.amount_wrap\n\n    // Need to check if the amount value is an empty string/undefined/null and that it's greater than 0\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[0] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO WRAPPER...\")\n      try {\n        var tx = await deposit({value: amount, gasPrice: ethers.utils.parseUnits('10.0', 'gwei') })\n        await tx.wait()\n        this.flashSuccess(0)\n      } catch (error) {\n        this.flashError(0)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  onUnwrap = async () => {\n    const withdraw = this.props.options.contracts.WETH.withdraw\n    var amount = this.state.amount_unwrap\n\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[1] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO UNWRAPPER...\")\n      try {\n        var tx = await withdraw(amount.toString(), { gasPrice: ethers.utils.parseUnits('10.0', 'gwei') })\n        await tx.wait()\n        this.flashSuccess(1)\n      } catch (error) {\n        this.flashError(1)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  render() {\n    var { weth_balance, eth_balance, options } = this.props\n    var { ui_amount_wrap, ui_amount_unwrap, bignumbers, loading, success, error } = this.state\n\n    // Convert to BigNumbers since they will have potential math done on them (risk of overflow/underflow)\n    eth_balance = ethers.utils.bigNumberify(eth_balance)\n    weth_balance = ethers.utils.bigNumberify(weth_balance)\n\n    var button_text = [\"WRAP\", \"UNWRAP\"]\n    for(var i = 0; i < button_text.length; i++) {\n      if(success[i]) {\n        button_text[i] = \"SUCCESS\"\n      }\n      if(error[i]) {\n        button_text[i] = \"FAILED\"\n      }\n    }\n\n    return (\n      <div className=\"WrapStation\">\n        <div id=\"WrapStation-title\">Wrap / Unwrap</div>\n        <Form onSubmit={this.handleSubmit} size='tiny' id=\"WrapStation-form\">\n          <div className=\"WrapStation-headers\">Wrap <span id=\"WrapStation-warning\"><span className=\"red\">WARNING:</span> DO NOT WRAP ALL YOUR ETHER</span></div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={11}>\n              <Input\n                label={{ basic: true, content: \"ETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount ETH...'\n                value={ui_amount_wrap}\n                disabled={ loading[0] || error[0] || success[0] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_wrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[0] || error[0] || success[0] || options.readOnly || ui_amount_wrap === \"\" } loading={loading[0]} width={4} className=\"WrapStation-button\" color={error[0] ? 'red' : 'green'} size='small' onClick={ () => this.onWrap() } >{button_text[0]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_wrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[9]).div(bignumbers[10])) } >90%</Button>\n          </Button.Group>\n          <div className=\"WrapStation-headers\">Unwrap</div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={10}>\n              <Input\n                label={{ basic: true, content: \"WETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount WETH...'\n                value={ui_amount_unwrap}\n                disabled={ loading[1] || error[1] || success[1] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_unwrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[1] || error[1] || success[1] || options.readOnly || ui_amount_unwrap === \"\" } loading={loading[1]} width={4} className=\"WrapStation-button\" color={error[1] ? 'red' : 'green'} size='small' onClick={ () => this.onUnwrap() } >{button_text[1]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_unwrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance) } >100%</Button>\n          </Button.Group>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default WrapStation\n","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { ethers } from 'ethers';\nimport { Header, Table, Checkbox, Icon, Button } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './infobar.css'\n\n// Import src code\nimport WrapStation from './wrapstation/wrapstation'\nimport HumanName from '../utils/humanname/humanname'\n\n// Set up constants\nconst MAX_VAL = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\";\n\n// Class that controls the side information bar that contains the account balances\n// and the wrapping/unwrapping widget.\nclass Infobar extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      currencies: {\n        \"WETH\": { balance: 0, approved: 0 },\n        \"DAI\": { balance: 0, approved: 0 },\n        \"MKR\": { balance: 0, approved: 0 },\n        \"ETH\": { balance: 0, approved: 0  }\n      },\n      account: \"\"\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  componentDidMount() {\n    // Kick off the update timeout loop\n    this.updateInfo();\n  }\n\n  // Timed recursive function that periodically updates the information from the blockchain.\n  async updateInfo() {\n    const { options } = this.props;\n\n    try {\n      // If the page is not readOnly then get balances for the active account.\n      if(!options.readOnly) {\n        console.log(\"Updating Sidebar Balances...\");\n        const account = await options.signer.getAddress();\n        const market_address = options.contracts.Market.address;\n\n        // Retrieve the balances and approvals\n        const [weth_balance, dai_balance, mkr_balance] = await this.getBalances(account);\n        const [weth_approval, dai_approval, mkr_approval] = await this.getApprovals(account, market_address);\n        const eth_balance = await options.provider.getBalance(account);\n\n        // Create and store currencies object\n        var currencies = {\n          \"WETH\": { balance: weth_balance.toString(), approved: weth_approval.toString() },\n          \"DAI\": { balance: dai_balance.toString(), approved: dai_approval.toString() },\n          \"MKR\": { balance: mkr_balance.toString(), approved: mkr_approval.toString() },\n          \"ETH\": { balance: eth_balance.toString(), approved: MAX_VAL  }\n        };\n        this.setState({ currencies, account });\n      }\n    } catch (err) {\n      console.log(\"Error Getting Sidebar Balalnces!: \" + err);\n    } finally {\n      // Call the same function after timeout of 3 seconds\n      setTimeout(this.updateInfo, 3000);\n    }\n  }\n\n  /** ################# BLOCKCHAIN WRITE FUNCTIONS ################# **/\n\n  // Approves the market contract to use a given amount of a given currency.\n  async approveCurrencyForAmount(currency, amount) {\n    var { options } = this.props\n    \n    let market_address = options.contracts.Market.address\n\n    if(currency in options.contracts) {\n      var contract = options.contracts[currency]\n      await contract.approve(market_address, amount)\n    }\n  }\n\n  // Approves a MAX_VAL amount of a given currency for the market contract.\n  approveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, MAX_VAL)\n  }\n\n  // Approves a 0 amount of a given currency for the market contract.\n  unapproveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, \"0\")\n  }\n\n  // Toggles between approving and unapproving a currency.\n  toggleApproval(currency, current_approval) {\n    let new_approval = !current_approval\n    if(new_approval) {\n      this.approveCurrency(currency)\n    } else {\n      this.unapproveCurrency(currency)\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to get balances for all the currencies for the given account.\n  async getBalances(account) {\n    const { options } = this.props;\n    const weth_promise = options.contracts.WETH.balanceOf(account);\n    const dai_promise = options.contracts.DAI.balanceOf(account);\n    const mkr_promise = options.contracts.MKR.balanceOf(account);\n    return Promise.all([weth_promise, dai_promise, mkr_promise]);\n  }\n\n  // Helper function to get approvals for all the currencies in this market for the given account.\n  async getApprovals(account, market_address) {\n    const { options } = this.props;\n    const weth_promise = await options.contracts.WETH.allowance(account, market_address);\n    const dai_promise = await options.contracts.DAI.allowance(account, market_address);\n    const mkr_promise = await options.contracts.MKR.allowance(account, market_address);\n    return Promise.all([weth_promise, dai_promise, mkr_promise])\n  }\n\n  // Helper function that gets the UI balance, meaning it is in Ethers (not Gwei) and Rounded to the nearest 1000ths place.\n  // If there is a problem in the value then the value is a Error string.\n  getUIBalance(raw_balance) {\n    let UI_balance = raw_balance\n    if(raw_balance != null) {\n      UI_balance = Math.round(ethers.utils.formatUnits(raw_balance.toString(), 'ether') * 1000) / 1000\n    } else {\n      UI_balance = \"Error...\"\n    }\n    return UI_balance    \n  }\n\n  // Helper function that gets the toggle value for the allowance for a given balance/allowance pair\n  getUIAllowance(raw_balance, raw_allowance) {\n    let UI_allowance = false\n    raw_allowance = ethers.utils.bigNumberify(raw_allowance)\n    let balance = ethers.utils.bigNumberify(raw_balance)\n    if(raw_allowance.gt(balance)) {\n      UI_allowance = true\n    } else {\n      UI_allowance = false\n    }\n    return UI_allowance\n  }\n\n  // Helper function to create object that is used for easy rendering.\n  buildRenderList() {\n    const { currencies } = this.state;\n    const renderList = Object.keys(currencies).map((key) => {\n      let raw_balance = currencies[key][\"balance\"];\n      let raw_allowance = currencies[key][\"approved\"];\n      return {\n        name: key,\n        balance: this.getUIBalance(raw_balance),\n        approved: this.getUIAllowance(raw_balance, raw_allowance)\n      };\n    })\n    return renderList;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, account } = this.state\n    const { padded, closeSidebar, options } = this.props\n    const currenciesInformation = this.buildRenderList();\n\n    // Display a X icon if the user is on mobile (indicated b padded).\n    var x_icon = <Icon name=\"close\" id=\"Infobar-x\" size=\"large\" onClick={closeSidebar} />\n    if(padded) {\n      x_icon = null\n    }\n\n    // Retrieve the username or Login button if readOnly is true.\n    var username = <Button primary as={Link} to={'/login'} fluid onClick={closeSidebar} >Login</Button>\n    if(!options.readOnly) {\n      username = <HumanName address={account} />\n    }\n\n    return (\n      <div id='Infobar'>\n        {/* Insert the account information bar */}\n        <div className='Infobar-header'>{username}{x_icon}</div>\n        \n        {/* Insert the Table of Balances/Approvals */}\n        <Table basic='very' padded={\"very\"} striped unstackable id=\"Infobar-table\">\n          <Table.Header id=\"Infobar-table-header\">\n            <Table.Row>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Token</Header>\n              </Table.Cell>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Balance</Header>\n              </Table.Cell>\n              <Table.Cell>\n                <Header className='Infobar-table-entry' textAlign='left'>Approved</Header>\n              </Table.Cell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {/* Loop and render each currency's info */}\n            {currenciesInformation.map((currency, index) => {\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.name}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.balance}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <Checkbox toggle disabled={currency.name === \"ETH\" || options.readOnly} checked={currency.approved} onClick={ () => this.toggleApproval(currency.name, currency.approved) } />\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>\n        </Table>\n\n        {/* Insert the wrapping station widget into the sidebar. */}\n        <WrapStation options={options} weth_balance={currencies[\"WETH\"][\"balance\"]} eth_balance={currencies[\"ETH\"][\"balance\"]} />\n      </div>\n    )\n  }\n}\n\nexport default Infobar;","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Responsive, Icon, Dropdown, Sidebar, Segment } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './navbar.css';\n\n// Import Artifacts\nimport logo from '../../images/x.svg';\nimport Infobar from '../infobar/infobar';\n\nconst other_buttons = [\n  { name: 'WETH/DAI', href: '/WETH_DAI' },\n  { name: 'MKR/WETH', href: '/MKR_WETH'},\n  { name: 'MKR/DAI', href: '/MKR_DAI'}\n];\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  // Helper function to toggle the sidebar. Used only on mobile.\n  toggleVisible = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  render() {\n    const { children, options } = this.props;\n    const { visible } = this.state;\n\n    return (\n      <div>\n        {/* Mobile Version of the navbar that displays at the top */}\n        <Responsive {...Responsive.onlyMobile}>\n          <Menu \n            borderless\n            fixed='top'\n            id='Navbar-mobile'\n          >\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' href='/' className='Navbar-item'>\n              <div className='Navbar-button-mobile' id='Navbar-logo-container'><img src={logo} alt='logo' id='Navbar-logo-mobile' /></div>\n            </Menu.Item>\n\n            {/* Display dropdown of all other markets */}\n            <Dropdown item text='Markets' className='Navbar-dropdown'>\n              <Dropdown.Menu>\n                {\n                  other_buttons.map((button, idx) => {\n                    return (\n                        <Dropdown.Item\n                          name={button.name}\n                          className='Navbar-item'\n                          as={Link}\n                          to={button.href}\n                          key={idx}\n                        >\n                        {button.name}\n                      </Dropdown.Item>\n                    )\n                  })\n                }\n              </Dropdown.Menu>\n            </Dropdown>\n\n            {/* Display a hamburger menu to toggle sidebar with information. */}\n            <Menu.Menu position='right'>\n              <Menu.Item>\n                <Icon name='sidebar' inverted onClick={ this.toggleVisible } />\n              </Menu.Item>                \n            </Menu.Menu>\n          </Menu>\n\n          {/* Add sidebar infobar */}\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Navbar-Side_info_bar\">\n            <Infobar options={options} padded={false} closeSidebar={this.toggleVisible} />\n          </Sidebar>\n          { children }\n        </Responsive>\n\n        {/* Desktop Version of the navbar that is on the left side of the screen */}\n        <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n          <Menu secondary vertical size='mini' id='Navbar'>\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' className='Navbar-item' as={Link} to={'/'}>\n              <div className='Navbar-button' id='Navbar-logo-container'><img src={logo} alt='logo' className='Navbar-icon' /></div>\n            </Menu.Item>\n\n            {/* Display the list of other buttons for all other markets */}\n            {\n              other_buttons.map((button, idx) => {\n                return (\n                    <Menu.Item\n                      name={button.name}\n                      className='Navbar-item'\n                      onClick={this.handleToggle}\n                      as={Link}\n                      to={button.href}\n                      key={idx}\n                    >\n                    <div className='Navbar-button'>{button.name}</div>\n                  </Menu.Item>\n                )\n              })\n            }\n          </Menu>\n          {/* Children are all content that will be rendered on page, it is put as a child to the navbar */}\n          { children }\n        </Responsive>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","// Import Major Dependencies\nimport React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Responsive } from 'semantic-ui-react';\nimport { ethers } from 'ethers';\n\n// Import CSS Files\nimport './App.css';\n\n// Import src code\nimport Market from '../market/market';\nimport Home from '../home/home';\nimport Login from '../login/login';\nimport Navbar from '../navbar/navbar';\nimport Infobar from '../infobar/infobar';\n\n// Load ABI and Config file\nconst config = require(\"./../../config\");\nconst erc20Abi = require(\"./../../abi/standard-token/erc20\");\nconst WEthAbi = require(\"./../../abi/standard-token/ds-eth-token\");\nconst MatchingMarketAbi = require(\"./../../abi/maker-otc/matching-market\");\nconst SupportMethodsAbi = require(\"./../../abi/otc-support-methods/otc-support-methods\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        provider: null,\n        signer: null,\n        contracts: [],\n        readOnly: true,\n        handleLogin: this.handleLogin,\n        handleReLogin: this.handleReLogin\n      }\n    };\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleReLogin = this.handleReLogin.bind(this);\n  }\n\n  componentWillMount() {\n    // Retrieve and store options\n    const options = this.getOptions();\n    this.setState({ options });\n  }\n\n  // Constructs and Returns a Dictionary with the environment options\n  getOptions() {\n    // Get a connection to the Ethereum blockchain\n    const ethereum = this.getEthereum();\n    let contracts = [];\n\n    // Retrieve the Provider, Signer, and Contracts\n    let provider = null;\n    let signer = null;\n    let readOnly = true;\n\n    ethers.errors.setLogLevel(\"off\");\n\n    // If an Ethereum connection exists then retrieve the provider and signer\n    // Else connect to default provider from ethers.js (myetherwallet/infura) and generate a random account to be the signer\n    if(ethereum) {\n      provider = new ethers.providers.Web3Provider(ethereum);\n      signer = provider.getSigner();\n\n      // Set readOnly to false since we have a signing account (not randomly generated)\n      // The contracts are then initialized with the signer\n      readOnly = false;\n      contracts = this.getContracts(signer);\n    } else {\n      provider = new ethers.getDefaultProvider();\n      signer = new ethers.Wallet.createRandom();\n\n      // Since this is readOnly, the contracts are initialized with the provider\n      contracts = this.getContracts(provider);\n    }\n\n    // Package options\n    const options = this.buildOptions(provider, signer, contracts, readOnly);\n    return options;\n  }\n\n  async handleLogin(phrase, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      let provider = new ethers.getDefaultProvider();\n      let signer = new ethers.Wallet.fromMnemonic(phrase).connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n\n      // Encrypt and store the wallet into the browsers local storage\n      let encrypted_wallet = await signer.encrypt(password);\n      this.saveEncryptedWallet(encrypted_wallet);\n    }\n  }\n\n  async handleReLogin(account, json_string, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      console.log(\"LOGGING IN WITH ACCOUNT \" + account);\n      let provider = new ethers.getDefaultProvider();\n      let signer = await ethers.Wallet.fromEncryptedJson(json_string, password);\n      signer = signer.connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n    }\n  }\n\n  saveEncryptedWallet(wallet) {\n    var json_wallet = JSON.parse(wallet)\n    var address = json_wallet.address\n    var localStorage = window.localStorage\n    if(!localStorage.getItem(\"encrypted_wallets\")) {\n      localStorage.setItem(\"encrypted_wallets\", JSON.stringify({}))\n    }\n\n    var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n    stored_wallets[\"0x\" + address] = wallet\n    localStorage.setItem(\"encrypted_wallets\", JSON.stringify(stored_wallets))\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to build options dictionary\n  buildOptions(provider, signer, contracts, readOnly) {\n    return {\n      provider: provider,\n      signer: signer,\n      contracts: contracts,\n      readOnly: readOnly,\n      handleLogin: this.handleLogin,\n      handleReLogin: this.handleReLogin\n    }\n  }\n\n  // Helper method to retrieve provider to ethereum blockchain if present and null otherwise.\n  getEthereum() {\n    var ethereum = null;\n    // If web3 is present in the window return the connection provider otherwise null\n\n    if(window.web3) {\n      ethereum = window.ethereum ? window.ethereum : window.web3.currentProvider;\n    } else {\n    }\n    return ethereum;\n  }\n\n  // Helper method to retrieve an object of all the initialized contracts.\n  getContracts(contract_initializer) {\n    return {\n      WETH: new ethers.Contract(config[\"tokens\"][\"main\"][\"W-ETH\"], WEthAbi.interface, contract_initializer),\n      DAI: new ethers.Contract(config[\"tokens\"][\"main\"][\"DAI\"], erc20Abi.interface, contract_initializer),\n      MKR: new ethers.Contract(config[\"tokens\"][\"main\"][\"MKR\"], erc20Abi.interface, contract_initializer),\n      Market: new ethers.Contract(config[\"market\"][\"main\"][\"address\"], MatchingMarketAbi.interface, contract_initializer),\n      SupportMethods: new ethers.Contract(config[\"otcSupportMethods\"][\"main\"][\"address\"], SupportMethodsAbi.interface, contract_initializer)\n    };\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { options } = this.state\n\n    // If there is no provider at all then render a Loading screen.\n    if(options.provider === null) {\n      return (\n        <div className=\"App\">\n          Loading...\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <div>\n            <Navbar options={options} />\n            <div id=\"App_market_container\">\n                <Switch>\n                  <Route exact path='/' render={() => <Home />} />\n                  <Route exact path='/login' render={() => <Login options={options} />} />\n                  <Route exact path='/WETH_DAI' render={() => <Market key={'WETH_DAI'} options={options} currencies={['WETH', 'DAI']} />} />\n                  <Route exact path='/MKR_WETH' render={() => <Market key={'MKR_WETH'} options={options} currencies={['MKR', 'WETH']} />} />\n                  <Route exact path='/MKR_DAI' render={() => <Market  key={'MKR_DAI'} options={options} currencies={['MKR', 'DAI']} />} />\n                </Switch>\n            </div>\n            <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n              <Infobar padded={true} options={options} />\n            </Responsive>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// Import Major Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\n// Import CSS Files\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-virtualized/styles.css'\nimport './index.css';\n\n// Import App src code\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}