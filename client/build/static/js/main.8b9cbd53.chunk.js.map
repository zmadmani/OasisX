{"version":3,"sources":["images/x.svg","registerServiceWorker.js","containers/utils/humanname/humanname.js","containers/utils/general.js","containers/market/orderlistV2/orderlistV2.js","containers/market/limitorder/limitorder.js","containers/market/marketorder/marketorder.js","containers/market/myorders/myorders.js","containers/market/stats/chart/chart.js","containers/market/stats/stats.js","containers/market/markethistory/markethistory.js","containers/utils/orders.js","containers/market/leaderboard/leaderboard.js","containers/market/myhistory/myhistory.js","containers/market/sidebar/sidebar.js","containers/utils/openorders.js","containers/market/market.js","containers/home/home.js","containers/login/login.js","containers/infobar/wrapstation/wrapstation.js","containers/infobar/infobar.js","containers/navbar/navbar.js","containers/App/App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","first_names","last_names","colors","fontColors","HumanName","nextProps","nextState","this","props","address","length","num_names","ethers","utils","bigNumberify","first_name_idx","substr","toString","last_name_idx","mod","initials","num_colors","long_num","color_idx","_this$props","icon_only","inactive_link","react_default","a","createElement","className","_this$getName","getName","_this$getName2","Object","slicedToArray","name","_this$getColor","getColor","_this$getColor2","backgroundColor","fontColor","color","onClick","open","icon","style","final","title","Component","numberWithCommas","x","parts","split","replace","join","OrderListV2","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","max_order","orders","buy_orders","sell_orders","last_order","top10","concat","sort","b","curr_1_amt","slice","i","_this2","index","_ref","key","item","maker","price","Math","round","id","Grid","padded","Column","computer","tablet","mobile","Popup","trigger","content","account","type","ratio","color_0","color_1","custom_style","backgroundImage","backgroundSize","backgroundRepeat","assign","setSidebar","verticalAlign","humanname_humanname","_this3","currencies","sell_orders_reverse","reverse","push","curr_0_amt","getMax","Icon","size","es","outline","_ref2","height","width","rowHeight","rowCount","rowRenderer","scrollToIndex","LimitOrder","loading","init","success","amount_0","ui_amount_0","amount_1","ui_amount_1","bignumbers","last_price","handleSubmit","bind","assertThisInitialized","flashSuccess","flashError","generateBigNumbers","setState","options","curr_gem_0","contracts","curr_gem_1","data","pay_amt","pay_gem","buy_amt","buy_gem","Market","offer","tx","wait","_context","t0","setTimeout","value","test","amount_1_bn","parseUnits","amount_0_bn","price_bn","one_bn","mul","div","formatUnits","err","_this4","_this$state","_this$props2","balances","can_buy","can_sell","curr_0_balance","curr_1_balance","gte","gt","side_text","Loader","active","inline","Form","Field","Input","label","basic","labelPosition","placeholder","onChange","e","handlePriceChange","target","disabled","readOnly","handleAmountChange","Button","Group","inverted","handleAmountPercentageChange","MarketOrder","amounts","ui_amounts","expected_price","expected_amount","handleMarketBuy","handleMarketSell","min_expected_amount","min_fill_amount","sellAllAmount","_this$state5","reset","_this$state6","_this3$state","_this$state7","will_receive","giving","getBuyAmount","one","_this$state9","new_amounts","new_ui_amounts","ui_amount","amount_bn","setExpectedAmount","_this5","_this$state10","_this6","_this$state11","_this$props4","side_texts","widths","MyOrders","myOrders","cancel","orders_table","background_item","getMyOrders","Table","Body","map","Row","Cell","textAlign","cancelOrder","selectable","striped","celled","unstackable","columns","Header","HeaderCell","candlesAppearance","wickStroke","fill","d","close","widthRatio","opacity","CandleChart","first_timestamp","curr_candle","date","Date","high","low","volume","parseFloat","end_timestamp","order","max","min","chart","initialData","buildChartPoints","ema10","ema","windowSize","sourcePath","skipUndefined","merge","c","accessor","stroke","ema50","calculatedData","margin","left","right","top","bottom","yGrid","innerTickSize","tickStrokeDasharray","tickStrokeOpacity","tickStrokeWidth","xGrid","_xScaleProvider","discontinuousTimeScaleProvider","inputDateAccessor","xScaleProvider","xScale","xAccessor","displayXAccessor","xExtents","last","react_stockcharts_es","seriesName","clamp","yExtents","axes","axisAt","orient","ticks","tickStroke","series","yAccessor","coordinates","tooltip","origin","xDisplayFormat","timeFormat","textFill","echo","w","h","tickFormat","format","fitWidth","Stats","buildStat","users","num_users","num_buys","num_sells","buy_volume","sell_volume","last_type","new_stats","curr_1","symbol","document","raw_stats","keys","statistics","updateStats","stats_chart_chart","List","Item","Content","Description","MarketHistory","apply","o","participants","only","getPrice","lte","getType","curr_0_addr","curr_1_addr","buy_addr","toUpperCase","pay_addr","eventsToOrders","events","timestamp","toLocaleTimeString","undefined","hour","minute","toLocaleDateString","day","month","year","raw_timestamp","curr_0","taker","buildHashKey","first_addr","second_addr","solidityKeccak256","_callee","hashKey1","hashKey2","filter1","filter2","regenerator_default","wrap","prev","next","filters","LogTake","removeAllListeners","stop","subscribeToNewOrders","_x3","_x4","_x5","_subscribeToNewOrders","arguments","_callee2","addOrders","_context2","on","pair","take_amt","give_amt","event","getPastOrders","_x6","_x7","_x8","_getPastOrders","_callee3","provider","toBlock","numBlocks","latestBlock","fromBlock","hashKey01","filter01","hashKey10","filter10","events01","events10","_args3","_context3","getBlockNumber","sent","Promise","all","getLogs","interface","decode","topics","first","second","parseInt","abrupt","Leaderboard","direction","column","new_data","eventsToData","max_profit","abs","profiles","buyer","seller","newUserProfile","profile_data","add","avg_buy_order","avg_buy_price","avg_sell_order","avg_sell_price","profit","getProfit","data_point","user","amount_0_bought","amount_0_sold","profit_color","clicked_column","amount_0_given","amount_1_received","amount_1_given","amount_0_received","amount_sell","amount_buy","sell_price","buy_price","min_amount","lt","_this$state2","headers","handleSort","MyHistory","my_orders","new_order","SideBar","visible","amount","currency_0_balance","currency_1_balance","info","owner","button_loading","button_success","button_error","updateInfo","stopLoading","balanceOf","getOffer","getOwner","sidebar_info","toggleSidebar","inputs","will_receive_wholenums","buy","internal_value","ui_value","balance","action","subtitle","updated_info","getUpdatedInfo","Sidebar","as","Segment","animation","currency","receive_currency","offered","max_take","getMaxTake","calcWillReceive","button_text","handleUserChange","executeTrade","processOpenOrders","rawOrders","n","pay_amount","buy_amount","getOpenOrders","_x","_x2","_getOpenOrders","token_addr_0","token_addr_1","pay_token","buy_token","SupportMethods","getOffers","past_orders","open_buy_orders","open_sell_orders","timers","updateBalances","updateOpenOrders","signer","getAddress","clearTimeout","_unSubscribeToNewOrders","unSubscribeToNewOrders","timer","buildTitle","all_open_orders","activity_panes","menuItem","render","Tab","Pane","markethistory_markethistory","leaderboard_leaderboard","myorders_myorders","myhistory_myhistory","buy_panes","limitorder_limitorder","marketorder_marketorder","sidebar_sidebar","stats_stats","divided","menu","fluid","tabular","attached","panes","orderlistV2_orderlistV2","Responsive","minWidth","onlyTablet","maxWidth","Home","Transition","transitionOnMount","duration","Login","selected","phrase","password","redirect","saved_wallets","handleRedirect","getSavedAccounts","defineProperty","localStorage","getItem","JSON","parse","handleLogin","handleReLogin","Redirect","to","wallet_list","classes","field_change","handleFieldChange","WrapStation","onWrap","asyncToGenerator","mark","deposit","WETH","amount_wrap","onUnwrap","withdraw","amount_unwrap","ui_amount_wrap","ui_amount_unwrap","_this$state3","weth_balance","eth_balance","_this$state4","onSubmit","handleUserUpdate","handlePercentUpdate","MAX_VAL","Infobar","context","approved","DAI","MKR","ETH","market_address","getBalances","dai_balance","mkr_balance","getApprovals","weth_approval","dai_approval","mkr_approval","getBalance","contract","approve","approveCurrencyForAmount","current_approval","approveCurrency","unapproveCurrency","weth_promise","dai_promise","mkr_promise","allowance","raw_balance","raw_allowance","getUIBalance","getUIAllowance","closeSidebar","currenciesInformation","buildRenderList","x_icon","username","primary","Link","Checkbox","toggle","checked","toggleApproval","wrapstation_wrapstation","other_buttons","href","Navbar","toggleVisible","children","onlyMobile","Menu","borderless","fixed","src","logo","alt","Dropdown","text","button","idx","position","infobar_infobar","secondary","vertical","handleToggle","config","require","erc20Abi","WEthAbi","MatchingMarketAbi","SupportMethodsAbi","App","getOptions","ethereum","getEthereum","providers","Web3Provider","getSigner","getContracts","getDefaultProvider","Wallet","createRandom","buildOptions","fromMnemonic","connect","encrypt","encrypted_wallet","saveEncryptedWallet","json_string","fromEncryptedJson","wallet","setItem","stringify","stored_wallets","web3","currentProvider","contract_initializer","Contract","HashRouter","navbar_navbar","Switch","Route","exact","path","home_home","login_login","market_market","React","ReactDOM","containers_App_App","getElementById","URL","process","addEventListener","fetch","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8b9cbd53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/x.23ec4264.svg\";","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\n\n// Import CSS Files\nimport './humanname.css';\n\n// Set up constants\nconst first_names = [\"JAMES\", \"JOHN\", \"ROBERT\", \"MICHAEL\", \"WILLIAM\", \"DAVID\", \"RICHARD\", \"CHARLES\", \"JOSEPH\", \"THOMAS\", \"CHRISTOPHER\", \"DANIEL\", \"PAUL\", \"MARK\", \"DONALD\", \"GEORGE\", \"KENNETH\", \"STEVEN\", \"EDWARD\", \"BRIAN\", \"RONALD\", \"ANTHONY\", \"KEVIN\", \"JASON\", \"MATTHEW\", \"GARY\", \"TIMOTHY\", \"JOSE\", \"LARRY\", \"JEFFREY\", \"FRANK\", \"SCOTT\", \"ERIC\", \"STEPHEN\", \"ANDREW\", \"RAYMOND\", \"GREGORY\", \"JOSHUA\", \"JERRY\", \"DENNIS\", \"WALTER\", \"PATRICK\", \"PETER\", \"HAROLD\", \"DOUGLAS\", \"HENRY\", \"CARL\", \"ARTHUR\", \"RYAN\", \"ROGER\", \"JOE\", \"JUAN\", \"JACK\", \"ALBERT\", \"JONATHAN\", \"JUSTIN\", \"TERRY\", \"GERALD\", \"KEITH\", \"SAMUEL\", \"WILLIE\", \"RALPH\", \"LAWRENCE\", \"NICHOLAS\", \"ROY\", \"BENJAMIN\", \"BRUCE\", \"BRANDON\", \"ADAM\", \"HARRY\", \"FRED\", \"WAYNE\", \"BILLY\", \"STEVE\", \"LOUIS\", \"JEREMY\", \"AARON\", \"RANDY\", \"HOWARD\", \"EUGENE\", \"CARLOS\", \"RUSSELL\", \"BOBBY\", \"VICTOR\", \"MARTIN\", \"ERNEST\", \"PHILLIP\", \"TODD\", \"JESSE\", \"CRAIG\", \"ALAN\", \"SHAWN\", \"CLARENCE\", \"SEAN\", \"PHILIP\", \"CHRIS\", \"JOHNNY\", \"EARL\", \"JIMMY\", \"ANTONIO\", \"DANNY\", \"BRYAN\", \"TONY\", \"LUIS\", \"MIKE\", \"STANLEY\", \"LEONARD\", \"NATHAN\", \"DALE\", \"MANUEL\", \"RODNEY\", \"CURTIS\", \"NORMAN\", \"ALLEN\", \"MARVIN\", \"VINCENT\", \"GLENN\", \"JEFFERY\", \"TRAVIS\", \"JEFF\", \"CHAD\", \"JACOB\", \"LEE\", \"MELVIN\", \"ALFRED\", \"KYLE\", \"FRANCIS\", \"BRADLEY\", \"JESUS\", \"HERBERT\", \"FREDERICK\", \"RAY\", \"JOEL\", \"EDWIN\", \"DON\", \"EDDIE\", \"RICKY\", \"TROY\", \"RANDALL\", \"BARRY\", \"ALEXANDER\", \"BERNARD\", \"MARIO\", \"LEROY\", \"FRANCISCO\", \"MARCUS\", \"MICHEAL\", \"THEODORE\", \"CLIFFORD\", \"MIGUEL\", \"OSCAR\", \"JAY\", \"JIM\", \"TOM\", \"CALVIN\", \"ALEX\", \"JON\", \"RONNIE\", \"BILL\", \"LLOYD\", \"TOMMY\", \"LEON\", \"DEREK\", \"WARREN\", \"DARRELL\", \"JEROME\", \"FLOYD\", \"LEO\", \"ALVIN\", \"TIM\", \"WESLEY\", \"GORDON\", \"DEAN\", \"GREG\", \"JORGE\", \"DUSTIN\", \"PEDRO\", \"DERRICK\", \"DAN\", \"LEWIS\", \"ZACHARY\", \"COREY\", \"HERMAN\", \"MAURICE\", \"VERNON\", \"ROBERTO\", \"CLYDE\", \"GLEN\", \"HECTOR\", \"SHANE\", \"RICARDO\", \"SAM\", \"RICK\", \"LESTER\", \"BRENT\", \"RAMON\", \"CHARLIE\", \"TYLER\", \"GILBERT\", \"GENE\"];\nconst last_names = [\"SMITH\", \"JOHNSON\", \"WILLIAMS\", \"JONES\", \"BROWN\", \"DAVIS\", \"MILLER\", \"WILSON\", \"MOORE\", \"TAYLOR\", \"ANDERSON\", \"THOMAS\", \"JACKSON\", \"WHITE\", \"HARRIS\", \"MARTIN\", \"THOMPSON\", \"GARCIA\", \"MARTINEZ\", \"ROBINSON\", \"CLARK\", \"RODRIGUEZ\", \"LEWIS\", \"LEE\", \"WALKER\", \"HALL\", \"ALLEN\", \"YOUNG\", \"HERNANDEZ\", \"KING\", \"WRIGHT\", \"LOPEZ\", \"HILL\", \"SCOTT\", \"GREEN\", \"ADAMS\", \"BAKER\", \"GONZALEZ\", \"NELSON\", \"CARTER\", \"MITCHELL\", \"PEREZ\", \"ROBERTS\", \"TURNER\", \"PHILLIPS\", \"CAMPBELL\", \"PARKER\", \"EVANS\", \"EDWARDS\", \"COLLINS\", \"STEWART\", \"SANCHEZ\", \"MORRIS\", \"ROGERS\", \"REED\", \"COOK\", \"MORGAN\", \"BELL\", \"MURPHY\", \"BAILEY\", \"RIVERA\", \"COOPER\", \"RICHARDSON\", \"COX\", \"HOWARD\", \"WARD\", \"TORRES\", \"PETERSON\", \"GRAY\", \"RAMIREZ\", \"JAMES\", \"WATSON\", \"BROOKS\", \"KELLY\", \"SANDERS\", \"PRICE\", \"BENNETT\", \"WOOD\", \"BARNES\", \"ROSS\", \"HENDERSON\", \"COLEMAN\", \"JENKINS\", \"PERRY\", \"POWELL\", \"LONG\", \"PATTERSON\", \"HUGHES\", \"FLORES\", \"WASHINGTON\", \"BUTLER\", \"SIMMONS\", \"FOSTER\", \"GONZALES\", \"BRYANT\", \"ALEXANDER\", \"RUSSELL\", \"GRIFFIN\", \"DIAZ\", \"HAYES\", \"MYERS\", \"FORD\", \"HAMILTON\", \"GRAHAM\", \"SULLIVAN\", \"WALLACE\", \"WOODS\", \"COLE\", \"WEST\", \"JORDAN\", \"OWENS\", \"REYNOLDS\", \"FISHER\", \"ELLIS\", \"HARRISON\", \"GIBSON\", \"MCDONALD\", \"CRUZ\", \"MARSHALL\", \"ORTIZ\", \"GOMEZ\", \"MURRAY\", \"FREEMAN\", \"WELLS\", \"WEBB\", \"SIMPSON\", \"STEVENS\", \"TUCKER\", \"PORTER\", \"HUNTER\", \"HICKS\", \"CRAWFORD\", \"HENRY\", \"BOYD\", \"MASON\", \"MORALES\", \"KENNEDY\", \"WARREN\", \"DIXON\", \"RAMOS\", \"REYES\", \"BURNS\", \"GORDON\", \"SHAW\", \"HOLMES\", \"RICE\", \"ROBERTSON\", \"HUNT\", \"BLACK\", \"DANIELS\", \"PALMER\", \"MILLS\", \"NICHOLS\", \"GRANT\", \"KNIGHT\", \"FERGUSON\", \"ROSE\", \"STONE\", \"HAWKINS\", \"DUNN\", \"PERKINS\", \"HUDSON\", \"SPENCER\", \"GARDNER\", \"STEPHENS\", \"PAYNE\", \"PIERCE\", \"BERRY\", \"MATTHEWS\", \"ARNOLD\", \"WAGNER\", \"WILLIS\", \"RAY\", \"WATKINS\", \"OLSON\", \"CARROLL\", \"DUNCAN\", \"SNYDER\", \"HART\", \"CUNNINGHAM\", \"BRADLEY\", \"LANE\", \"ANDREWS\", \"RUIZ\", \"HARPER\", \"FOX\", \"RILEY\", \"ARMSTRONG\", \"CARPENTER\", \"WEAVER\", \"GREENE\", \"LAWRENCE\", \"ELLIOTT\", \"CHAVEZ\", \"SIMS\", \"AUSTIN\", \"PETERS\", \"KELLEY\", \"FRANKLIN\", \"LAWSON\"];\nconst colors = [\"#001f3f\", \"#0074D9\", \"#7FDBFF\", \"#39CCCC\", \"#2ECC40\", \"#01FF70\", \"#FFDC00\", \"#FF851B\", \"#3D9970\", \"#F15152\", \"#111111\", \"#AAAAAA\", \"#DDDDDD\"];\nconst fontColors = [\"#FFFFFF\", \"#FFFFFF\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#111111\", \"#FFFFFF\", \"#111111\", \"#111111\"];\n\nclass HumanName extends Component {\n  // Only update the component if the address has changed since no other change will effect output.\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.address !== nextProps.address) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert the address to a name using the mapping scheme\n  getName(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [address, \"0x\"];\n    }\n\n    const num_names = ethers.utils.bigNumberify(\"200\");\n    \n    // Split the address into 2 equal lengths to create the first and last names\n    let first_name_idx = ethers.utils.bigNumberify(address.substr(0, 22)).toString();\n    let last_name_idx = ethers.utils.bigNumberify(\"0x\" + address.substr(22, 40)).toString();\n    \n    // Mod the numbers by 200 to get a response that is within the max index of 200 to be used to retrieve a first and last name\n    first_name_idx = ethers.utils.bigNumberify(first_name_idx).mod(num_names).toString();\n    last_name_idx = ethers.utils.bigNumberify(last_name_idx).mod(num_names).toString();\n\n    const initials = first_names[first_name_idx][0] + last_names[last_name_idx][0];\n    return [first_names[first_name_idx] + \" \" + last_names[last_name_idx], initials];\n  }\n\n  // Convert the address to a color using the mapping scheme\n  getColor(address) {\n    // If the address is an empty string then return the appropriate response\n    if(address.length === 0) {\n      return [colors[0], fontColors[0]];\n    }\n\n    const num_colors = ethers.utils.bigNumberify(\"13\");\n    const long_num = ethers.utils.bigNumberify(address).toString();\n\n    // Mode the number by 13 to get a response within the max index of 13 to be used to retrieve the colors\n    const color_idx = ethers.utils.bigNumberify(long_num).mod(num_colors).toString()\n    return [colors[color_idx], fontColors[color_idx]]\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { address, icon_only, inactive_link } = this.props;\n\n    // If the address is null then render an empty circle\n    if(!address) {\n      return (<div className=\"HumanName-circle\"></div>);\n    }\n\n    // Get the computed name and colors\n    let [ name, initials ] = this.getName(address);\n    const [ backgroundColor, fontColor ] = this.getColor(address);\n    \n    name = (<div className=\"HumanName-name\">{name}</div>);\n    const color = { \"backgroundColor\": backgroundColor, \"color\": fontColor };\n\n    // OnClick function will open up a tab with the account information in etherscan\n    let onClick = () => window.open('https://etherscan.io/address/' + address, '_blank');\n    if(inactive_link) {\n      onClick = null;\n    }\n\n    const icon = (<div className=\"HumanName-circle\" style={color}>{initials}</div>)\n    let final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon} {name}</span>)\n    if( icon_only ) {\n      final = (<span className=\"HumanName\" title={address} onClick={onClick}>{icon}</span>)\n    }\n    return final\n\n  }\n}\n\nexport default HumanName\n","export function numberWithCommas(x) {\n  var parts = x.toString().split(\".\");\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return parts.join(\".\");\n}\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Grid, Icon, Popup } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS FIle\nimport './orderlistV2.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass OrderListV2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n    this.orders = [];\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if buy/sell orders has changed or the last order is different\n    if(nextProps.buy_orders !== this.props.buy_orders || nextProps.sell_orders !== this.props.sell_orders || nextProps.last_order !== this.props.last_order) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retreives the maximum value in the orderbook\n  getMax(orders) {\n    const top10 = orders.concat().sort((a,b) => b.curr_1_amt - a.curr_1_amt).slice(0,10);\n    for(let i = 0; i < top10.length-1; i++) {\n      console.log(i);\n      if(top10[i].curr_1_amt <= top10[i+1].curr_1_amt*2) {\n        console.log(top10[i].curr_1_amt);\n        return top10[i].curr_1_amt;\n      }\n    }\n    if(top10.length > 0) {\n      return top10[top10.length-1];\n    } else {\n      return null;\n    }\n  }\n\n  // Renders the HTML for each row in the virtualized table\n  // Includes the color bands based on ratio to max\n  rowRenderer({index, key, style}) {\n    const item = this.orders[index];\n    // If this condition is true then this means it is the middle dividing row and the last price should be shown\n    if(item.maker === \"0\") {\n      const { last_order } = this.props;\n      let price = \"...\";\n      if(last_order[\"price\"]) {\n        price = last_order[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100) + \"▲\"}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(last_order[\"price\"] * 100)/100)  + \"▼\" }</span>);\n      }\n      return (\n        <div id=\"OrderListV2-table-middle\" key={key} style={style} >\n          <Grid padded={'horizontally'}>\n            <Grid.Column computer={2} tablet={2} mobile={3}>\n            </Grid.Column>\n            <Grid.Column computer={4} tablet={4} mobile={4}>\n              <Popup trigger={<span>{price}</span>} content='Last Price' />\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={4}>\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={5} mobile={5}>\n            </Grid.Column>\n          </Grid>\n        </div>\n      )      \n    }\n\n    // Calculate ratio to the max\n    const { account } = this.props;\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1_amt\"]/this.max_order * 100;\n    const direction = \"right\";\n\n    // Calculate the colors for the color bands\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color to make the rows striped\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n    if(account === item[\"maker\"]) {\n      color = `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n\n    style = Object.assign(custom_style, style);\n    let price = item[\"type\"] === \"BUY\" ? (<span className=\"green\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"OrderListV2-table-entry\" key={key} style={style} onClick={() => this.props.setSidebar(item) }>\n        <Grid padded={'horizontally'} verticalAlign={'middle'} className=\"OrderListV2-table-entry-grid\">\n          <Grid.Column computer={2} tablet={2} mobile={3} className=\"OrderListV2-table-entry-grid-img\">\n            <HumanName inactive_link icon_only address={item[\"maker\"]} />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_0_amt\"])}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5} className=\"OrderListV2-table-entry-grid-col\">\n            {numberWithCommas(item[\"curr_1_amt\"])}\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, buy_orders, sell_orders } = this.props;\n\n    // Copy and reverse the sell order list\n    const sell_orders_reverse = sell_orders.slice(0);\n    sell_orders_reverse.reverse();\n\n    // Push the \"MIDDLE\" row with the price summary onto the list\n    sell_orders_reverse.push({\n      \"maker\": \"0\",\n      \"price\": \"0\",\n      \"curr_0_amt\": \"0\",\n      \"curr_1_amt\": \"0\"\n    });\n\n    // Concatenate with the list of buy orders to get the mirroed orderbook\n    this.orders = sell_orders_reverse.concat(buy_orders);\n\n    // Recalculate the max order on the books\n    this.max_order = this.getMax(this.orders);\n\n    // If the buy or sell book is length 0 then just show loading screen since this mostly indicates an error and bad UX\n    if(sell_orders.length === 0 && buy_orders.length === 0) {\n      return (\n        <div className=\"OrderListV2\">\n          <div className=\"OrderListV2-loading\">Loading...</div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"OrderListV2\">\n        <Grid id=\"OrderListV2-table-header\">\n          <Grid.Column computer={2} tablet={2} mobile={3}>\n            <Icon name=\"user circle\" size=\"large\" />\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={4}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={4}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={5} tablet={5} mobile={5}>\n            {currencies[1]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={40}\n              rowCount={this.orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              scrollToIndex={sell_orders_reverse.length + 6}\n              className=\"OrderListV2-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n      </div>\n    );\n  }\n}\n\nexport default OrderListV2","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './limitorder.css'\n\nclass LimitOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      init: false,\n      error: false,\n      success: false,\n      price: '',\n      amount_0: '',\n      ui_amount_0: '',\n      amount_1: '',\n      ui_amount_1: '',\n      bignumbers: [],\n      last_price: ''\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores BigNumber integers for easy math later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Main function that interfaces and writes to the blockchain.\n  // This is the most important function here.\n  async handleSubmit(type) {\n    // Set loading to true to update UI\n    this.setState({loading: true, error: false, success: false});\n\n    const { currencies, options } = this.props;\n\n    // Get the important info for the transaction\n    const amount_0 = this.state.amount_0;\n    const amount_1 = this.state.amount_1;\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n    let data = {};\n\n    // Set data to the correct value depending on if the order is a BUY or SELL\n    // Basically you just flip the currency 0 and currency 1\n    if(type === \"BUY\") {\n      data = {\n        pay_amt: amount_1,\n        pay_gem: curr_gem_1,\n        buy_amt: amount_0,\n        buy_gem: curr_gem_0\n      };\n    } else if(type === \"SELL\") {\n      data = {\n        pay_amt: amount_0,\n        pay_gem: curr_gem_0,\n        buy_amt: amount_1,\n        buy_gem: curr_gem_1\n      };\n    } else {\n      return;\n    }\n\n    console.log(data);\n\n    try {\n      const tx = await options.contracts.Market.offer(data.pay_amt, data.pay_gem, data.buy_amt, data.buy_gem, 1);\n      await tx.wait();\n      this.flashSuccess();\n    } catch (error) {\n      console.log(error);\n      this.flashError();\n    }\n  }\n\n  // Function to flash Success on the button when a order has gone thru\n  flashSuccess() {\n    this.setState({ success : true, loading: false });\n    setTimeout(() => this.setState({ success: false, price: '', amount_0: '0', ui_amount_0: '', amount_1: '0', ui_amount_1: '' }), 1500);\n  }\n\n  // Function to flash Error on the button when a order has failed\n  flashError() {\n    this.setState({ error: true, loading: false });\n    setTimeout(() => this.setState({ error: false }), 1500);\n  }\n\n  // Handler for changes in price in the UI\n  handlePriceChange(value) {\n    if(/\\S/.test(value) && this.state.ui_amount_0 !== \"\") {\n      const price = value;\n      const ui_amount_1 = this.state.ui_amount_0 * price;\n      const amount_1_bn = ethers.utils.parseUnits(ui_amount_1.toString(), 'ether');\n      this.setState({ price: price, amount_1: amount_1_bn.toString(), ui_amount_1: ui_amount_1.toString() });\n    } else {\n      this.setState({ price: value, amount_1: '0', ui_amount_1: '' });\n    }\n  }\n\n  // Handler for changes in amount to be traded in the UI\n  handleAmountChange(index, value) {\n    if(/\\S/.test(value) && this.state.price !== \"\") {\n      const price = this.state.price;\n      let ui_amount_0 = null;\n      let ui_amount_1 = null;\n      let amount_0_bn = null;\n      let amount_1_bn = null;\n\n      // All math is done in BigNumber arithmetic using wei\n      if(index === 0) {\n        ui_amount_0 = value;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n        ui_amount_1 = ui_amount_0 * price;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n      } else if(index === 1) {\n        ui_amount_1 = value;\n        amount_1_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_1.toString(), 'ether'));\n        ui_amount_0 = ui_amount_1 / price;\n        amount_0_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount_0.toString(), 'ether'));\n      } else {\n        return;\n      }\n\n      this.setState({ \n        amount_0: amount_0_bn.toString(), \n        ui_amount_0: ui_amount_0, \n        amount_1: amount_1_bn.toString(),\n        ui_amount_1: ui_amount_1,\n      });\n    } else {\n      this.setState({\n        amount_0: '0',\n        ui_amount_0: '',\n        amount_1: '0',\n        ui_amount_1: ''\n      });\n    }\n  }\n\n  // Handler for changes in amount using the percentage tools\n  handleAmountPercentageChange(index, value) {\n    const price = this.state.price;\n\n    // All arithmetic is done using BigNumber and wei\n    let ui_amount_0 = null;\n    let ui_amount_1 = null;\n    let amount_0_bn = null;\n    let amount_1_bn = null;\n    const price_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(price.toString(), 'ether'));\n    const one_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits('1'), 'ether');\n\n    if(index === 0) {\n      amount_0_bn = value;\n      amount_1_bn = amount_0_bn.mul(price_bn).div(one_bn);\n    } else if(index === 1) {\n      amount_1_bn = value;\n      amount_0_bn = amount_1_bn.mul(one_bn).div(price_bn);\n    } else {\n      return;\n    }\n\n    // Try catch to stop any type of input that is invalid with a valid response\n    try {\n      ui_amount_0 = ethers.utils.formatUnits(amount_0_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_0 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    try {\n      ui_amount_1 = ethers.utils.formatUnits(amount_1_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n      ui_amount_1 = ethers.utils.formatUnits(\"0\", 'ether');\n    }\n\n    this.setState({\n      amount_0: amount_0_bn.toString(),\n      ui_amount_0: ui_amount_0,\n      amount_1: amount_1_bn.toString(),\n      ui_amount_1: ui_amount_1\n    });\n  }\n\n  render() {\n    const { price, amount_0, amount_1, ui_amount_0, ui_amount_1, bignumbers, loading, success, error } = this.state;\n    const { currencies, last_price, balances, options } = this.props;\n    \n    // Set flags that set whether a buy/sell is logically possible\n    let can_buy = false;\n    let can_sell = false;\n    \n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    const amount_0_bn = ethers.utils.bigNumberify(amount_0);\n    const amount_1_bn = ethers.utils.bigNumberify(amount_1);\n\n    if(price !== \"\" && curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    \n    if(price !== \"\" && curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Set the sidetext (text next to the button) depending on the situation context\n    let side_text = \"\";\n    if(loading) {\n      side_text = (<span className=\"LimitOrder-color\"><Loader active inline size=\"small\"/> LOADING...</span>);\n    }\n    if(error) {\n      side_text = (<span className=\"red LimitOrder-color\">FAILED</span>);\n    }\n    if(success) {\n      side_text = (<span className=\"green LimitOrder-color\">SUCCESS</span>);\n    }\n\n    return (\n      <div className=\"LimitOrder\">\n        <Form size='tiny'>\n          <div className=\"LimitOrder-headers\">Price</div>\n          <Form.Field id=\"LimitOrder-price\">\n            <Input\n              label={{ basic: true, content: currencies[1] + \" / \" + currencies[0]  }}\n              labelPosition='right'\n              placeholder='Enter Price...'\n              value={price}\n              onChange={(e) => { this.handlePriceChange(e.target.value) }}\n              disabled={options.readOnly}\n            />\n            <span className=\"LimitOrder-currentPrice\" onClick={() => this.handlePriceChange(last_price) } >Current Market Price</span>\n          </Form.Field>\n          <hr />\n          <div className=\"LimitOrder-headers\" id=\"LimitOrder-amount-header\">Amounts</div>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[0] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_0}\n                onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n            <Form.Field>\n              <Input\n                label={{ basic: true, content: currencies[1] }}\n                labelPosition='right'\n                placeholder='Enter Amount...'\n                disabled={price === '' || options.readOnly}\n                value={ui_amount_1}\n                onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                className=\"LimitOrder-amount-input\"\n              />\n              <Button.Group className=\"LimitOrder-mini-buttons\" size='mini' basic inverted>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                <Button disabled={price === \"\" || options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n              </Button.Group>\n            </Form.Field>\n          <Button className=\"LimitOrder-button\" color='green' disabled={!can_buy || loading || options.readOnly} onClick={() => this.handleSubmit(\"BUY\")} >BUY {currencies[0]}</Button>\n          <Button className=\"LimitOrder-button\" color='red' disabled={!can_sell || loading || options.readOnly} onClick={() => this.handleSubmit(\"SELL\")} >SELL {currencies[0]}</Button>\n          {side_text}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default LimitOrder","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button, Loader } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './marketorder.css'\n\nclass MarketOrder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false],\n      amounts: ['0', '0'],\n      ui_amounts: ['', ''],\n      expected_price: ['', ''],\n      expected_amount: ['0', '0'],\n      bignumbers: []\n    };\n\n    this.handleMarketBuy = this.handleMarketBuy.bind(this);\n    this.handleMarketSell = this.handleMarketSell.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n    this.flashError = this.flashError.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateBigNumbers();\n  }\n\n  // Generates and stores a list of BigNumber integers for arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n\n    this.setState({ bignumbers });\n  }\n\n  // Handler for Market Buy\n  async handleMarketBuy() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[1] = true;\n    error[1] = false;\n    success[1] = false;\n    this.setState({ loading , error, success });\n    \n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n    \n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[1]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_1,\n      pay_amt: amounts[1],\n      buy_gem: curr_gem_0,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the data object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      var tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"]);\n      // Wait for transaction to finish\n      await tx.wait();\n      this.flashSuccess(1);\n    } catch (error) {\n      this.flashError(1);\n    }\n  }\n\n  // Handler for Market Sell\n  async handleMarketSell() {\n    // Set loading to true to update UI\n    let { loading, error, success } = this.state;\n    loading[0] = true;\n    error[0] = false;\n    success[0] = false;\n    this.setState({ loading , error, success });\n\n    // Retrieve important variables\n    const { amounts, expected_amount } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    // Calculate the minimum expected amount of currency you will receive\n    const min_expected_amount = ethers.utils.bigNumberify(\"98\").mul(expected_amount[0]).div(ethers.utils.bigNumberify(\"100\"));\n\n    // Assemble the data information into an object\n    const data = {\n      pay_gem: curr_gem_0,\n      pay_amt: amounts[0],\n      buy_gem: curr_gem_1,\n      min_fill_amount: min_expected_amount.toString()\n    };\n\n    // Log the dta object to console for clarity\n    console.log(data);\n\n    // Try catch to handle successful and failed tx\n    try {\n      const tx = await options.contracts.Market.sellAllAmount(data[\"pay_gem\"], data[\"pay_amt\"], data[\"buy_gem\"], data[\"min_fill_amount\"]);\n      // Wait for tx to finish\n      await tx.wait();\n      this.flashSuccess(0);\n    } catch (error) {\n      this.flashError(0);\n    }\n  }\n\n  // Handler for when a tx is successful\n  flashSuccess(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = true;\n    error[index] = false;\n    this.setState({ loading, success, error });\n    setTimeout(() => this.reset(index), 1500);\n  }\n\n  // Handler for whne a tx is failed\n  flashError(index) {\n    let { loading, success, error } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = true;\n    this.setState({ loading, success, error });\n    setTimeout(() => {\n      let { loading, success, error } = this.state;\n      loading[index] = false;\n      success[index] = false;\n      error[index] = false;\n      this.setState({ error });\n    }, 1500);\n  }\n\n  // State reset function that completely nullifies the component state\n  reset(index) {\n    let { loading, success, error, amounts, ui_amounts } = this.state;\n    loading[index] = false;\n    success[index] = false;\n    error[index] = false;\n    amounts[index] = \"0\";\n    ui_amounts[index] = \"\";\n    this.setState({ loading, success, error, amounts, ui_amounts });\n  }\n\n  // Calculate the amount of currency that we expect to receive from the trade\n  // Index is wether currency 0 or 1 is being bought\n  async setExpectedAmount(index) {\n    // Assemble variables\n    const { amounts, expected_amount, expected_price } = this.state;\n    const { currencies, options } = this.props;\n\n    const curr_gem_0 = options.contracts[currencies[0]].address;\n    const curr_gem_1 = options.contracts[currencies[1]].address;\n\n    let will_receive = \"0\";\n    let giving = amounts[index];\n\n    // Depending on which currency is being received\n    if(index === 0) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_1, curr_gem_0, giving);\n    } else if(index === 1) {\n      will_receive = await options.contracts.Market.getBuyAmount(curr_gem_0, curr_gem_1, giving);\n    }\n\n    // If the amount received/given is greater than 0 then calculate expected info using BigNumber\n    if(will_receive !== \"0\" && giving !== \"0\") {\n      will_receive = ethers.utils.bigNumberify(will_receive);\n      giving = ethers.utils.bigNumberify(giving);\n      var one = ethers.utils.bigNumberify(ethers.utils.parseUnits('1', 'ether'));\n\n      var price = one.mul(will_receive).div(giving);\n      if(index === 1) {\n        price = one.mul(giving).div(will_receive);\n      }\n      price = Math.round(ethers.utils.formatUnits(price.toString(), 'ether') * 1000) / 1000;\n\n      expected_amount[index] = will_receive;\n      expected_price[index] = price;\n    } else {\n      expected_amount[index] = \"0\";\n      expected_price[index] = \"\";\n    }\n    this.setState({ expected_amount, expected_price });\n  }\n\n  // Handler for a change in the amount of currency to be traded\n  handleAmountChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather currency balance\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    // If there is an error then replace values with empty values\n    try {\n      // Test the new amount value to see if it is whitespace and if so replace with empty values\n      if(/\\S/.test(value)) {\n        const ui_amount = value;\n\n        // Get BigNumber representation of the amount in wei\n        const amount_bn = ethers.utils.bigNumberify(ethers.utils.parseUnits(ui_amount.toString(), 'ether'));\n\n        // Reassign the new amounts\n        new_amounts[index] = amount_bn.toString();\n        new_ui_amounts[index] = ui_amount.toString();\n\n        // Save the amounts\n        this.setState({ \n          amounts: new_amounts,\n          ui_amounts: new_ui_amounts\n        });\n      } else {\n        new_amounts[index] = '0';\n        new_ui_amounts[index] = '';\n      }\n    } catch(err) {\n      console.log(err);\n      new_amounts[index] = '0';\n      new_ui_amounts[index] = '';\n    }\n\n    this.setState({\n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  // Handler for changes in amount using percentage tool\n  handleAmountPercentageChange(index, value) {\n    const { amounts, ui_amounts } = this.state;\n\n    // Gather the amount variables\n    // Initialize ui_amount to 0 to be replaced by real value in try/catch\n    const amount_bn = value;\n    let ui_amount = ethers.utils.formatUnits(\"0\", 'ether');\n    try {\n      ui_amount = ethers.utils.formatUnits(amount_bn.toString(), 'ether');\n    } catch(err) {\n      console.log(err);\n    }\n\n    // clone amounts into new objects\n    let new_amounts = amounts.slice(0);\n    let new_ui_amounts = ui_amounts.slice(0);\n\n    new_amounts[index] = amount_bn.toString();\n    new_ui_amounts[index] = ui_amount.toString();\n\n    // Store new objects\n    this.setState({ \n      amounts: new_amounts,\n      ui_amounts: new_ui_amounts\n    }, () => {\n      this.setExpectedAmount(index);\n    });\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { amounts, ui_amounts, expected_price, bignumbers, loading, success, error } = this.state;\n    const { currencies, balances, options } = this.props;\n    \n    // Set flags if buying/selling is logically valid\n    let can_buy = false;\n    let can_sell = false;\n    \n    // Get the balances for each currency\n    const curr_0_balance = ethers.utils.bigNumberify(balances[0]);\n    const curr_1_balance = ethers.utils.bigNumberify(balances[1]);\n    \n    // Get the amounts for each currency input box\n    const amount_0_bn = ethers.utils.bigNumberify(amounts[0]);\n    const amount_1_bn = ethers.utils.bigNumberify(amounts[1]);\n\n    // If the balance is greater than the amount then set the proper flags\n    if(curr_0_balance.gte(amount_0_bn) && amount_0_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_sell = true;\n    }\n    if(curr_1_balance.gte(amount_1_bn) && amount_1_bn.gt(ethers.utils.bigNumberify(\"1000\"))) {\n      can_buy = true;\n    }\n\n    // Generate the side text next to the buttons\n    let side_texts = [\"\", \"\"];\n    for(let i = 0; i < 2; i++) {\n      if(loading[i]) {\n        side_texts[i] = (<span className=\"MarketOrder-color\"><Loader active inline size=\"small\"/> LOADING...</span>);\n      }\n      if(error[i]) {\n        side_texts[i] = (<span className=\"red MarketOrder-color\">FAILED</span>);\n      }\n      if(success[i]) {\n        side_texts[i] = (<span className=\"green MarketOrder-color\">SUCCESS</span>);\n      }\n    }\n\n    return (\n      <div className=\"MarketOrder\">\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"green\">BUY</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[1]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"green\">Buy</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[1] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[1]}\n                  onChange={(e) => { this.handleAmountChange(1, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(1, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(1, curr_1_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='green' disabled={!can_buy || loading[1] || error[1] || options.readOnly} onClick={this.handleMarketBuy} >BUY {currencies[0]}</Button>\n            {side_texts[1]}\n          </Form>\n        </div>\n        <hr />\n        <div className=\"MarketOrder-pane\">\n          <div className=\"MarketOrder-main-header\">Market <span className=\"red\">SELL</span></div>\n          <div className=\"MarketOrder-small-note\">Note: Orders will cancel if slippage >2%</div>\n          <div className=\"MarketOrder-sub-header\">Est. Price: {expected_price[0]} <span className=\"MarketOrder-tiny-note\">{currencies[1]}/{currencies[0]}</span></div>\n          <Form size='tiny'>\n            <div className=\"MarketOrder-headers\"><span className=\"red\">Sell</span> Allowance</div>\n            <Form.Group widths='equal'>\n              <Form.Field>\n                <Input\n                  label={{ basic: true, content: currencies[0] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amounts[0]}\n                  onChange={(e) => { this.handleAmountChange(0, e.target.value) }}\n                  className=\"MarketOrder-amount-input\"\n                  disabled={options.readOnly}\n                />\n                <Button.Group className=\"MarketOrder-mini-buttons\" size='mini' basic inverted>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountChange(0, '') } >0%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[4]))} >25%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.div(bignumbers[2]))} >50%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance.mul(bignumbers[3]).div(bignumbers[4]))} >75%</Button>\n                  <Button disabled={options.readOnly} onClick={() => this.handleAmountPercentageChange(0, curr_0_balance) } >100%</Button>\n                </Button.Group>\n              </Form.Field>\n            </Form.Group>\n            <Button className=\"MarketOrder-button\" color='red' disabled={!can_sell || loading[0] || error[0] || options.readOnly} onClick={this.handleMarketSell} >SELL {currencies[0]}</Button>\n            {side_texts[0]}\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MarketOrder\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Table, Button } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './myorders.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyOrders extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  // Filter to the open orders that match the current account address\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n    for(let i = 0; i < orders.length; i++) {\n      if(orders[i][\"maker\"] === account) {\n        myOrders.push(orders[i]);\n      }\n    }\n    return myOrders;\n  }\n\n  // Handler to cancel an order\n  async cancelOrder(id) {\n    const { Market } = this.props.options.contracts;\n    console.log(\"CANCEL ORDER \" + id);\n    try {\n      const tx = await Market.cancel(id);\n      await tx.wait();\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies } = this.props;\n\n    let orders_table = null;\n    let background_item = null;\n    const orders = this.getMyOrders();\n\n    // If there are no orders then render an emtpy list\n    if(orders.length === 0) {\n      background_item = (<div id=\"MyOrders-empty\">NO ORDERS</div>);\n    } else {\n      orders_table = (<Table.Body id=\"MyOrders-tableBody\">\n            {orders.map((item, index) => {\n              var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>) : (<span className=\"red MyOrders-color\">{numberWithCommas(item[\"price\"])}</span>)\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'><Button className=\"MyOrders-button\" color='red' size='mini' inverted onClick={() => {this.cancelOrder(item[\"id\"])}}>CANCEL</Button></div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{price}</div>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_0_amt\"])}</div>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <div className='MyOrders-table-entry'>{numberWithCommas(item[\"curr_1_amt\"])}</div>\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>);\n    }\n\n    return (\n      <div className=\"MyOrders\">\n        <Table selectable striped basic celled unstackable columns={5} textAlign='left' id=\"MyOrders-table\">\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Action</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>Price</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[0]}</Table.HeaderCell>\n              <Table.HeaderCell className='MyOrders-table-header' textAlign='left'>{currencies[1]}</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          { orders_table }\n        </Table>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyOrders\n","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { BarSeries, CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { CrossHairCursor, CurrentCoordinate } from \"react-stockcharts/lib/coordinates\";\nimport { OHLCTooltip, MovingAverageTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\" \nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\n\n// Import CSS Files\nimport './chart.css';\n\n// Set the appearance of the candle chart\nconst candlesAppearance = {\n  wickStroke: \"#7a8692\",\n  fill: function fill(d) {\n    return d.close > d.open ? \"rgba(0, 255, 0, 0.5)\" : \"rgba(255, 0, 0, 0.5)\";\n  },\n  widthRatio: 0.8,\n  opacity: 1,\n};\n\nclass CandleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n  \n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if there are a different number of orders being piped in\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Convert raw order data into the processed chart points\n  buildChartPoints(orders) {\n    let data = [];\n\n    let first_timestamp = orders[orders.length - 1]['raw_timestamp'];\n    first_timestamp = first_timestamp - (first_timestamp % (3600000/4));\n\n    let curr_candle = {\n      date: new Date(first_timestamp),\n      open: orders[orders.length-1]['price'],\n      high: orders[orders.length-1]['price'],\n      low: orders[orders.length-1]['price'],\n      close: orders[orders.length-1]['price'],\n      volume: parseFloat(ethers.utils.formatUnits(orders[orders.length-1]['curr_1'], 'ether'))\n    };\n    let end_timestamp = first_timestamp + (3600000/4);\n    for(let i = orders.length-2; i >= 0; i--) {\n      const order = orders[i];\n      if(order[\"raw_timestamp\"] < end_timestamp) {\n        curr_candle['volume'] += parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'));\n        curr_candle['close'] = order['price'];\n        if(order['price'] > curr_candle['high']) {\n          curr_candle['high'] = order['price'];\n        } else if(order['price'] < curr_candle['low']) {\n          curr_candle['low'] = order['price'];\n        }\n      } else {\n        data.push(curr_candle);\n        curr_candle = {\n          date: new Date(end_timestamp),\n          open: curr_candle['close'],\n          high: Math.max(order['price'], curr_candle['close']),\n          low: Math.min(order['price'], curr_candle['close']),\n          close: order['price'],\n          volume: parseFloat(ethers.utils.formatUnits(order['curr_1'], 'ether'))\n        };\n        end_timestamp = end_timestamp + (3600000/4);\n      }\n    }\n    return data;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    var { width, ratio, orders } = this.props\n\n    var chart = <div id=\"CandleChart-loading\">Loading...</div>\n    if(orders.length > 0) {\n      var initialData = this.buildChartPoints(orders)\n      const ema10 = ema()\n        .options({\n          windowSize: 10, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema10 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema10) // Required, if not provided, log an error during calculation\n        .stroke(\"#ce4200\"); // Optional\n      const ema50 = ema()\n        .options({\n          windowSize: 50, // optional will default to 10\n          sourcePath: \"close\", // optional will default to close as the source\n        })\n        .skipUndefined(true) // defaults to true\n        .merge((d, c) => {d.ema50 = c;}) // Required, if not provided, log a error\n        .accessor(d => d.ema50) // Required, if not provided, log an error during calculation\n        .stroke(\"blue\"); // Optional\n      const calculatedData = ema50(ema10(initialData))\n\n      const margin = { left: 50, right: 60, top: 30, bottom: 50 }\n      const height = 500\n      var gridHeight = height - margin.top - margin.bottom;\n      var gridWidth = width - margin.left - margin.right;\n      var showGrid = true;\n      var yGrid = showGrid ? { \n          innerTickSize: -1 * gridWidth,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      var xGrid = showGrid ? { \n          innerTickSize: -1 * gridHeight,\n          tickStrokeDasharray: 'Solid',\n          tickStrokeOpacity: 0.2,\n          tickStrokeWidth: 1\n      } : {};\n      const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor( d => d.date )\n      const { data, xScale, xAccessor, displayXAccessor } = xScaleProvider( calculatedData )\n      const start = xAccessor(last(data))\n      const end = xAccessor(data[Math.max(0, data.length - 100)])\n      const xExtents = [start, end]\n\n      chart = (\n        <ChartCanvas\n          height={height}\n          ratio={ratio}\n          width={width}\n          margin={margin}\n          type=\"hybrid\"\n          seriesName=\"Data\"\n          data={data}\n          xScale={xScale}\n          xAccessor={xAccessor}\n          displayXAccessor={displayXAccessor}\n          xExtents={xExtents}\n          clamp={true}\n        >\n          <Chart id={1} height={400} yExtents={[d => [d.high+3, d.low-3], ema10.accessor(), ema50.accessor()]}>\n            <YAxis axisAt=\"right\" orient=\"right\" ticks={10} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...yGrid} />\n            <CandlestickSeries {...candlesAppearance} />\n            <LineSeries yAccessor={ema10.accessor()} stroke={ema10.stroke()}/>\n            <LineSeries yAccessor={ema50.accessor()} stroke={ema50.stroke()}/>\n            <CurrentCoordinate yAccessor={ema10.accessor()} fill={ema10.stroke()} />\n            <CurrentCoordinate yAccessor={ema50.accessor()} fill={ema50.stroke()} />\n            <OHLCTooltip origin={[10, 10]} xDisplayFormat={timeFormat(\"%m-%d-%y %I:%M %p\")} textFill=\"#9aa3ad\" />\n            <MovingAverageTooltip\n              origin={[10, 25]}\n              textFill=\"#9aa3ad\"\n              options={[\n                {\n                  yAccessor: ema10.accessor(),\n                  type: \"EMA\",\n                  stroke: ema10.stroke(),\n                  windowSize: ema10.options().windowSize,\n                  echo: \"some echo here\",\n                },\n                {\n                  yAccessor: ema50.accessor(),\n                  type: \"EMA\",\n                  stroke: ema50.stroke(),\n                  windowSize: ema50.options().windowSize,\n                  echo: \"some echo here\",\n                },\n              ]}\n            />\n          </Chart>\n          <Chart id={2} origin={(w, h) => [0, h - 100]} height={100} yExtents={d => d.volume}>\n            <XAxis axisAt=\"bottom\" orient=\"bottom\" stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" {...xGrid} />\n            <YAxis axisAt=\"left\" orient=\"left\" ticks={5} stroke=\"#9aa3ad\" tickStroke=\"#9aa3ad\" tickFormat={format(\".2s\")} />\n            <BarSeries\n              yAccessor={d => d.volume}\n              fill={d => (d.close > d.open ? \"rgba(0, 255, 0, 0.2)\" : \"rgba(255, 0, 0, 0.3)\")}\n            />\n          </Chart>\n          <CrossHairCursor stroke=\"#9aa3ad\" opacity={1} />\n        </ChartCanvas>\n      )\n    }\n    return (\n      <div className=\"CandleChart\">\n        {chart}\n      </div>\n    );\n  }\n}\n\nCandleChart = fitWidth(CandleChart);\nexport default CandleChart","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, List } from 'semantic-ui-react';\nimport CandleChart from './chart/chart';\n\n// Import CSS Files\nimport './stats.css';\n\n// Import src code\nimport { numberWithCommas } from '../../utils/general';\n\nclass Stats extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.buildStat = this.buildStat.bind(this);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the orders has increased in length\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Update the stats and the document title\n  updateStats() {\n    let users = {};\n    const { orders } = this.props;\n\n    if(orders.length === 0) {\n      return {\n        num_users: '...',\n        num_buys: '...',\n        num_sells: '...',\n        buy_volume: '...',\n        sell_volume: '...',\n        last_price: '...',\n        last_type: '...'\n      };\n    }\n\n    let new_stats = {\n      num_users: 0,\n      num_buys: 0,\n      num_sells: 0,\n      buy_volume: 0.0,\n      sell_volume: 0.0,\n      last_price: 0,\n      last_type: \"BUY\"\n    };\n\n    for(let i = 0; i < orders.length; i++) {\n      const order = orders[i];\n\n      // Check if maker is in user list\n      if(!(order[\"maker\"] in users)) {\n        users[order[\"maker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if taker is in user list\n      if(!(order[\"taker\"] in users)) {\n        users[order[\"taker\"]] = 1;\n        new_stats[\"num_users\"] += 1;\n      }\n\n      // Check if order is buy or sell and add the necessary info\n      const curr_1 = parseFloat(ethers.utils.formatUnits(order[\"curr_1\"].toString(), \"ether\"));\n      if(order[\"type\"] === \"BUY\") {\n        new_stats[\"num_buys\"] += 1;\n        new_stats[\"buy_volume\"] += curr_1;\n      } else if(order[\"type\"] === \"SELL\") {\n        new_stats[\"num_sells\"] += 1;\n        new_stats[\"sell_volume\"] += curr_1;\n      }\n    }\n\n    if(orders.length > 0) {\n      new_stats[\"last_price\"] = Math.round(orders[0][\"price\"] * 1000) / 1000;\n      new_stats[\"last_type\"] = orders[0][\"type\"];\n      new_stats[\"buy_volume\"] = Math.round(new_stats[\"buy_volume\"] * 100) / 100;\n      new_stats[\"sell_volume\"] = Math.round(new_stats[\"sell_volume\"] * 100) / 100;\n    }\n\n    let symbol = \"▲\";\n    if(new_stats[\"last_type\"] === \"SELL\") {\n      symbol = \"▼\";\n    }\n\n    document.title = new_stats[\"last_price\"] + \" \" + symbol + \" \" + this.props.currencies[1] + \"/\" + this.props.currencies[0];\n    return new_stats;\n  }\n\n  // Build each of the statistics given the raw stats and keys\n  buildStat(key, raw_stats) {\n    // If loading then print the loading dots\n    if(raw_stats[key] === \"...\") {\n      return <span className=\"loading_value\">{raw_stats[key]}</span>;\n    }\n\n    var color = null;\n    var value = numberWithCommas(raw_stats[key]);\n    if(key === \"buy_volume\" || key === \"sell_volume\") {\n      color = key === \"buy_volume\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]}</span></span>;\n    }\n\n    if(key === \"num_buys\" || key === \"num_sells\") {\n      color = key === \"num_buys\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()}</span>;\n    }\n\n    if(key === \"last_price\") {\n      color = raw_stats[\"last_type\"] === \"BUY\" ? \"important-green\" : \"important-red\";\n      value = <span className={color + \" value\"}>{value.toString()} <span className=\"sub_value\">{this.props.currencies[1]} / {this.props.currencies[0]}</span></span>;\n    }\n\n    return value;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, orders } = this.props;;\n\n    const keys = [\"num_users\", \"num_buys\", \"num_sells\", \"buy_volume\", \"sell_volume\", \"last_price\"];\n    let statistics = {};\n    const raw_stats = this.updateStats();\n    for(let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      statistics[key] = this.buildStat(key, raw_stats);\n    }\n\n    const chart = <div id=\"Stats-chart\"><CandleChart orders={orders} currencies={currencies} /></div>;\n\n    return (\n      <div className=\"Stats\">\n        {chart}\n        <div id=\"Stats-statistics\">\n          <Grid id=\"Stats-grid\">\n            <Grid.Row>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Buys</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_buys\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Buy Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"buy_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Sells</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_sells\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={4} computer={4} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Sell Vol.</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"sell_volume\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\">Last Price</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"last_price\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n              <Grid.Column mobile={8} tablet={8} computer={8} textAlign=\"center\">\n                <List.Item className=\"Stats-statistic\">\n                  <List.Content>\n                    <List.Header className=\"Stats-header\"># Users</List.Header>\n                    <List.Description className=\"Stats-content\">{statistics[\"num_users\"]}</List.Description>\n                  </List.Content>\n                </List.Item>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Stats","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid, Icon } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './markethistory.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MarketHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n\n    this.max_order = 1;\n  }\n\n  // Only rerender if the number of orders increases\n  shouldComponentUpdate(nextProps, nextState) {\n    if(this.props.orders.length !== nextProps.orders.length) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Retrive the maximum number in the order history for the color bands\n  getMax(orders) {\n    return Math.max.apply(Math, orders.slice(0, 250).map(function(o) { return o.curr_1 }));\n  }\n\n  // Function to render each row in the virtualized table\n  rowRenderer({index, key, style}) {\n    var item = this.props.orders[index];\n    \n    // Calculate the ratio of the order size vs the max order to get the color band size\n    var type = item[\"type\"];\n    var ratio = item[\"curr_1\"]/this.max_order * 100;\n    var direction = \"right\";\n    var color_0 = \"rgba(255, 0, 0, 0.2)\";\n    var color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Get the color of the color band using the order type\n    var color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    var custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    var price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    var participants = (<div className=\"MarketHistory-participants\">\n                          <div className=\"MarketHistory-taker\"><HumanName icon_only address={item[\"taker\"]} /></div>\n                          <div className=\"MarketHistory-arrow\"><Icon size=\"large\" name=\"long arrow alternate right\" /></div>\n                          <div className=\"MarketHistory-maker\"><HumanName icon_only address={item[\"maker\"]} /></div>\n                        </div>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            {participants}\n          </Grid.Column>\n        </Grid>\n      </div>\n    );\n  }\n\n  render() {\n    var { currencies, orders } = this.props;\n\n    // Update max order class variable (class var to not cause a rerender)\n    this.max_order = this.getMax(orders);\n    var background_item = null;\n\n    // Set the screen to loading if the orders are not available yet\n    if(orders.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default MarketHistory","import { ethers } from 'ethers';\n\n/** ################# HELPER FUNCTIONS ################# **/\n\n// Helper function to calculate the price of an order using BigNumber for all operations\nexport function getPrice(pay_amt, buy_amt, type) {\n\t// Convert amounts to BigNumbers\n\tpay_amt = ethers.utils.bigNumberify(pay_amt);\n\tbuy_amt = ethers.utils.bigNumberify(buy_amt);\n\n\t// If amounts are sufficiently small, just ignore and return false\n\tif(pay_amt.lte(ethers.utils.bigNumberify(\"1000\")) || buy_amt.lte(ethers.utils.bigNumberify(\"1000\"))) {\n\t\treturn false;\n\t}\n\n\tvar one = ethers.utils.bigNumberify(ethers.utils.parseUnits(\"1\", \"ether\"));\n\tvar price = 0;\n\n\t// Use the order type to decide operation for calculation and return values\n\tif(type === \"BUY\") {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(pay_amt).div(buy_amt).toString(), 'ether'));\n\t\treturn [price, buy_amt, pay_amt];\n\t} else {\n\t\tprice = parseFloat(ethers.utils.formatUnits(one.mul(buy_amt).div(pay_amt).toString(), 'ether'));\n\t\treturn [price, pay_amt, buy_amt];\n\t}\n}\n\n// Helper function to determine the type of an order (BUY or SELL)\nfunction getType(order, currencies, curr_0_addr, curr_1_addr) {\n\t// Extract what is being bought and what is being sold\n\tvar buy_addr = order[\"buy_gem\"].toUpperCase();\n\tvar pay_addr = order[\"pay_gem\"].toUpperCase();\n\n\t// Compare to curr_0 and curr_1 to decide if this is a BUY or a SELL\n\tif(buy_addr === curr_0_addr.toUpperCase() && pay_addr === curr_1_addr.toUpperCase()) {\n\t\treturn \"SELL\";\n\t} else if(buy_addr === curr_1_addr.toUpperCase() && pay_addr === curr_0_addr.toUpperCase()) {\n\t\treturn \"BUY\";\n\t} else {\n\t\treturn null;\n\t}\n}\n\n// Helper function to convert raw orders into processed orders\nfunction eventsToOrders(events, currencies, curr_0_addr, curr_1_addr) {\n\tvar orders = [];\n\tfor(var i = 0; i < events.length; i++) {\n\t\tvar order = events[i];\n\t\tvar type = getType(order, currencies, curr_0_addr, curr_1_addr);\n\t\tvar pay_amt = order[\"give_amt\"].toString();\n\t\tvar buy_amt = order[\"take_amt\"].toString();\n\t\tvar offer = getPrice(pay_amt, buy_amt, type);\n\t\tif(offer) {\n\t\t\tvar timestamp = new Date(order[\"timestamp\"] * 1000);\n\t\t\ttimestamp = timestamp.toLocaleTimeString(undefined, {hour: 'numeric', minute: '2-digit'}) + \" \" + timestamp.toLocaleDateString(undefined, {day: 'numeric', month: 'numeric', year: '2-digit'});\n\t\t\torder = {\n\t\t\t\t\"raw_timestamp\": order[\"timestamp\"] * 1000,\n\t\t\t\t\"timestamp\": timestamp,\n\t\t\t\t\"type\": type,\n\t\t\t\t\"price\": offer[0],\n\t\t\t\t\"curr_0\": offer[1],\n\t\t\t\t\"curr_1\": offer[2],\n\t\t\t\t\"taker\": order[\"taker\"],\n\t\t\t\t\"maker\": order[\"maker\"]\n\t\t\t};\n\t\t\torders.push(order);\n\t\t}\n\t}\n\torders.reverse();\n\treturn orders;\n}\n\n// Helper function to build the hash keys for the log queries\nfunction buildHashKey(first_addr, second_addr) {\n\treturn ethers.utils.solidityKeccak256(['bytes', 'bytes'], [first_addr, second_addr]);\n}\n\n/** ################# Functions for retrieving executed orders ################# **/\n\n// Function to unsubscribe from subscription from subscribeToNewOrders(). Should run for cleanup.\nexport async function unSubscribeToNewOrders(currencies, contracts) {\n    var { Market } = contracts;\n    \n    var curr_0_addr = contracts[currencies[0]].address;\n    var curr_1_addr = contracts[currencies[1]].address;\n    \n    const hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n    const hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n    \n    var filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n    var filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n    Market.removeAllListeners(filter1).removeAllListeners(filter2);\n}\n\n// Function to subscribe to receive callbacks for new orders that were executed on the given currency pair\n// addOrders is a callback function that is given an order object (outuput from eventsToOrders)\nexport async function subscribeToNewOrders(currencies, contracts, addOrders) {\n\tvar { Market } = contracts;\n\n\tvar curr_0_addr = contracts[currencies[0]].address;\n\tvar curr_1_addr = contracts[currencies[1]].address;\n\n\tconst hashKey1 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst hashKey2 = buildHashKey(curr_1_addr, curr_0_addr);\n\n\tvar filter1 = Market.filters.LogTake(null, hashKey1, null, null, null, null);\n\tvar filter2 = Market.filters.LogTake(null, hashKey2, null, null, null, null);\n\tMarket.on(filter1, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n\tMarket.on(filter2, (id, pair, maker, pay_gem, buy_gem, taker, take_amt, give_amt, timestamp, event) => {\n\t    var order = {\n\t\t\t\"id\": id,\n\t\t\t\"pair\": pair,\n\t\t\t\"maker\": maker,\n\t\t\t\"pay_gem\": pay_gem,\n\t\t\t\"buy_gem\": buy_gem,\n\t\t\t\"taker\": taker,\n\t\t\t\"take_amt\": take_amt,\n\t\t\t\"give_amt\": give_amt,\n\t\t\t\"timestamp\": timestamp\n\t    };\n\t    var orders = eventsToOrders([order], currencies, curr_0_addr, curr_1_addr);\n\t    addOrders(orders);\n\t});\n}\n\n// Function that gets the trades of a pair of currencies\n// Input:\n// \t\tcurrencies: [CURR_0, CURR_1]\n//\t\tcontracts: contracts object from main App\n//\t\tprovider\n//\t\ttoBlock (default: latest): latest block to search\n//\t\tnumBlocks (default: 5760 [1 day]): number of blocks to search going back from toBlock\nexport async function getPastOrders(currencies, contracts, provider, toBlock=-1, numBlocks=5760) {\n\tconst { Market } = contracts;\n\n\t// Calculate toBlock and fromBlock\n\tconst latestBlock = await provider.getBlockNumber();\n\ttoBlock = toBlock === -1 ? latestBlock : toBlock;\n\tconst fromBlock = toBlock - numBlocks;\n\n\t// Get the addresses for the currencies in question\n\tconst curr_0_addr = contracts[currencies[0]].address;\n\tconst curr_1_addr = contracts[currencies[1]].address;\n\n\t// Build a log filter for each permutation of currencies (0-1 and 1-0)\n\tconst hashKey01 = buildHashKey(curr_0_addr, curr_1_addr);\n\tconst filter01 = Market.filters.LogTake(null, hashKey01, null, null, null, null);\n\tfilter01.fromBlock = fromBlock;\n\n\tconst hashKey10 = buildHashKey(curr_1_addr, curr_0_addr);\n\tconst filter10 = Market.filters.LogTake(null, hashKey10, null, null, null, null);\n\tfilter10.fromBlock = fromBlock;\n\n\t// Wait for all of the events to load\n\tlet [events01, events10] = await Promise.all([provider.getLogs(filter01), provider.getLogs(filter10)]);\n\n\t// Decode the data from all of the logs\n\tevents01 = events01.map((item) => {\n\t  const parsed = Market.interface.events.LogTake.decode(item.data, item.topics);\n\t  return parsed;\n\t});\n\tevents10 = events10.map((item) => {\n\t  const parsed = Market.interface.events.LogTake.decode(item.data, item.topics);\n\t  return parsed;\n\t});\n\n\t// Concatenate all of the events and Sort by timestamp\n\tconst events = events01.concat(events10);\n\tevents.sort(function(first, second) {\n\t  return parseInt(first.timestamp.toString()) - parseInt(second.timestamp.toString());\n\t});\n\n\t// Parse the events into a more usable Order format and return\n\tconst orders = eventsToOrders(events, currencies, curr_0_addr, curr_1_addr);\n\treturn orders;\n}","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './leaderboard.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { getPrice } from '../../utils/orders';\nimport { numberWithCommas } from '../../utils/general';\n\n// Component that calculates and displays rankings for traders on the leaderboard\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data: [],\n      direction: 'ascending',\n      column: 'profit'\n    };\n  }\n\n  componentDidMount() {\n    // Convert raw orders into the proper format and store max profit someone has made over the data range\n    const new_data = this.eventsToData(this.props.orders);\n    let max_profit = 1;\n    if(new_data.length > 0) {\n      max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n    }\n    this.setState({ max_profit, data: new_data });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if more orders are added or if the sorting has changed\n    if(this.props.orders.length !== nextProps.orders.length || this.state.data !== nextState.data || this.state.direction !== nextState.direction || this.state.column !== nextState.column) {\n      if(this.props.orders.length !== nextProps.orders.length) {\n        const new_data = this.eventsToData(nextProps.orders);\n        // Need to update the max profit to calibrate the coloring bands\n        let max_profit = 1;\n        if(new_data.length > 0) {\n          max_profit = Math.max(Math.abs(new_data[0]['profit']), Math.abs(new_data[new_data.length-1]['profit']));\n        }\n        this.setState({ max_profit, data: new_data});\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Function to turn raw events into processed data for the leaderboard\n  eventsToData(events) {\n    let profiles = {};\n    for(let i = 0; i < events.length; i++) {\n      const order = events[i];\n\n      // Assemble all necessary vars\n      const maker = order[\"maker\"];\n      const taker = order[\"taker\"];\n      let buyer = null;\n      let seller = null;\n\n      // Add maker and taker into the dict if they are not present\n      if(!(maker in profiles)) {\n        profiles[maker] = this.newUserProfile(maker);\n      }\n      if(!(taker in profiles)) {\n        profiles[taker] = this.newUserProfile(taker);\n      }\n\n      // Set who the buyer and who the seller is\n      if(order[\"type\"] === \"BUY\") {\n        buyer = taker;\n        seller = maker;\n      } else {\n        buyer = maker;\n        seller = taker;\n      }\n\n      // Add to buyer and seller data dict\n      let profile_data = profiles[buyer];\n      profile_data[\"amount_1_given\"] = profile_data[\"amount_1_given\"].add(order[\"curr_1\"]);\n      profile_data[\"amount_0_received\"] = profile_data[\"amount_0_received\"].add(order[\"curr_0\"]);\n      profiles[buyer] = profile_data;\n\n      profile_data = profiles[seller];\n      profile_data[\"amount_0_given\"] = profile_data[\"amount_0_given\"].add(order[\"curr_0\"]);\n      profile_data[\"amount_1_received\"] = profile_data[\"amount_1_received\"].add(order[\"curr_1\"]);\n      profiles[seller] = profile_data;\n    }\n\n    let data = [];\n    for (const key in profiles) {\n      const avg_buy_order = getPrice(profiles[key][\"amount_1_given\"], profiles[key][\"amount_0_received\"], \"BUY\");\n      const avg_buy_price = avg_buy_order ? Math.round(avg_buy_order[0].toString() * 10) / 10 : \"N/A\";\n      const avg_sell_order = getPrice(profiles[key][\"amount_0_given\"], profiles[key][\"amount_1_received\"], \"SELL\");\n      const avg_sell_price = avg_sell_order ? Math.round(avg_sell_order[0].toString() * 10) / 10 : \"N/A\";\n      const profit = this.getProfit(avg_buy_order, avg_sell_order);\n      const data_point = {\n        \"user\": key,\n        \"amount_0_bought\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_received\"].toString(), 'ether') * 10) / 10,\n        \"avg_buy_price\": avg_buy_price,\n        \"amount_0_sold\": Math.round(ethers.utils.formatUnits(profiles[key][\"amount_0_given\"].toString(), 'ether') * 10) / 10,\n        \"avg_sell_price\": avg_sell_price,\n        \"profit\": profit\n      };\n      data.push(data_point);\n    }\n\n    data.sort(function(first, second) {\n      return second.profit - first.profit;\n    })\n\n    return data;\n  }\n\n\n  // Function that returns a row to be rendered in the virtualized table\n  rowRenderer({index, key, style}) {\n    const { max_profit } = this.state;\n    const { currencies, account } = this.props;\n    const item = this.state.data[index];\n\n    const ratio = Math.abs(item[\"profit\"])/max_profit * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(item[\"profit\"] > 0) {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    let color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    if(account === item[\"user\"]) {\n      color =  `#3f4a50`;\n    }\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    let profit_color = 'grey';\n    if(item[\"profit\"] > 0) {\n      profit_color = 'green';\n    } else if(item[\"profit\"] < 0) {\n      profit_color = 'red';\n    }\n\n    return (\n      <div className=\"Leaderboard-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            <HumanName address={item[\"user\"]} />\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_bought\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_buy_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} only={'computer tablet'}>\n            <span>{numberWithCommas(item[\"amount_0_sold\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[0]}</span></span>\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} only={'computer tablet'}>\n            {numberWithCommas(item[\"avg_sell_price\"])}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6}>\n            <span className={profit_color}>{numberWithCommas(item[\"profit\"]) + \" \"}<span className=\"Leaderboard-subtext\">{currencies[1]}</span></span>\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# HANDLERS ################# **/\n\n  // Function used to handle changes in sorting by the user for the table\n  handleSort(clicked_column) {\n    const { column, data, direction } = this.state;\n\n    if(column !== clicked_column) {\n      var new_data = data.concat().sort(function(first, second) {\n                      if(first[clicked_column] === \"N/A\") {\n                        return 1;\n                      } else if(second[clicked_column] === \"N/A\") {\n                        return -1;\n                      } else {\n                        return second[clicked_column] - first[clicked_column];\n                      }\n                    })\n      this.setState({\n        column: clicked_column,\n        data: new_data,\n        direction: 'ascending'\n      });\n    } else {\n      this.setState({ \n        data: data.reverse(),\n        direction: direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function that creates an empty user profile object\n  newUserProfile(address) {\n    return {\n          \"address\": address,\n          \"amount_0_given\": ethers.utils.bigNumberify(\"0\"), // Amount weth sold\n          \"amount_1_received\": ethers.utils.bigNumberify(\"0\"), // Amount dai received for sells\n          \"amount_1_given\": ethers.utils.bigNumberify(\"0\"), // Amount dai given for buys\n          \"amount_0_received\": ethers.utils.bigNumberify(\"0\"), // Amount weth bought\n        };\n  }\n\n  // Helper function to calculate profit given average buy and sell orders\n  getProfit(avg_buy_order, avg_sell_order) {\n    if(!avg_buy_order || !avg_sell_order) {\n      return 0;\n    } else {\n      var amount_sell = avg_sell_order[1];\n      var amount_buy = avg_buy_order[1];\n      var sell_price = avg_sell_order[0];\n      var buy_price = avg_buy_order[0];\n      var min_amount = amount_buy.lt(amount_sell) ? ethers.utils.formatUnits(amount_buy.toString(), 'ether') : ethers.utils.formatUnits(amount_sell.toString(), 'ether');\n      var profit = Math.round(min_amount * (sell_price - buy_price) * 100) / 100;\n      return profit;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading, data, column, direction } = this.state;\n\n    // Background Item is in case data is loading or empty\n    let background_item = null;\n\n    if(loading) {\n      background_item = (<div id=\"Leaderboard-empty\">Loading...</div>);\n    } else if(data.length === 0) {\n      background_item = (<div id=\"Leaderboard-empty\">NO DATA</div>);\n    }\n\n    // Grab sorting symbols\n    let symbol = \"▲\";\n    if(direction === 'descending') {\n      symbol = \"▼\";\n    }\n\n    // Build header list\n    const headers = {\n      \"name\": \"Name\",\n      \"amount_0_bought\": \"# Bought\",\n      \"avg_buy_price\": \"Avg. Buy\",\n      \"amount_0_sold\": \"# Sold\",\n      \"avg_sell_price\": \"Avg. Sell\",\n      \"profit\": \"Profit\"\n    };\n    headers[column] = headers[column] + symbol;\n\n    return (\n      <div className=\"Leaderboard\">\n        <Grid id=\"Leaderboard-table-header\">\n          <Grid.Column computer={4} tablet={6} mobile={10}>\n            {headers[\"name\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_bought')} only={'computer tablet'}>\n            {headers[\"amount_0_bought\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_buy_price')} only={'computer tablet'}>\n            {headers[\"avg_buy_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={2} onClick={() => this.handleSort('amount_0_sold')} only={'computer tablet'}>\n            {headers[\"amount_0_sold\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} onClick={() => this.handleSort('avg_sell_price')} only={'computer tablet'}>\n            {headers[\"avg_sell_price\"]}\n          </Grid.Column>\n          <Grid.Column computer={2} tablet={2} mobile={6} onClick={() => this.handleSort('profit')}>\n            {headers[\"profit\"]}\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={data.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"Leaderboard-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        {background_item}\n      </div>\n    );\n  }\n}\n\nexport default Leaderboard","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Grid } from 'semantic-ui-react';\nimport { AutoSizer, List } from 'react-virtualized';\n\n// Import CSS Files\nimport './myhistory.css';\n\n// Import src Code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass MyHistory extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true\n    };\n\n    this.my_orders = [];\n    this.max_order = 1;\n  }\n\n  componentDidMount() {\n    // If the orders prop is longer than 0 then set loading to false\n    if(this.props.orders.length > 0) {\n      this.setState({ loading: false });\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // Only update if the new state isn't loading or if the props orders has changed\n    if(this.state.loading && !nextState.loading) {\n      return true;\n    } else if(this.props.orders.length !== nextProps.orders.length) {\n      this.setState({ loading: false });\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  // Gets the max value from the order history\n  getMax() {\n    return Math.max.apply(Math, this.my_orders.map(function(o) { return o.curr_1 }));\n  }\n\n  // Extract orders that match the current account address and return the filtered list\n  getMyOrders() {\n    const { orders, account } = this.props;\n    let myOrders = [];\n\n    for(let i = 0; i < orders.length; i++) {\n      let order = orders[i];\n      if(order[\"maker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"taker\"];\n        new_order[\"type\"] = new_order[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n        myOrders.push(new_order);\n      } else if(order[\"taker\"] === account) {\n        let new_order = Object.assign({}, order);\n        new_order[\"participant\"] = new_order[\"maker\"];\n        myOrders.push(new_order);\n      }\n    }\n    return myOrders;\n  }\n\n  // Build the HTML for each row to be rendered in the virtualized table\n  // Includes getting the color bar for each row\n  rowRenderer({index, key, style}) {\n    const item = this.my_orders[index];\n    \n    // Getting the information for the coloring ratio by dividng by the max order\n    const type = item[\"type\"];\n    const ratio = item[\"curr_1\"]/this.max_order * 100;\n    const direction = \"right\";\n    let color_0 = \"rgba(255, 0, 0, 0.2)\";\n    let color_1 = \"rgba(0,0,0,0)\";\n    if(type === \"BUY\") {\n      color_0 = \"rgba(0, 255, 0, 0.1)\";\n      color_1 = \"rgba(0, 0, 0, 0)\";\n    }\n\n    // Getting the color for the color band\n    const color = index % 2 === 0 ? `#182026` : `#1c262c`;\n\n    const custom_style = { \n      backgroundColor: color,\n      backgroundImage: `linear-gradient(to ${direction}, ${color_0} , ${color_0}), linear-gradient(to ${direction}, ${color_1}, ${color_1})` ,\n      backgroundSize: `calc(${ratio}%) 100%`,\n      backgroundRepeat: `no-repeat`\n    };\n    style = Object.assign(custom_style, style);\n\n    // Construct the HTML row\n    const price = item[\"type\"] === \"BUY\" ? (<span className=\"green MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>) : (<span className=\"red MarketHistory-type\">{numberWithCommas(Math.round(item[\"price\"] * 100)/100)}</span>);\n    return (\n      <div className=\"MarketHistory-table-entry\" key={key} style={style}>\n        <Grid padded={true}>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {price}\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            {item[\"timestamp\"]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_0\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {numberWithCommas(Math.round(ethers.utils.formatUnits(item[\"curr_1\"], 'ether') * 100) / 100 )}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'} textAlign='center'>\n            <HumanName address={item[\"participant\"]} icon_only />\n          </Grid.Column>\n        </Grid>\n      </div>\n    )\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { loading } = this.state;\n    const { currencies } = this.props;\n\n    let background_item = null;\n    this.my_orders = this.getMyOrders();\n\n    if(loading) {\n      background_item = (<div id=\"MarketHistory-empty\">Loading...</div>);\n    } else if(this.my_orders.length === 0) {\n      background_item = (<div id=\"MarketHistory-empty\">NO ORDERS</div>);\n    } else {\n      this.max_order = this.getMax();\n    }\n\n    return (\n      <div className=\"MarketHistory\">\n        <Grid id=\"MarketHistory-table-header\">\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            Price\n          </Grid.Column>\n          <Grid.Column computer={4} tablet={4} mobile={6}>\n            Time\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={3}>\n            {currencies[0]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} mobile={4}>\n            {currencies[1]}\n          </Grid.Column>\n          <Grid.Column computer={3} tablet={3} only={'computer tablet'}>\n            Participants\n          </Grid.Column>\n        </Grid>\n        <AutoSizer style={{outline: 'none'}}>\n          {({ height, width }) => (\n            <List\n              width={width}\n              height={height - 50}\n              rowHeight={50}\n              rowCount={this.my_orders.length}\n              rowRenderer={(props) => this.rowRenderer(props)}\n              className=\"MarketHistory-infinite-list\"\n            >\n            </List>\n          )}\n        </AutoSizer>\n        { background_item }\n      </div>\n    );\n  }\n}\n\nexport default MyHistory","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { ethers } from 'ethers';\nimport { Sidebar, Segment, Icon, Input, Form, Button, Loader } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './sidebar.css';\n\n// Import src code\nimport HumanName from '../../utils/humanname/humanname';\nimport { numberWithCommas } from '../../utils/general';\n\nclass SideBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      visible: false,\n      amount: '0',\n      ui_amount: '',\n      currency_0_balance: \"0\",\n      currency_1_balance: \"0\",\n      id: null,\n      info: null,\n      owner: null,\n      bignumbers: {},\n      button_loading: false,\n      button_success: false,\n      button_error: false\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n    this.stopLoading = this.stopLoading.bind(this);\n    this.flashError = this.flashError.bind(this);\n    this.flashSuccess = this.flashSuccess.bind(this);\n  }\n\n  // Get the balances for each of the currencies since we will need that throughout the component\n  componentDidMount() {\n    this.generateBigNumbers();\n    this.updateInfo();\n  }\n\n  // Update the information in the sidebar and recursively call itself every 3 seconds\n  async updateInfo() {\n    const { account, currencies, options } = this.props;\n    if(this.state.visible && this.state.id) {\n      const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n      const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n      const info = await options.contracts.Market.getOffer(this.state.id);\n      const owner = await options.contracts.Market.getOwner(this.state.id);\n      this.setState({ currency_0_balance, currency_1_balance, info, owner });\n    }\n    setTimeout(this.updateInfo, 3000);\n  }\n\n  // Generate BigNumber represenatation of integers for easy arithmetic later\n  generateBigNumbers() {\n    let bignumbers = {};\n    for(let i = 0; i <= 10; i++) {\n      const key = i;\n      bignumbers[key] = ethers.utils.bigNumberify(key);\n    }\n    this.setState({ bignumbers });\n  }\n\n  // Helper function to set loading to false\n  stopLoading() {\n    this.setState({ loading: false });\n  }\n\n  // Need to update visible and the side_bar info key if a new order is passed in\n  async componentWillReceiveProps(nextProps) {\n    // Update if the new props for visibility are changed\n    if(nextProps.visible !== this.props.visible) {\n      this.setState({ visible: nextProps.visible });\n      if(nextProps.visible === false) {\n        this.setState({ info: null, owner: null, amount: '0', ui_amount: '', button_success: false, button_error: false, button_loading: false });\n      }\n    }\n    // Update if the information for the sidebar has changed\n    if(nextProps.sidebar_info !== this.props.sidebar_info) {\n      this.setState({ loading: true });\n      const info = await this.props.options.contracts.Market.getOffer(nextProps.sidebar_info[\"id\"]);\n      const owner = await this.props.options.contracts.Market.getOwner(nextProps.sidebar_info[\"id\"]);\n      this.setState({ id: nextProps.sidebar_info[\"id\"], info, owner, amount: '0', ui_amount: '' });\n      // Add artificial delay to show the new results are really updated\n      setTimeout(this.stopLoading, 50);\n    }\n  }\n\n  // Helper function to flash success on tx success\n  flashSuccess() {\n    const { toggleSidebar } = this.props;\n    this.setState({ button_success : true, button_loading: false });\n    setTimeout(toggleSidebar, 1500);\n  }\n\n  // Helper function to flash error on tx failure\n  flashError() {\n    this.setState({ button_error: true, button_loading: false });\n    setTimeout(() => this.setState({ button_error: false }), 1500);\n  }\n\n  // Most important function in the entire file since it actually interfaces\n  // and edits the blockchain.\n  async executeTrade(will_receive) {\n    const { sidebar_info } = this.props;\n\n    const id = sidebar_info[\"id\"];\n\n    // Log the inputs for the transaction so that you can always be 100% positive what is being sent\n    const inputs = {\n      \"id\": id,\n      \"will_receive\": will_receive.toString(),\n      \"will_receive_wholenums\": ethers.utils.formatUnits(will_receive.toString(), 'ether')\n    };\n    console.log(inputs);\n\n    try {\n      const tx = await this.props.options.contracts.Market.buy(id, will_receive.toString());\n      this.setState({ button_loading: true });\n      await tx.wait();\n      this.flashSuccess();\n    } catch(error) {\n      this.flashError();\n    }\n  }\n\n  // Handler for when user changes the amount to be bought\n  handleUserChange(value) {\n    let internal_value = 0;\n    try{\n      // Check to see if the value is not just white space\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether').toString();\n      }\n    } catch (err) {\n      console.log(err);\n      return;\n    }\n    this.setState({ ui_amount: value, amount: internal_value });\n  }\n\n  // Handler for when user uses percentage tool to update amount\n  handleAmountPercentageChange(value) {\n    const ui_value = ethers.utils.formatUnits(value.toString(), 'ether');\n    this.setState({ amount: value.toString(), ui_amount: ui_value });\n  }\n\n  // So we were passed in the most up to date info the older component had.\n  // However this can and will change if it was stale or other people are taking the order.\n  // This keeps the info up to date and fallsback onto the old data if an error happens.\n  getUpdatedInfo() {\n    const { info } = this.state;\n    const { sidebar_info } = this.props;\n\n    let info_obj = {};\n    // If info is empty then return null\n    if(!info) {\n      return null;\n    }\n\n    const buy_amt = info[0];\n    const pay_amt = info[2];\n\n    // Build information object depending on the types\n    if(sidebar_info[\"type\"] === \"BUY\") {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": pay_amt.toString(),\n        \"curr_1_amt\": buy_amt.toString()\n      };\n    } else {\n      info_obj = {\n        \"price\": sidebar_info[\"price\"],\n        \"curr_0_amt\": buy_amt.toString(),\n        \"curr_1_amt\": pay_amt.toString()\n      };\n    }\n\n    return info_obj;\n  }\n\n  // Calculate how much currency the user will receive\n  calcWillReceive() {\n    const { amount } = this.state;\n\n    // Don't forget that these are flipped from the actual smart contract docs since\n    // WE are the counterparties so buy_amt/pay_amt is flipped from expected\n    const buy_amt = ethers.utils.bigNumberify(this.state.info[0]);\n    const pay_amt = ethers.utils.bigNumberify(this.state.info[2]);\n\n    let amount_bn = ethers.utils.bigNumberify(amount);\n    try {\n      let will_receive = amount_bn.mul(buy_amt).div(pay_amt);\n      return will_receive;\n    } catch(err) {\n      return ethers.utils.bigNumberify(\"0\");\n    }\n  }\n\n  // Get the max amount possible to take from this order given the balances and offer\n  getMaxTake() {\n    const { sidebar_info } = this.props;\n    const { info, currency_0_balance, currency_1_balance } = this.state;\n\n    const pay_amt = ethers.utils.bigNumberify(info[2]);\n    const balance = sidebar_info[\"type\"] === \"BUY\" ? ethers.utils.bigNumberify(currency_0_balance) : ethers.utils.bigNumberify(currency_1_balance);\n    if(balance.lt(pay_amt)) {\n      return balance;\n    } else {\n      return pay_amt;\n    }\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, amount, ui_amount, currency_0_balance, currency_1_balance, bignumbers, loading, button_loading, button_error, button_success, owner } = this.state;\n    const { currencies, toggleSidebar, sidebar_info, options } = this.props;\n\n    // Invert the type since the action do as a taker is the inverse of the action of the maker\n    const action = sidebar_info[\"type\"] === \"BUY\" ? \"SELL\" : \"BUY\";\n    const subtitle = action === \"BUY\" ? (<span className=\"green\">{action}</span>) : (<span className=\"red\">SELL</span>);\n\n    // So we were passed in the most up to date info the older component had.\n    // However this can and will change if it was stale or other people are taking the order.\n    // This keeps the info up to date and fallsback onto the old data if an error happens.\n    const updated_info = this.getUpdatedInfo();\n    if(!updated_info || loading) {\n      return (\n        <div className=\"Side_bar\">\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n            <div id=\"Side_bar-x-container\">\n              <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n            </div>\n            <div id=\"Side_bar-title\">Take Order</div>\n            <Loader active>Loading</Loader>\n          </Sidebar>\n        </div>\n      );\n    }\n\n    // Build object that swaps values for buys and sells so that rendering is simple\n    let giving = {\n      \"currency\": null,\n      \"receive_currency\": null,\n      \"balance\": 0,\n      \"offered\": 0,\n      \"max_take\": this.getMaxTake(),\n      \"will_receive\": this.calcWillReceive(),\n      \"maker\": owner ? <HumanName address={owner} /> : \"Loading...\",\n    };\n    giving[\"ui_will_receive\"] = Math.round(ethers.utils.formatUnits(giving[\"will_receive\"].toString(), 'ether') * 1000) / 1000;\n\n    if(action === \"BUY\") {\n      giving[\"currency\"] = currencies[1];\n      giving[\"receive_currency\"] = currencies[0];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_1_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_1_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_1_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_1_amt\"], 'ether') * 1000) / 1000;\n    } else {\n      giving[\"currency\"] = currencies[0];\n      giving[\"receive_currency\"] = currencies[1];\n      giving[\"balance\"] = ethers.utils.bigNumberify(currency_0_balance);\n      giving[\"ui_balance\"] = Math.round(ethers.utils.formatUnits(currency_0_balance.toString(), 'ether') * 1000) / 1000;\n      giving[\"offered\"] = ethers.utils.bigNumberify(updated_info[\"curr_0_amt\"]);\n      giving[\"ui_offered\"] = Math.round(ethers.utils.formatUnits(updated_info[\"curr_0_amt\"], 'ether') * 1000) / 1000;\n    }\n\n    // Adjust the text on the button if an action or error just occurred\n    var button_text = action + \" \" + currencies[0];\n    button_text = button_success ? \"SUCCESS\" : button_text;\n    button_text = button_error ? \"FAILED\" : button_text;\n\n    return (\n      <div className=\"Side_bar\">\n        <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Side_bar\">\n          <div id=\"Side_bar-x-container\">\n            <Icon name=\"close\" onClick={toggleSidebar} id=\"Side_bar-x\" size=\"large\" />\n          </div>\n          <div id=\"Side_bar-title\">Take Order</div>\n          <div id=\"Side_bar-subtitle\">How much would you like to {subtitle}?</div>\n          \n          <div id=\"Side_bar-info\">\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Maker:</div>\n              <div className=\"Side_bar-info-content\">{giving[\"maker\"]}</div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Price:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(updated_info[\"price\"])} <span id=\"Side_bar-exchange\">{currencies[1]} / {currencies[0]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Balance {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_balance\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n\n            <div className=\"Side_bar-info-item\">\n              <div className=\"Side_bar-info-title\">Offered {giving[\"currency\"]}:</div>\n              <div className=\"Side_bar-info-content\">{numberWithCommas(giving[\"ui_offered\"])} <span id=\"Side_bar-exchange\">{giving[\"currency\"]}</span></div>\n            </div>\n          </div>\n\n          <Form size='tiny' id=\"Side_bar-form\">\n            <Form.Field>\n              <div>\n                <div className=\"Side_bar-info-title\">Spend {giving[\"currency\"]}:</div>\n                <Input\n                  label={{ basic: true, content: giving[\"currency\"] }}\n                  labelPosition='right'\n                  placeholder='Enter Amount...'\n                  value={ui_amount}\n                  onChange={(e) => { this.handleUserChange(e.target.value) }}\n                  disabled={options.readOnly}\n                />\n              </div>\n            </Form.Field>\n            <Button.Group id=\"Side_bar-mini-buttons\" size='mini' basic>\n              <Button disabled={options.readOnly} onClick={ () => this.handleUserChange(\"\") } >0%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[4])) } >25%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].div(bignumbers[2])) } >50%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"].mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n              <Button disabled={options.readOnly} onClick={ () => this.handleAmountPercentageChange(giving[\"max_take\"]) } >100%</Button>\n            </Button.Group>\n          </Form>\n          <div className=\"Side_bar-info-item\">\n            <div className=\"Side_bar-info-title\">Will Receive</div>\n            <div className=\"Side_bar-info-content\">{giving[\"ui_will_receive\"].toString() + \" \" + giving[\"receive_currency\"]}</div>\n          </div>\n          <Button className=\"BuySell-button\" loading={button_loading} color={action === \"BUY\" ? \"green\" : \"red\"} disabled={options.readOnly || button_text !== action + \" \" + currencies[0] || giving[\"will_receive\"].lte(ethers.utils.bigNumberify(\"1000\")) || ethers.utils.bigNumberify(amount).gt(giving[\"max_take\"])} onClick={() => this.executeTrade(giving[\"will_receive\"]) }>{button_text}</Button>\n        </Sidebar>\n      </div>\n    );\n  }\n}\n\nexport default SideBar\n","import { ethers } from 'ethers';\n\n// Helper function to process raw events into order objects\nfunction processOpenOrders(rawOrders, type) {\n\tvar n = rawOrders[\"ids\"].length\n\tvar orders = []\n\tfor(var i = 0; i < n; i++) {\n\t\tif(rawOrders[\"ids\"][i].toString() !== \"0\") { // && rawOrders[\"owners\"][i] === account\n\t\t\tvar id = rawOrders[\"ids\"][i].toString()\n\t\t\tvar maker = rawOrders[\"owners\"][i]\n\t\t\tvar pay_amount = ethers.utils.formatUnits(rawOrders[\"payAmts\"][i].toString(), 'ether')\n\t\t\tvar buy_amount = ethers.utils.formatUnits(rawOrders[\"buyAmts\"][i].toString(), 'ether') \n\t\t\tvar price = 0\n\t\t\tvar order = {}\n\t\t\tif(type === \"BUY\") {\n\t\t\t\tprice = Math.round(pay_amount / buy_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": buy_amount,\n\t\t\t\t\t\"curr_1_amt\": pay_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tprice = Math.round(buy_amount / pay_amount * 1000) / 1000\n\t\t\t\tbuy_amount = Math.round(buy_amount * 1000) / 1000\n\t\t\t\tpay_amount = Math.round(pay_amount * 1000) / 1000\n\t\t\t\torder = {\n\t\t\t\t\t\"price\": price,\n\t\t\t\t\t\"curr_0_amt\": pay_amount,\n\t\t\t\t\t\"curr_1_amt\": buy_amount,\n\t\t\t\t\t\"id\": id,\n\t\t\t\t\t\"type\": type,\n\t\t\t\t\t\"maker\": maker\n\t\t\t\t}\n\t\t\t}\n\t\t\torders.push(order)\n\t\t}\n\t}\n\treturn orders\n}\n\n// Function that gets a list of open orders for a pair of currencies and a type (BUY or SELL)\nexport async function getOpenOrders(type, currencies, contracts) {\n\tconst { Market } = contracts;\n\n\tif(currencies.length === 2) {\n\t\tconst token_addr_0 = contracts[currencies[0]].address;\n\t\tconst token_addr_1 = contracts[currencies[1]].address;\n\n\t\tlet pay_token = null;\n\t\tlet buy_token = null;\n\n\t\tif(type === \"BUY\") {\n\t\t\tpay_token = token_addr_1;\n\t\t\tbuy_token = token_addr_0;\n\t\t} else {\n\t\t\tpay_token = token_addr_0;\n\t\t\tbuy_token = token_addr_1;\n\t\t}\n\n\t\tconst rawOrders = await contracts.SupportMethods.getOffers(Market.address, pay_token, buy_token);\n\t\tlet orders = [];\n\t\tif(rawOrders) {\n\t\t\torders = processOpenOrders(rawOrders, type);\n\t\t}\n\t\treturn orders;\n\t}\n\n\treturn [];\n}","// Import Major dependencies\nimport React, { Component } from 'react';\nimport { Grid, Tab, Responsive } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './market.css';\n\n// Import src code\nimport OrderListV2 from './orderlistV2/orderlistV2';\nimport LimitOrder from './limitorder/limitorder';\nimport MarketOrder from './marketorder/marketorder';\nimport MyOrders from './myorders/myorders';\nimport Stats from './stats/stats';\nimport MarketHistory from './markethistory/markethistory';\nimport Leaderboard from './leaderboard/leaderboard';\nimport MyHistory from './myhistory/myhistory';\nimport SideBar from './sidebar/sidebar';\n\n// Import orderbook read functions\nimport { getPastOrders, subscribeToNewOrders, unSubscribeToNewOrders } from '../utils/orders';\nimport { getOpenOrders } from '../utils/openorders';\n\nclass Market extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      account: \"\",\n      sidebar_info: {\n        \"price\": 0,\n        \"curr_0_amt\": 0,\n        \"curr_1_amt\": 0,\n        \"id\": \"\",\n        \"type\": \"\"\n      },\n      past_orders: [],\n      open_buy_orders: [],\n      open_sell_orders: [],\n      balances: ['0', '0'],\n      timers: [null, null]\n    };\n\n    this.updateBalances = this.updateBalances.bind(this);\n    this.updateOpenOrders = this.updateOpenOrders.bind(this);\n  }\n\n  async componentDidMount() {\n    // Retrieve starting data and subscribe to future live feeds\n    const { currencies, options } = this.props;\n    \n    // Store account in state for convenience\n    let account = await options.signer.getAddress();\n    this.setState({ account });\n    \n    // Start polls for open orders and balances\n    this.updateOpenOrders();\n    this.updateBalances();\n\n    // Get past orders for 5 years (5 * 5760)\n    let past_orders = await getPastOrders(currencies, options.contracts, options.provider, -1, 5760*5);\n    this.setState({ past_orders });\n\n    // Subscribe to updates for new orders and pass in callback\n    subscribeToNewOrders(currencies, options.contracts, this.addOrders);\n  }\n\n  // Cleaning up timers and unsubscribing from live feeds\n  componentWillUnmount() {\n    for(let i = 0; i < this.state.timers.length; i++) {\n      if(this.state.timers[i] !== null) {\n        clearTimeout(this.state.timers[i]);\n      }\n    }\n\n    const { options, currencies } = this.props;\n    unSubscribeToNewOrders(currencies, options.contracts);\n  }\n\n  /** ################# POLLING FUNCTIONS ################# **/\n\n  // Function to periodically update the balances in the state from the blockchain\n  async updateBalances() {\n    const { options, currencies } = this.props;\n    const { account } = this.state;\n\n    if(account !== \"\") {\n      const currency_0_balance = await options.contracts[currencies[0]].balanceOf(account);\n      const currency_1_balance = await options.contracts[currencies[1]].balanceOf(account);\n      const balances = [currency_0_balance, currency_1_balance];\n      this.setState({ balances });\n    }\n\n    // Set timer to recall same function after 3 seconds and store the timer in state\n    // for cleanup\n    const timer = setTimeout(this.updateBalances, 3000);\n    let timers = this.state.timers;\n    timers[0] = timer;\n    this.setState({ timers });\n  }\n\n  // Function to periodically update the list of open orders from the blockchain\n  async updateOpenOrders() {\n    const [open_buy_orders, open_sell_orders] = await Promise.all([getOpenOrders(\"BUY\", this.props.currencies, this.props.options.contracts), getOpenOrders(\"SELL\", this.props.currencies, this.props.options.contracts)]);\n\n    // Set timer to recall same function after 5 seconds and store the timer in state\n    // for cleanup\n    const timer = setTimeout(this.updateOpenOrders, 5000);\n    let timers =  this.state.timers;\n    timers[1] = timer;\n    this.setState({ timers, open_buy_orders, open_sell_orders });\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function used as a callback function for the subscription function\n  addOrders = (orders) => {\n    this.setState({ past_orders: orders.concat(this.state.past_orders) });\n  }\n\n  // Function to set the order information for the sidebar and sets it to visible\n  setSidebar = (info) => {\n    this.setState({ sidebar_info: info, visible: true });\n  }\n\n  // Function to toggle the visibility of the order sidebar\n  toggleSidebar = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  // Function to build the title of the Market page if valid currencies are selected\n  buildTitle() {\n    const { currencies } = this.props;\n    let title = \"Market: \";\n    title = currencies.length === 2 ? title + currencies[0] + \"/\" + currencies[1] : title;\n    return title;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { visible, sidebar_info, account, past_orders, balances, open_buy_orders, open_sell_orders } = this.state;\n    const { currencies, options } = this.props;\n\n    // Build the title\n    const title = this.buildTitle();\n\n    // Concat buy and sell orders and sort to create an All Orders book\n    const all_open_orders = open_buy_orders.concat(open_sell_orders);\n    all_open_orders.sort(function(a, b) { return parseInt(a[3]) > parseInt(b[3]) ? 1 : -1 });\n\n    // Get the last order in the order book\n    const last_order = past_orders.length > 0 ? past_orders[0] : \"\";\n\n    // Create the panels for the Activity Pane Tabs\n    let activity_panes = [\n      { menuItem: 'Market History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketHistory currencies={currencies} options={options} orders={past_orders} /></Tab.Pane> },\n      { menuItem: '5-D Leaderboard', render: () => <Tab.Pane className=\"Market-tab-pane\"><Leaderboard currencies={currencies} account={account} options={options} orders={past_orders} /></Tab.Pane> },\n    ];\n\n    // If in readOnly mode then add more panes for account specific information\n    if(!options.readOnly) {\n      const logged_in_panes = [\n        { menuItem: 'Open Orders', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyOrders currencies={currencies} options={options} orders={all_open_orders} account={account} /></Tab.Pane> },\n        { menuItem: 'My History', render: () => <Tab.Pane className=\"Market-tab-pane\"><MyHistory currencies={currencies} options={options} orders={past_orders} account={account} /></Tab.Pane> },\n      ];\n      activity_panes = logged_in_panes.concat(activity_panes);\n    }\n\n    // Create the panels for the Order Pane Tabs\n    const buy_panes = [\n      { menuItem: 'Limit Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><LimitOrder currencies={currencies} options={options} last_price={last_order[\"price\"]} balances={balances} /></Tab.Pane> },\n      { menuItem: 'Market Order', render: () => <Tab.Pane className=\"Market-tab-pane\"><MarketOrder currencies={currencies} options={options} balances={balances} /></Tab.Pane> }\n    ];\n\n    return (\n      <div className=\"Market\">\n        <SideBar currencies={currencies} toggleSidebar={this.toggleSidebar} sidebar_info={sidebar_info} visible={visible} account={account} options={options} />\n        <div id=\"Market-title\"><span className=\"Market-h1\">{title}</span></div>\n        <div className=\"Market-headers\">5-Day Market Stats</div>\n        <div id=\"Market-stats\"><Stats currencies={currencies} options={options} orders={past_orders} /></div>\n\n        <Grid divided id=\"Market-orderlists\">\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Center</div>\n            <div id=\"Market-buysell\">\n              <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={buy_panes} />\n            </div>\n          </Grid.Column>\n          <Grid.Column className=\"Market-orderlist\" computer={8} tablet={8} mobile={16}>\n            <div className=\"Market-headers\">Order Book</div>\n            <OrderListV2 currencies={currencies} account={account} options={options} last_order={last_order} buy_orders={open_buy_orders} sell_orders={open_sell_orders} setSidebar={this.setSidebar} />\n          </Grid.Column>\n        </Grid>\n\n        <div className=\"Market-headers\">Activity Center</div>\n        <div id=\"Market-activity-pane\">\n          <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes} />\n          </Responsive>\n          <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n            <Tab menu={{ fluid: true, tabular: true, attached: 'top' }} panes={activity_panes.slice(0,3)} />\n          </Responsive>\n        </div>\n\n        <Responsive maxWidth={Responsive.onlyTablet.minWidth}>\n          <div id=\"Market-leaderboard-pane\">\n            <div className=\"Market-headers\">Leaderboard</div>\n            <Leaderboard currencies={currencies} account={account} options={options} orders={past_orders} />\n          </div>\n        </Responsive>\n      </div>\n    );\n  }\n}\n\nexport default Market","import React, { Component } from 'react';\nimport { Transition } from 'semantic-ui-react';\nimport './home.css';\n\nclass Home extends Component {\n  // Simple Home landing static page.\n  render() {\n    return (\n      <div id=\"Home\">\n        <Transition transitionOnMount={true} animation='fade up' duration={1500}>\n          <div id=\"Home-title\">\n            OasisX\n          </div>\n        </Transition>\n        <Transition transitionOnMount={true} animation='fade up' duration={3500}>\n          <div id=\"Home-subtitle\">\n            The fastest UI for Oasis.\n          </div>\n        </Transition>\n      </div>\n    )\n  }\n}\n\nexport default Home;","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom';\nimport { Input, Button } from 'semantic-ui-react'\nimport './login.css'\nimport HumanName from '../utils/humanname/humanname'\n\nclass Login extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selected: \"\",\n      phrase: \"\",\n      password: \"\",\n      redirect: false,\n      saved_wallets: {},\n      loading: false\n    }\n\n    this.handleRedirect = this.handleRedirect.bind(this)\n  }\n\n  componentDidMount() {\n    var saved_wallets = this.getSavedAccounts()\n    this.setState({ saved_wallets })\n  }\n\n  handleFieldChange(name, value) {\n    this.setState({ [name]: value })\n  }\n\n  handleRedirect() {\n    this.setState({ redirect: true, loading: false })\n  }\n\n  getSavedAccounts() {\n    var localStorage = window.localStorage\n    if(localStorage.getItem(\"encrypted_wallets\")) {\n      var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n      return stored_wallets\n    }\n    return {}\n  }\n\n  async handleLogin() {\n    var { phrase, password, selected } = this.state\n    var { options } = this.props\n\n    this.setState({ loading: true })\n\n    if(selected === \"\" && phrase !== \"\") {\n      options.handleLogin(phrase, password)\n    } else if(selected !== \"\") {\n      await options.handleReLogin(selected, this.state.saved_wallets[selected], password)\n    } else {\n      console.log(\"ERROR: No account specified\")\n    }\n\n    this.setState({ phrase: \"\", password: \"\", selected: \"\" })\n    setTimeout(this.handleRedirect, 1000)\n  }\n\n  render() {\n    var { phrase, password, redirect, saved_wallets, selected, loading } = this.state\n    var { options } = this.props\n\n    if(redirect) {\n      return <Redirect to=\"/\" />\n    }\n\n    var wallet_list = Object.keys(saved_wallets).map((key) => {\n      var active = selected === key ? true : false\n      var classes = active ? 'Login-option Login-highlighted' : 'Login-option'\n      var field_change = active ? \"\" : key\n      field_change = loading ? this.state.selected : field_change\n      return <div key={key} className={classes} onClick={() => this.handleFieldChange(\"selected\", field_change) } ><HumanName address={key} inactive_link /></div>\n    })\n\n    return (\n      <div id=\"Login\">\n        <div className=\"LimitOrder-headers\">Login</div>\n        <div id=\"Login-wallets\">\n          {wallet_list}\n        </div>\n        <br />\n        <Input\n          label={{ content: \"Mneumonic Phrase\" }}\n          labelPosition='left'\n          placeholder='Enter Phrase...'\n          value={phrase}\n          onChange={(e) => { this.handleFieldChange(\"phrase\", e.target.value) }}\n          disabled={!options.readOnly || selected !== \"\" || loading}\n          className=\"Login-input\"\n          fluid\n        />\n        <Input\n          label={{ content: \"Password\" }}\n          labelPosition='left'\n          placeholder='Enter STRONG Password...'\n          value={password}\n          onChange={(e) => { this.handleFieldChange(\"password\", e.target.value) }}\n          disabled={!options.readOnly || loading}\n          className=\"Login-input\"\n          type=\"password\"\n          fluid\n        />\n        <br />\n        <Button id=\"Login-submit\" color='green' disabled={!options.readOnly || password === \"\" || (phrase === \"\" && selected === \"\")} loading={loading} onClick={() => this.handleLogin()} >Login</Button>\n      </div>\n    )\n  }\n}\n\nexport default Login;","import React, { Component } from 'react'\nimport { ethers } from 'ethers';\nimport { Input, Form, Button } from 'semantic-ui-react'\n\nimport './wrapstation.css'\n\nclass WrapStation extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      amount_wrap: '0',\n      ui_amount_wrap: '',\n      amount_unwrap: '0',\n      ui_amount_unwrap: '',\n      bignumbers: {},\n      loading: [false, false],\n      error: [false, false],\n      success: [false, false]\n    }\n\n    this.flashSuccess = this.flashSuccess.bind(this)\n    this.flashError = this.flashError.bind(this)\n  }\n\n  componentDidMount() {\n    var bignumbers = {}\n    for(var i = 0; i <= 10; i++) {\n      var key = i\n      bignumbers[key] = ethers.utils.bigNumberify(key)\n    }\n\n    this.setState({ bignumbers })\n  }\n\n  handlePercentUpdate(name, value) {\n    var ui_value = ethers.utils.formatUnits(value.toString(), 'ether')\n    if(name === \"amount_wrap\") {\n      this.setState({ amount_wrap: value, ui_amount_wrap: ui_value })\n    } else if(name === \"amount_unwrap\") {\n      this.setState({ amount_unwrap: value, ui_amount_unwrap: ui_value })\n    } else {\n      return\n    }\n  }\n\n  handleUserUpdate(name, value) {\n    var internal_value = 0\n    try{\n      if(/\\S/.test(value)) {\n        internal_value = ethers.utils.parseUnits(value.toString(), 'ether')\n      }\n    } catch (err) {\n      console.log(err)\n      return\n    }\n\n    if(name === \"ui_amount_wrap\") {\n      this.setState({ ui_amount_wrap: value, amount_wrap: internal_value })\n    } else if(name === \"ui_amount_unwrap\") {\n      this.setState({ ui_amount_unwrap: value, amount_unwrap: internal_value })\n    } else {\n      return\n    }\n  }\n\n\n  flashSuccess(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = true\n    error[index] = false\n    this.setState({ loading, success, error })\n    setTimeout(() => this.reset(index), 1500)\n  }\n\n  flashError(index) {\n    var { loading, success, error } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = true\n    this.setState({ loading, success, error })\n    setTimeout(() => {\n      var { loading, success, error } = this.state\n      loading[index] = false\n      success[index] = false\n      error[index] = false\n      this.setState({ error })\n    }, 1500)\n  }\n\n  reset(index) {\n    var { loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap } = this.state\n    loading[index] = false\n    success[index] = false\n    error[index] = false\n    if(index === 0) {\n      amount_wrap = '0'\n      ui_amount_wrap = ''\n    }\n    if(index === 1) {\n      amount_unwrap = '0'\n      ui_amount_unwrap = ''\n    }\n    this.setState({ loading, success, error, amount_wrap, amount_unwrap, ui_amount_wrap, ui_amount_unwrap })\n  }\n\n  onWrap = async () => {\n    // Grab the wrap function from the contract instance and the account and amount we want to execute it with\n    const deposit = this.props.options.contracts.WETH.deposit\n    var amount = this.state.amount_wrap\n\n    // Need to check if the amount value is an empty string/undefined/null and that it's greater than 0\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[0] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO WRAPPER...\")\n      try {\n        var tx = await deposit({value: amount})\n        await tx.wait()\n        this.flashSuccess(0)\n      } catch (error) {\n        this.flashError(0)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  onUnwrap = async () => {\n    const withdraw = this.props.options.contracts.WETH.withdraw\n    var amount = this.state.amount_unwrap\n\n    if(amount && amount > 0) {\n      var { loading } = this.state\n      loading[1] = true\n      this.setState({ loading })\n      console.log(\"SENDING \" + amount + \" TO UNWRAPPER...\")\n      try {\n        var tx = await withdraw(amount.toString())\n        await tx.wait()\n        this.flashSuccess(1)\n      } catch (error) {\n        this.flashError(1)\n      }\n    } else {\n      console.log(\"Error: No amount chosen\")\n    }\n  }\n\n  render() {\n    var { weth_balance, eth_balance, options } = this.props\n    var { ui_amount_wrap, ui_amount_unwrap, bignumbers, loading, success, error } = this.state\n\n    // Convert to BigNumbers since they will have potential math done on them (risk of overflow/underflow)\n    eth_balance = ethers.utils.bigNumberify(eth_balance)\n    weth_balance = ethers.utils.bigNumberify(weth_balance)\n\n    var button_text = [\"WRAP\", \"UNWRAP\"]\n    for(var i = 0; i < button_text.length; i++) {\n      if(success[i]) {\n        button_text[i] = \"SUCCESS\"\n      }\n      if(error[i]) {\n        button_text[i] = \"FAILED\"\n      }\n    }\n\n    return (\n      <div className=\"WrapStation\">\n        <div id=\"WrapStation-title\">Wrap / Unwrap</div>\n        <Form onSubmit={this.handleSubmit} size='tiny' id=\"WrapStation-form\">\n          <div className=\"WrapStation-headers\">Wrap <span id=\"WrapStation-warning\"><span className=\"red\">WARNING:</span> DO NOT WRAP ALL YOUR ETHER</span></div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={11}>\n              <Input\n                label={{ basic: true, content: \"ETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount ETH...'\n                value={ui_amount_wrap}\n                disabled={ loading[0] || error[0] || success[0] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_wrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[0] || error[0] || success[0] || options.readOnly || ui_amount_wrap === \"\" } loading={loading[0]} width={4} className=\"WrapStation-button\" color={error[0] ? 'red' : 'green'} size='small' onClick={ () => this.onWrap() } >{button_text[0]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_wrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[0] || error[0] || success[0] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_wrap\", eth_balance.mul(bignumbers[9]).div(bignumbers[10])) } >90%</Button>\n          </Button.Group>\n          <div className=\"WrapStation-headers\">Unwrap</div>\n          <Form.Group unstackable className=\"WrapStation-formgroup\">\n            <Form.Field width={10}>\n              <Input\n                label={{ basic: true, content: \"WETH\" }}\n                labelPosition='right'\n                placeholder='Enter Amount WETH...'\n                value={ui_amount_unwrap}\n                disabled={ loading[1] || error[1] || success[1] || options.readOnly }\n                onChange={(e) => { this.handleUserUpdate('ui_amount_unwrap', e.target.value) }}\n              />\n            </Form.Field>\n            <Form.Button disabled={ loading[1] || error[1] || success[1] || options.readOnly || ui_amount_unwrap === \"\" } loading={loading[1]} width={4} className=\"WrapStation-button\" color={error[1] ? 'red' : 'green'} size='small' onClick={ () => this.onUnwrap() } >{button_text[1]}</Form.Button>\n          </Form.Group>\n          <Button.Group className=\"WrapStation-mini-buttons\" size='mini' basic inverted>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handleUserUpdate(\"ui_amount_unwrap\", \"\") } >0%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[4])) } >25%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.div(bignumbers[2])) } >50%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance.mul(bignumbers[3]).div(bignumbers[4])) } >75%</Button>\n            <Button disabled={ loading[1] || error[1] || success[1] || options.readOnly } onClick={ () => this.handlePercentUpdate(\"amount_unwrap\", weth_balance) } >100%</Button>\n          </Button.Group>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default WrapStation\n","// Import Major Dependencies\nimport React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { ethers } from 'ethers';\nimport { Header, Table, Checkbox, Icon, Button } from 'semantic-ui-react'\n\n// Import CSS Files\nimport './infobar.css'\n\n// Import src code\nimport WrapStation from './wrapstation/wrapstation'\nimport HumanName from '../utils/humanname/humanname'\n\n// Set up constants\nconst MAX_VAL = \"115792089237316195423570985008687907853269984665640564039457584007913129639935\";\n\n// Class that controls the side information bar that contains the account balances\n// and the wrapping/unwrapping widget.\nclass Infobar extends Component {\n  constructor(props, context) {\n    super(props);\n    this.state = {\n      currencies: {\n        \"WETH\": { balance: 0, approved: 0 },\n        \"DAI\": { balance: 0, approved: 0 },\n        \"MKR\": { balance: 0, approved: 0 },\n        \"ETH\": { balance: 0, approved: 0  }\n      },\n      account: \"\"\n    };\n\n    this.updateInfo = this.updateInfo.bind(this);\n  }\n\n  componentDidMount() {\n    // Kick off the update timeout loop\n    this.updateInfo();\n  }\n\n  // Timed recursive function that periodically updates the information from the blockchain.\n  async updateInfo() {\n    const { options } = this.props;\n\n    // If the page is not readOnly then get balances for the active account.\n    if(!options.readOnly) {\n      const account = await options.signer.getAddress();\n      const market_address = options.contracts.Market.address;\n\n      // Retrieve the balances and approvals\n      const [weth_balance, dai_balance, mkr_balance] = await this.getBalances(account);\n      const [weth_approval, dai_approval, mkr_approval] = await this.getApprovals(account, market_address);\n      const eth_balance = await options.provider.getBalance(account);\n\n      // Create and store currencies object\n      var currencies = {\n        \"WETH\": { balance: weth_balance.toString(), approved: weth_approval.toString() },\n        \"DAI\": { balance: dai_balance.toString(), approved: dai_approval.toString() },\n        \"MKR\": { balance: mkr_balance.toString(), approved: mkr_approval.toString() },\n        \"ETH\": { balance: eth_balance.toString(), approved: MAX_VAL  }\n      };\n      this.setState({ currencies, account });\n    }\n\n    // Call the same function after timeout of 3 seconds\n    setTimeout(this.updateInfo, 3000);\n  }\n\n  /** ################# BLOCKCHAIN WRITE FUNCTIONS ################# **/\n\n  // Approves the market contract to use a given amount of a given currency.\n  async approveCurrencyForAmount(currency, amount) {\n    var { options } = this.props\n    \n    let market_address = options.contracts.Market.address\n\n    if(currency in options.contracts) {\n      var contract = options.contracts[currency]\n      await contract.approve(market_address, amount)\n    }\n  }\n\n  // Approves a MAX_VAL amount of a given currency for the market contract.\n  approveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, MAX_VAL)\n  }\n\n  // Approves a 0 amount of a given currency for the market contract.\n  unapproveCurrency(currency) {\n    this.approveCurrencyForAmount(currency, \"0\")\n  }\n\n  // Toggles between approving and unapproving a currency.\n  toggleApproval(currency, current_approval) {\n    let new_approval = !current_approval\n    if(new_approval) {\n      this.approveCurrency(currency)\n    } else {\n      this.unapproveCurrency(currency)\n    }\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to get balances for all the currencies for the given account.\n  async getBalances(account) {\n    const { options } = this.props;\n    const weth_promise = options.contracts.WETH.balanceOf(account);\n    const dai_promise = options.contracts.DAI.balanceOf(account);\n    const mkr_promise = options.contracts.MKR.balanceOf(account);\n    return Promise.all([weth_promise, dai_promise, mkr_promise]);\n  }\n\n  // Helper function to get approvals for all the currencies in this market for the given account.\n  async getApprovals(account, market_address) {\n    const { options } = this.props;\n    const weth_promise = await options.contracts.WETH.allowance(account, market_address);\n    const dai_promise = await options.contracts.DAI.allowance(account, market_address);\n    const mkr_promise = await options.contracts.MKR.allowance(account, market_address);\n    return Promise.all([weth_promise, dai_promise, mkr_promise])\n  }\n\n  // Helper function that gets the UI balance, meaning it is in Ethers (not Gwei) and Rounded to the nearest 1000ths place.\n  // If there is a problem in the value then the value is a Error string.\n  getUIBalance(raw_balance) {\n    let UI_balance = raw_balance\n    if(raw_balance != null) {\n      UI_balance = Math.round(ethers.utils.formatUnits(raw_balance.toString(), 'ether') * 1000) / 1000\n    } else {\n      UI_balance = \"Error...\"\n    }\n    return UI_balance    \n  }\n\n  // Helper function that gets the toggle value for the allowance for a given balance/allowance pair\n  getUIAllowance(raw_balance, raw_allowance) {\n    let UI_allowance = false\n    raw_allowance = ethers.utils.bigNumberify(raw_allowance)\n    let balance = ethers.utils.bigNumberify(raw_balance)\n    if(raw_allowance.gt(balance)) {\n      UI_allowance = true\n    } else {\n      UI_allowance = false\n    }\n    return UI_allowance\n  }\n\n  // Helper function to create object that is used for easy rendering.\n  buildRenderList() {\n    const { currencies } = this.state;\n    const renderList = Object.keys(currencies).map((key) => {\n      let raw_balance = currencies[key][\"balance\"];\n      let raw_allowance = currencies[key][\"approved\"];\n      return {\n        name: key,\n        balance: this.getUIBalance(raw_balance),\n        approved: this.getUIAllowance(raw_balance, raw_allowance)\n      };\n    })\n    return renderList;\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { currencies, account } = this.state\n    const { padded, closeSidebar, options } = this.props\n    const currenciesInformation = this.buildRenderList();\n\n    // Display a X icon if the user is on mobile (indicated b padded).\n    var x_icon = <Icon name=\"close\" id=\"Infobar-x\" size=\"large\" onClick={closeSidebar} />\n    if(padded) {\n      x_icon = null\n    }\n\n    // Retrieve the username or Login button if readOnly is true.\n    var username = <Button primary as={Link} to={'/login'} fluid onClick={closeSidebar} >Login</Button>\n    if(!options.readOnly) {\n      username = <HumanName address={account} />\n    }\n\n    return (\n      <div id='Infobar'>\n        {/* Insert the account information bar */}\n        <div className='Infobar-header'>{username}{x_icon}</div>\n        \n        {/* Insert the Table of Balances/Approvals */}\n        <Table basic='very' padded={\"very\"} striped unstackable id=\"Infobar-table\">\n          <Table.Header id=\"Infobar-table-header\">\n            <Table.Row>\n              <Table.HeaderCell className='Infobar-table-entry' textAlign='left'>Token</Table.HeaderCell>\n              <Table.HeaderCell className='Infobar-table-entry' textAlign='left'>Balance</Table.HeaderCell>\n              <Table.HeaderCell className='Infobar-table-entry' textAlign='left'>Approved</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n\n          <Table.Body>\n            {/* Loop and render each currency's info */}\n            {currenciesInformation.map((currency, index) => {\n              return (\n                <Table.Row key={index}>\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.name}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell>\n                    <Header className='Infobar-table-entry' textAlign='left'>{currency.balance}</Header>\n                  </Table.Cell>\n\n                  <Table.Cell  textAlign='left'>\n                    <Checkbox toggle disabled={currency.name === \"ETH\" || options.readOnly} checked={currency.approved} onClick={ () => this.toggleApproval(currency.name, currency.approved) } />\n                  </Table.Cell>\n                </Table.Row>\n              )\n            })}\n          </Table.Body>\n        </Table>\n\n        {/* Insert the wrapping station widget into the sidebar. */}\n        <WrapStation options={options} weth_balance={currencies[\"WETH\"][\"balance\"]} eth_balance={currencies[\"ETH\"][\"balance\"]} />\n      </div>\n    )\n  }\n}\n\nexport default Infobar;","// Import Major Dependencies\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Menu, Responsive, Icon, Dropdown, Sidebar, Segment } from 'semantic-ui-react';\n\n// Import CSS Files\nimport './navbar.css';\n\n// Import Artifacts\nimport logo from '../../images/x.svg';\nimport Infobar from '../infobar/infobar';\n\nconst other_buttons = [\n  { name: 'WETH/DAI', href: '/WETH_DAI' },\n  { name: 'MKR/WETH', href: '/MKR_WETH'},\n  { name: 'MKR/DAI', href: '/MKR_DAI'}\n];\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false\n    };\n  }\n\n  // Helper function to toggle the sidebar. Used only on mobile.\n  toggleVisible = () => {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  render() {\n    const { children, options } = this.props;\n    const { visible } = this.state;\n\n    return (\n      <div>\n        {/* Mobile Version of the navbar that displays at the top */}\n        <Responsive {...Responsive.onlyMobile}>\n          <Menu \n            borderless\n            fixed='top'\n            id='Navbar-mobile'\n          >\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' href='/' className='Navbar-item'>\n              <div className='Navbar-button-mobile' id='Navbar-logo-container'><img src={logo} alt='logo' id='Navbar-logo-mobile' /></div>\n            </Menu.Item>\n\n            {/* Display dropdown of all other markets */}\n            <Dropdown item text='Markets' className='Navbar-dropdown'>\n              <Dropdown.Menu>\n                {\n                  other_buttons.map((button, idx) => {\n                    return (\n                        <Dropdown.Item\n                          name={button.name}\n                          className='Navbar-item'\n                          as={Link}\n                          to={button.href}\n                          key={idx}\n                        >\n                        {button.name}\n                      </Dropdown.Item>\n                    )\n                  })\n                }\n              </Dropdown.Menu>\n            </Dropdown>\n\n            {/* Display a hamburger menu to toggle sidebar with information. */}\n            <Menu.Menu position='right'>\n              <Menu.Item>\n                <Icon name='sidebar' inverted onClick={ this.toggleVisible } />\n              </Menu.Item>                \n            </Menu.Menu>\n          </Menu>\n\n          {/* Add sidebar infobar */}\n          <Sidebar as={Segment} animation=\"overlay\" direction=\"right\" visible={visible} id=\"Navbar-Side_info_bar\">\n            <Infobar options={options} padded={false} closeSidebar={this.toggleVisible} />\n          </Sidebar>\n          { children }\n        </Responsive>\n\n        {/* Desktop Version of the navbar that is on the left side of the screen */}\n        <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n          <Menu secondary vertical size='mini' id='Navbar'>\n            {/* Display a Logo Home button */}\n            <Menu.Item name='Home' className='Navbar-item' as={Link} to={'/'}>\n              <div className='Navbar-button' id='Navbar-logo-container'><img src={logo} alt='logo' className='Navbar-icon' /></div>\n            </Menu.Item>\n\n            {/* Display the list of other buttons for all other markets */}\n            {\n              other_buttons.map((button, idx) => {\n                return (\n                    <Menu.Item\n                      name={button.name}\n                      className='Navbar-item'\n                      onClick={this.handleToggle}\n                      as={Link}\n                      to={button.href}\n                      key={idx}\n                    >\n                    <div className='Navbar-button'>{button.name}</div>\n                  </Menu.Item>\n                )\n              })\n            }\n          </Menu>\n          {/* Children are all content that will be rendered on page, it is put as a child to the navbar */}\n          { children }\n        </Responsive>\n      </div>\n    )\n  }\n}\n\nexport default Navbar;","// Import Major Dependencies\nimport React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport { Responsive } from 'semantic-ui-react';\nimport { ethers } from 'ethers';\n\n// Import CSS Files\nimport './App.css';\n\n// Import src code\nimport Market from '../market/market';\nimport Home from '../home/home';\nimport Login from '../login/login';\nimport Navbar from '../navbar/navbar';\nimport Infobar from '../infobar/infobar';\n\n// Load ABI and Config file\nconst config = require(\"./../../config\");\nconst erc20Abi = require(\"./../../abi/standard-token/erc20\");\nconst WEthAbi = require(\"./../../abi/standard-token/ds-eth-token\");\nconst MatchingMarketAbi = require(\"./../../abi/maker-otc/matching-market\");\nconst SupportMethodsAbi = require(\"./../../abi/otc-support-methods/otc-support-methods\");\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      options: {\n        provider: null,\n        signer: null,\n        contracts: [],\n        readOnly: true,\n        handleLogin: this.handleLogin,\n        handleReLogin: this.handleReLogin\n      }\n    };\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.handleReLogin = this.handleReLogin.bind(this);\n  }\n\n  componentWillMount() {\n    // Retrieve and store options\n    const options = this.getOptions();\n    this.setState({ options })\n  }\n\n  // Constructs and Returns a Dictionary with the environment options\n  getOptions() {\n    // Get a connection to the Ethereum blockchain\n    const ethereum = this.getEthereum();\n    let contracts = [];\n\n    // Retrieve the Provider, Signer, and Contracts\n    let provider = null;\n    let signer = null;\n    let readOnly = true;\n\n    // If an Ethereum connection exists then retrieve the provider and signer\n    // Else connect to default provider from ethers.js (myetherwallet/infura) and generate a random account to be the signer\n    if(ethereum) {\n      provider = new ethers.providers.Web3Provider(ethereum);\n      signer = provider.getSigner();\n\n      // Set readOnly to false since we have a signing account (not randomly generated)\n      // The contracts are then initialized with the signer\n      readOnly = false;\n      contracts = this.getContracts(signer);\n    } else {\n      provider = new ethers.getDefaultProvider();\n      signer = new ethers.Wallet.createRandom();\n\n      // Since this is readOnly, the contracts are initialized with the provider\n      contracts = this.getContracts(provider);\n    }\n\n    // Package options\n    const options = this.buildOptions(provider, signer, contracts, readOnly);\n    return options;\n  }\n\n  async handleLogin(phrase, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      let provider = new ethers.getDefaultProvider();\n      let signer = new ethers.Wallet.fromMnemonic(phrase).connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n\n      // Encrypt and store the wallet into the browsers local storage\n      let encrypted_wallet = await signer.encrypt(password);\n      this.saveEncryptedWallet(encrypted_wallet);\n    }\n  }\n\n  async handleReLogin(account, json_string, password) {\n    // Only do something if the current page is readOnly and just passthrough otherwise.\n    if(this.state.options.readOnly) {\n      console.log(\"LOGGING IN WITH ACCOUNT \" + account);\n      let provider = new ethers.getDefaultProvider();\n      let signer = await ethers.Wallet.fromEncryptedJson(json_string, password);\n      signer = signer.connect(provider);\n      const contracts = this.getContracts(signer);\n      const readOnly = false;\n      const options = this.buildOptions(provider, signer, contracts, readOnly);\n      this.setState({ options });\n    }\n  }\n\n  saveEncryptedWallet(wallet) {\n    var json_wallet = JSON.parse(wallet)\n    var address = json_wallet.address\n    var localStorage = window.localStorage\n    if(!localStorage.getItem(\"encrypted_wallets\")) {\n      localStorage.setItem(\"encrypted_wallets\", JSON.stringify({}))\n    }\n\n    var stored_wallets = JSON.parse(localStorage.getItem(\"encrypted_wallets\"))\n    stored_wallets[\"0x\" + address] = wallet\n    localStorage.setItem(\"encrypted_wallets\", JSON.stringify(stored_wallets))\n  }\n\n  /** ################# HELPER FUNCTIONS ################# **/\n\n  // Helper function to build options dictionary\n  buildOptions(provider, signer, contracts, readOnly) {\n    return {\n      provider: provider,\n      signer: signer,\n      contracts: contracts,\n      readOnly: readOnly,\n      handleLogin: this.handleLogin,\n      handleReLogin: this.handleReLogin\n    }\n  }\n\n  // Helper method to retrieve provider to ethereum blockchain if present and null otherwise.\n  getEthereum() {\n    var ethereum = null;\n    // If web3 is present in the window return the connection provider otherwise null\n    if(window.web3) {\n      ethereum = window.ethereum ? window.ethereum : window.web3.currentProvider;\n    }\n    return ethereum;\n  }\n\n  // Helper method to retrieve an object of all the initialized contracts.\n  getContracts(contract_initializer) {\n    return {\n      WETH: new ethers.Contract(config[\"tokens\"][\"main\"][\"W-ETH\"], WEthAbi.interface, contract_initializer),\n      DAI: new ethers.Contract(config[\"tokens\"][\"main\"][\"DAI\"], erc20Abi.interface, contract_initializer),\n      MKR: new ethers.Contract(config[\"tokens\"][\"main\"][\"MKR\"], erc20Abi.interface, contract_initializer),\n      Market: new ethers.Contract(config[\"market\"][\"main\"][\"address\"], MatchingMarketAbi.interface, contract_initializer),\n      SupportMethods: new ethers.Contract(config[\"otcSupportMethods\"][\"main\"][\"address\"], SupportMethodsAbi.interface, contract_initializer)\n    };\n  }\n\n  /** ################# RENDER ################# **/\n\n  render() {\n    const { options } = this.state\n\n    // If there is no provider at all then render a Loading screen.\n    if(options.provider === null) {\n      return (\n        <div className=\"App\">\n          Loading...\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"App\">\n        <HashRouter>\n          <div>\n            <Navbar options={options} />\n            <div id=\"App_market_container\">\n                <Switch>\n                  <Route exact path='/' render={() => <Home />} />\n                  <Route exact path='/login' render={() => <Login options={options} />} />\n                  <Route exact path='/WETH_DAI' render={() => <Market key={'WETH_DAI'} options={options} currencies={['WETH', 'DAI']} />} />\n                  <Route exact path='/MKR_WETH' render={() => <Market key={'MKR_WETH'} options={options} currencies={['MKR', 'WETH']} />} />\n                  <Route exact path='/MKR_DAI' render={() => <Market  key={'MKR_DAI'} options={options} currencies={['MKR', 'DAI']} />} />\n                </Switch>\n            </div>\n            <Responsive minWidth={Responsive.onlyTablet.minWidth}>\n              <Infobar padded={true} options={options} />\n            </Responsive>\n          </div>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App\n","// Import Major Dependencies\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport registerServiceWorker from './registerServiceWorker';\n\n// Import CSS Files\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-virtualized/styles.css'\nimport './index.css';\n\n// Import App src code\nimport App from './containers/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}